<?xml version="1.0"?><st-source><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 16, 2016' '8:06:22 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:06:22 on 16 de diciembre de 2016."</do-it><component-created><name>ProyectoFinal</name> <type>package</type></component-created><component-property><name>ProyectoFinal</name> <type>package</type><property>comment</property> <value>'A'</value></component-property><component-property><name>ProyectoFinal</name> <type>package</type><property>notice</property> <value>'A'</value></component-property><class><name>Persona</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPersona fechaNacimiento dni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPersona">idPersona	^idPersona</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPersona:">idPersona: anObject	idPersona := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="fechaNacimiento">fechaNacimiento	^fechaNacimiento</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="fechaNacimiento:">fechaNacimiento: anObject	fechaNacimiento := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="dni">dni	^dni</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="dni:">dni: anObject	dni := anObject</body></methods><methods><class-id>Persona</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idPersona := nil.	fechaNacimiento := nil.	dni := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Persona class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Persona</class-id><body>A</body></comment><comment><class-id>Persona</class-id><body>Clase que representa una persona.</body></comment><class><name>Cliente</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idCliente </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCliente">idCliente	^idCliente</body></methods><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCliente:">idCliente: anObject	idCliente := anObject</body></methods><methods><class-id>Cliente</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idCliente := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Cliente class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Vendedor</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVendedor legajo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor">idVendedor	^idVendedor</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor:">idVendedor: anObject	idVendedor := anObject</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="legajo">legajo	^legajo</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="legajo:">legajo: anObject	legajo := anObject</body></methods><methods><class-id>Vendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idVendedor := nil.	legajo := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Vendedor class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Persona</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPersona nombre apellido fechaNacimiento dni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: unNombrenombre:=unNombre.</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="apellido:">apellido: unNombre	apellido:=unNombre.</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="apellido:">apellido: unApellido	apellido:=unApellido.</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: unNombre	nombre:=unNombre.</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="apellido">apellido	^apellido</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombreYApellido">nombreYApellido	^nombre + ' ' + apellido</body></methods><do-it>persona:= Persona new.</do-it><do-it>persona</do-it><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombreYApellido">nombreYApellido	^nombre , ' ' , apellido</body></methods><do-it>persona:= Persona new.persona apellido: 'Alfaro'.persona nombre: 'Diego'.persona nombreYApellido.</do-it><class><name>Categoria</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idCategoria idCategoriaPadre nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^idCategoria</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria:">idCategoria: anObject	idCategoria := anObject</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoriaPadre">idCategoriaPadre	^idCategoriaPadre</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoriaPadre:">idCategoriaPadre: anObject	idCategoriaPadre := anObject</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>Categoria</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idCategoria := nil.	idCategoriaPadre := nil.	nombre := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Categoria class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Articulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo precio tipo nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio">precio	^precio</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio:">precio: anObject	precio := anObject</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tipo">tipo	^tipo</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tipo:">tipo: anObject	tipo := anObject</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>Articulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	precio := nil.	tipo := nil.	nombre := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Articulo class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>Articulo class organization addCategory: #comparing</do-it><methods><class-id>Articulo class</class-id> <category>comparing</category><body package="ProyectoFinal" selector="servicio">servicio	^#servicio</body></methods><do-it>#asd</do-it><do-it>#asd.</do-it><do-it>#asd class</do-it><methods><class-id>Articulo class</class-id> <category>comparing</category><body package="ProyectoFinal" selector="producto">producto	^#producto</body></methods><component-created><name>ProyectoFinal</name> <type>package</type></component-created><class><name>Persona</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPersona nombre apellido fechaNacimiento sexo dni direccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPersona">idPersona	^idPersona</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPersona:">idPersona: anObject	idPersona := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="apellido">apellido	^apellido</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="apellido:">apellido: anObject	apellido := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="fechaNacimiento">fechaNacimiento	^fechaNacimiento</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="fechaNacimiento:">fechaNacimiento: anObject	fechaNacimiento := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sexo">sexo	^sexo</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sexo:">sexo: anObject	sexo := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="dni">dni	^dni</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="dni:">dni: anObject	dni := anObject</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="direccion">direccion	^direccion</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="direccion:">direccion: anObject	direccion := anObject</body></methods><methods><class-id>Persona</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idPersona := nil.	nombre := nil.	apellido := nil.	fechaNacimiento := nil.	sexo := nil.	dni := nil.	direccion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Persona class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Vendedor</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVendedor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor">idVendedor	^idVendedor</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor:">idVendedor: anObject	idVendedor := anObject</body></methods><methods><class-id>Vendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idVendedor := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Vendedor class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Cliente</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idCliente </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCliente">idCliente	^idCliente</body></methods><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCliente:">idCliente: anObject	idCliente := anObject</body></methods><methods><class-id>Cliente</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idCliente := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Cliente class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Administrador</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idAdministrador </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Administrador</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idAdministrador">idAdministrador	^idAdministrador</body></methods><methods><class-id>Administrador</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idAdministrador:">idAdministrador: anObject	idAdministrador := anObject</body></methods><methods><class-id>Administrador</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idAdministrador := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Administrador class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Categoria</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idCategoria idCategoriaPadre nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^idCategoria</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria:">idCategoria: anObject	idCategoria := anObject</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoriaPadre">idCategoriaPadre	^idCategoriaPadre</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoriaPadre:">idCategoriaPadre: anObject	idCategoriaPadre := anObject</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Categoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>Categoria</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idCategoria := nil.	idCategoriaPadre := nil.	nombre := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Categoria class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Articulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo tipo nombre precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tipo">tipo	^tipo</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tipo:">tipo: anObject	tipo := anObject</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio">precio	^precio</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio:">precio: anObject	precio := anObject</body></methods><methods><class-id>Articulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	tipo := nil.	nombre := nil.	precio := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Articulo class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idVendedor precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVenta">idVenta	^idVenta</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVenta:">idVenta: anObject	idVenta := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCliente">idCliente	^idCliente</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCliente:">idCliente: anObject	idCliente := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor">idVendedor	^idVendedor</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor:">idVendedor: anObject	idVendedor := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio">precio	^precio</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio:">precio: anObject	precio := anObject</body></methods><methods><class-id>Venta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idVenta := nil.	idCliente := nil.	idVendedor := nil.	precio := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Venta class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idVendedor precio calificacion comentario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>AdmProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaArticulos listaCategorias listaVentas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := nil.	listaArticulos := nil.	listaCategorias := nil.	listaVentas := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 19, 2016' '7:25:41 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 19:25:41 on 19 de diciembre de 2016."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 19, 2016' '7:25:45 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 19:25:45 on 19 de diciembre de 2016."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 19, 2016' '7:25:49 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 19:25:49 on 19 de diciembre de 2016."</do-it><do-it>AdmProyectoFinal organization addCategory: #controlling</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarArticulo:">agregarArticulo: unArticulo	^unArticulo</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarArticulo:">agregarArticulo: unArticulo	listaArticulos add: unArticulo.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarPersona:">agregarPersona: unaPersona	listaPersonas add: unaPersona.</body></methods><do-it>lista:=#(1 2 3 4 5).</do-it><do-it>lista:=#(1 2 3 4 5) class.</do-it><do-it>lista:=#(1-&gt;4 2-&gt;5 3 4 5).</do-it><do-it>lista:=#(1-&gt;4 2-&gt;5 3 4 5).</do-it><do-it>lista:=#(1-&gt;4 2-&gt;5 3 4 5) class.</do-it><do-it>lista:=List new.lista add: 1.lista add: 2.lista add: 3.lista add: 4.lista add: 5.lista collect: [:e|e=1].</do-it><do-it>lista:=List new.lista add: 1.lista add: 2.lista add: 3.lista add: 4.lista add: 5.lista collect: [:e|e+1].</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarArticulo:por:">modificarArticulo: unIdArticulo por: unArticulo	listaArticulos collect: [:a|		((a idArticulo) = unIdArticulo) ifTrue: [a=unArticulo]	].</body></methods><do-it>lista:=List new.lista add: 1.lista add: 2.lista add: 3.lista add: 4.lista add: 5.lista collect: [:e|	(e=1) ifTrue: [e+1].].</do-it><do-it>	(e=1) ifTrue: [e+1]; ifFalse: [e].</do-it><do-it>	(e=1) ifFalse: [e]; ifTrue: [e+1].</do-it><do-it>lista collect: [:t| (e=1) ifTrue: [1] ifFalse: [2] ].</do-it><do-it>lista collect: [:t| (t=1) ifTrue: [1] ifFalse: [2] ].</do-it><do-it>lista collect: [:t| (t=1) ifTrue: [1] ifFalse: [2] ].</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarArticulo:por:">modificarArticulo: unIdArticulo por: unArticulo	listaArticulos collect: [:a|		((a idArticulo) = unIdArticulo)			ifTrue: [unArticulo]			ifFalse: [a].	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarArticulo:por:">modificarArticulo: unIdArticulo por: unArticulo	listaArticulos := (listaArticulos collect: [:a|		((a idArticulo) = unIdArticulo)			ifTrue: [unArticulo]			ifFalse: [a].	]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarCategoria:">agregarCategoria: unaCategoria	listaCategorias add: unaCategoria.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarCategoria:por:">modificarCategoria: unIdCategoria por: unaCategoria	listaArticulos := (listaArticulos collect: [:c|		((c idCategoria) = unIdCategoria)			ifTrue: [unaCategoria]			ifFalse: [c].	]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarArticulo:">eliminarArticulo: unIdArticulo	listaArticulos.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarArticulo:">eliminarArticulo: unIdArticulo	listaArticulos removeAllSuchThat: [:a| unIdArticulo = (a idArticulo)].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarPersona:">eliminarPersona: unIdArticulo	listaArticulos removeAllSuchThat: [:a| unIdArticulo = (a idArticulo)].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarPersona:">eliminarPersona: unIdPersona	listaPersonas removeAllSuchThat: [:p| unIdPersona = (p idPersona)].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarPersona:por:">modificarPersona: unIdPersona por: unaPersona	listaPersonas:= (listaPersonas collect: [:p|		((p idArticulo) = unIdPersona)			ifTrue: [unaPersona]			ifFalse: [p].	]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarVenta:">agregarVenta: unaVenta	listaVentas add: unaVenta.</body></methods><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idVendedor precio calificacionVendedor calificacionCliente comentario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas do: [:v|		((v idVenta) = unIdVenta)			ifTrue: [v calificacionVendedor: unaCalificacion].	].</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificacionVendedor">calificacionVendedor	^calificacionVendedor</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificacionCliente">calificacionCliente	^calificacionCliente</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 23, 2016' '12:57:55 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 0:57:55 on 23 de diciembre de 2016."</do-it><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificacionVendedor:">calificacionVendedor: anObject	calificacionVendedor := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificacionCliente:">calificacionCliente: anObject	calificacionCliente := anObject</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionVendedor: unaCalificacion.				^v.			] 			ifFalse: [							].	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionVendedor: unaCalificacion.				^v.			] 			ifFalse: [v].	].</body></methods><do-it>admin := AdmProyectoFinal new.</do-it><do-it>venta := Venta new.venta idVenta: 10.</do-it><do-it>admin := AdmProyectoFinal new.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>admin := AdmProyectoFinal new.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [			((unTipoPersona) = (self cliente))				ifTrue: [					v calificacionVendedor: unaCalificacion.					^v.				].			] 			ifFalse: [v].	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [			((unTipoPersona) = (self vendedor))				ifTrue: [					v calificacionVendedor: unaCalificacion.					^v.				].			] 			ifFalse: [v].	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [			((unTipoPersona) = (self vendedor))				ifTrue: [					v calificacionVendedor: unaCalificacion.					v.				]				ifFalse: [					v calificacionCliente: unaCalificacion.					v.				].			] 			ifFalse: [v].	].</body></methods><do-it>AdmProyectoFinal class organization addCategory: #organization</do-it><methods><class-id>AdmProyectoFinal class</class-id> <category>organization</category><body package="ProyectoFinal" selector="cliente">cliente	^#cliente</body></methods><methods><class-id>AdmProyectoFinal class</class-id> <category>organization</category><body package="ProyectoFinal" selector="vendedor">vendedor	^#vendedor</body></methods><methods><class-id>AdmProyectoFinal class</class-id> <category>organization</category><body package="ProyectoFinal" selector="administrador">administrador	^#administrador</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarVenta:con:al:">calificarVenta: unIdVenta con: unaCalificacion al: unTipoPersona	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [			((unTipoPersona) = (AdmProyectoFinal vendedor))				ifTrue: [					v calificacionVendedor: unaCalificacion.					v.				]				ifFalse: [					v calificacionCliente: unaCalificacion.					v.				].			] 			ifFalse: [v].	].</body></methods><do-it>admin := AdmProyectoFinal new.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal vendedor).</do-it><do-it>admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).</do-it><do-it>Articulo class organization addCategory: #organization</do-it><methods><class-id>Articulo class</class-id> <category>organization</category><body package="ProyectoFinal" selector="servicio">servicio	^#servicio</body></methods><methods><class-id>Articulo class</class-id> <category>organization</category><body package="ProyectoFinal" selector="producto">producto	^#producto</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	(listaArticulos select: [:e| (e idArticulo) = unId ]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	^(listaArticulos select: [:e| (e idArticulo) = unId ]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPorId:">buscarCategoriaPorId: unId	^(listaCategorias select: [:e| (e idCategoria) = unId ]).</body></methods><do-it>admin := AdmProyectoFinal new.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).</do-it><do-it>admin := AdmProyectoFinal new.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).admin buscarCategoriaPorId: 40.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	(unIdCategoria = otroIdCategoria)	ifTrue: [		^True.	]	ifFalse: [		(self perteneceALaCategoria: ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre) a: otroIdCategoria )	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoriaPadre|	(unIdCategoria = otroIdCategoria)	ifTrue: [		^True.	]	ifFalse: [		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		^(categoriaPadre != nil) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoriaPadre|	(unIdCategoria = otroIdCategoria)	ifTrue: [		^True.	]	ifFalse: [		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		^(categoriaPadre ~~ nil) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)	].</body></methods><do-it>(4 ~~ 4).</do-it><do-it>(5 ~~ 4).</do-it><do-it>(5 ~~ nil).</do-it><do-it>(5 ~~ nil).</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoriaPadre|	(unIdCategoria = otroIdCategoria)	ifTrue: [		^true.	]	ifFalse: [		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		^(categoriaPadre ~~ nil) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoriaPadre|	(unIdCategoria = otroIdCategoria)	ifTrue: [		^true.	]	ifFalse: [		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		^(			(categoriaPadre ~~ nil) &amp;			(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)		).	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="hijosDeLaCategoria:">hijosDeLaCategoria: unId	|listaHijos|	(listaCategorias do: [:e|		((e idCategoriaPadre) = unId) ifTrue: [listaHijos add: e].	]).	^listaHijos.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="hijosDeLaCategoria:">hijosDeLaCategoria: unId	|listaHijos|	listaHijos := List new.	(listaCategorias do: [:e|		((e idCategoriaPadre) = unId) ifTrue: [listaHijos add: e].	]).	^listaHijos.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).admin buscarCategoriaPorId: 40.</do-it><do-it>categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).admin buscarCategoriaPorId: 40.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).admin buscarCategoriaPorId: 40.</do-it><do-it>admin hijosDeLaCategoria: 5.</do-it><do-it>admin hijosDeLaCategoria: 5.</do-it><do-it>respuesta := admin hijosDeLaCategoria: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		respuesta:=(			(categoriaPadre ~~ nil) &amp;			(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)		).	].	^respuesta.</body></methods><component-created><name>DLLCC</name> <type>package</type></component-created><parcel-loaded><name>DLLCC</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'dllcc' 'DLLCC.pcl'))</filename></parcel-loaded><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		respuesta:=(			(categoriaPadre ~~ nil) &amp;			(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)		).	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		respuesta:=(			(categoriaPadre ~~ nil) &amp;			(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)		).	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoriae categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoriae := (self buscarCategoriaPorId: unIdCategoria).		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		respuesta:=(			(categoriaPadre ~~ nil) &amp;			(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)		).	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).		respuesta:=(			(categoriaPadre ~~ nil) &amp;			(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)		).	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria ~~ nil)		ifTrue: [			categoriaPadre := ((self buscarCategoriaPorId: unIdCategoria) idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		]		ifFalse: [			respuesta := false.		].	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria ~~ nil)		ifTrue: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		]		ifFalse: [			respuesta := false.		].	].	^respuesta.</body></methods><do-it>admin buscarCategoriaPorId: 40.</do-it><do-it>admin buscarCategoriaPorId: 6.</do-it><do-it>admin buscarCategoriaPorId: 5.</do-it><do-it>(admin buscarCategoriaPorId: 5) first.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPorId:">buscarCategoriaPorId: unId	^(listaCategorias select: [:e| (e idCategoria) = unId ]) first.</body></methods><do-it>admin buscarCategoriaPorId: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPorId:">buscarCategoriaPorId: unId	^(listaCategorias select: [:e| (e idCategoria) = unId ]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria isEmpty)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoria := categoria first.			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><do-it>admin buscarCategoriaPorId: 45.</do-it><do-it>respuesta := admin hijosDeLaCategoria: 5.</do-it><do-it>admin perteneceALaCategoria: 6 a: 5.</do-it><do-it>admin perteneceALaCategoria: 6 a: 6.</do-it><do-it>admin perteneceALaCategoria: 6 a: 8.</do-it><do-it>admin perteneceALaCategoria: 6 a: 3.</do-it><do-it>admin perteneceALaCategoria: 6 a: 6.</do-it><do-it>admin perteneceALaCategoria: 6 a: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPorId:">buscarCategoriaPorId: unId	^(listaCategorias detect: [:e| (e idCategoria) = unId ]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	^(listaArticulos detect: [:e| (e idArticulo) = unId ]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	^(listaArticulos detect: [:e| (e idArticulo) = unId ] ifNone: []).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	^(listaArticulos detect: [:e| (e idArticulo) = unId ] ifNone: [nil]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPorId:">buscarCategoriaPorId: unId	^(listaCategorias detect: [:e| (e idCategoria) = unId ] ifNone:[]).</body></methods><do-it>admin buscarCategoriaPorId: 45.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	^(listaArticulos detect: [:e| (e idArticulo) = unId ] ifNone: []).</body></methods><do-it>admin buscarCategoriaPorId: 5.</do-it><do-it>admin buscarCategoriaPorId: 6.</do-it><do-it>admin buscarCategoriaPorId: 7.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria ~~ nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoria := categoria first.			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria = nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoria := categoria first.			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria = nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><do-it>admin perteneceALaCategoria: 6 a: 5.</do-it><do-it>admin perteneceALaCategoria: 6 a: 4.</do-it><do-it>admin perteneceALaCategoria: 6 a: 3.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticulosPorCategoria:">buscarArticulosPorCategoria: unIdCategoria	^(listaArticulos detect: [:e| (self perteneceALaCategoria: (e idCategoria) a: unIdCategoria) ] ifNone:[]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticulosPorCategoria:">buscarArticulosPorCategoria: unIdCategoria	^(listaArticulos select: [:e| (self perteneceALaCategoria: (e idCategoria) a: unIdCategoria) ]).</body></methods><class><name>Articulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idCategoria tipo nombre precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^idCategoria</body></methods><methods><class-id>Articulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria:">idCategoria: anObject	idCategoria := anObject</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.</do-it><do-it>admin buscarArticulosPorCategoria: 5.</do-it><do-it>admin buscarArticulosPorCategoria: 4.</do-it><do-it>admin buscarArticulosPorCategoria: 6.</do-it><do-it>admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarVentasPorVendedor:">buscarVentasPorVendedor: unId	^(listaVentas select: [:e| (e idVendedor) = unId ]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarVentasPorCliente:">buscarVentasPorCliente: unId	^(listaVentas select: [:e| (e idCliente) = unId ]).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarVenta: 10 con: 4.5 al: (AdmProyectoFinal cliente).admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarAlClienteVenta:con:">calificarAlClienteVenta: unIdVenta con: unaCalificacion	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionCliente: unaCalificacion.				v.			] 			ifFalse: [v].	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarAlClienteEnLaVenta:con:">calificarAlClienteEnLaVenta: unIdVenta con: unaCalificacion	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionCliente: unaCalificacion.				v.			] 			ifFalse: [v].	].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarAlVendedorEnLaVenta:con:">calificarAlVendedorEnLaVenta: unIdVenta con: unaCalificacion	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionVendedor: unaCalificacion.				v.			] 			ifFalse: [v].	].</body></methods><remove-selector><class-id>AdmProyectoFinal</class-id> <selector>calificarAlClienteVenta:con:</selector></remove-selector><remove-selector><class-id>AdmProyectoFinal</class-id> <selector>calificarVenta:con:al:</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 24, 2016' '3:01:34 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:01:34 on 24 de diciembre de 2016."</do-it><class><name>VentanaPrincipal</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Proyecto Final' 			#bounds: #(#{Graphics.Rectangle} 670 305 1141 625 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #labelFromApplication false #openType #advanced ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 310 98 950 578 ) 			#toolBar: #'dasdsa dasd asdas' ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 4 0 352 0 25 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 29 0 351 0 53 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 24, 2016' '3:44:38 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:44:38 on 24 de diciembre de 2016."</do-it><class><name>MenuVentanaPrincipal</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>MenuVentanaPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="none">none	"Tools.MenuEditor new openOnClass: self andSelector: #none"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Agregar Articulo' 				#nameKey: #botonAgregarArticulo ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 407 144 1047 624 ) 			#flags: 4 			#menu: #MenuVentanaPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 4 0 352 0 25 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 29 0 351 0 53 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 630 234 1270 714 ) 			#flags: 4 			#menu: #menu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 4 0 352 0 25 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 29 0 351 0 53 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menu">menu	"Tools.MenuEditor new openOnClass: self andSelector: #menu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #asd 					#defaultString: 'dd' 					#catalogID: #asd ) 				#value: #asdas ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menu">menu	"Tools.MenuEditor new openOnClass: self andSelector: #menu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #asd 					#defaultString: 'dd' 					#catalogID: #asd ) 				#nameKey: #d 				#value: #asdas ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 112 238 752 718 ) 			#flags: 4 			#menu: #menu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 12 0 349 0 37 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 48 0 349 0 69 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MenuVentanaPrincipal</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MenuVentanaPrincipal</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>MenuVentanaPrincipal removeFromSystem</do-it><remove-selector><class-id>VentanaPrincipal class</class-id> <selector>menu</selector></remove-selector><do-it>VentanaPrincipal class organization removeCategory: #resources</do-it><methods><class-id>VentanaPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#commandID: #redo 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #dasd 					#defaultString: 'dsad' 					#catalogID: #dsad ) 				#nameKey: #aasd 				#value: #dasd ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 12 0 349 0 37 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 48 0 349 0 69 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 696 163 1336 643 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 12 0 349 0 37 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 48 0 349 0 69 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VentanaPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 649 231 1289 711 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 12 0 349 0 37 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 48 0 349 0 69 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>VentanaPrincipal renameTo: #ProyectoFinalUI</do-it><methods><class-id>ProyectoFinalUI class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#commandID: #redo 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #dasd 					#defaultString: 'dsad' 					#catalogID: #dsad ) 				#nameKey: #aasd 				#value: #dasd 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #dasdasd 								#defaultString: 'dsadasd' 								#catalogID: #dasdd ) 							#value: #sad ) ) #(1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Agregar articulo...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Agregar categoria/subcategoría...' ) ) #(2 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Agregar artículo...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Agregar categoría/subcategoría...' 							#value: #closeRequest ) ) #(2 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Agregar artículo...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Agregar categoría/subcategoría...' ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 611 144 1251 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 12 0 349 0 37 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 48 0 349 0 69 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #lastSavedSize #positionType #positionSystemDefault #labelFromApplication false #openType #advanced #sizeAutoSave true ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 3 26 323 506 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 316 0 27 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 33 0 315 0 54 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 316 0 27 0 ) 					#name: #BotonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 33 0 315 0 54 0 ) 					#name: #BotonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>proyectoUI := ProyectoFinalUI windowSpec.</do-it><do-it>proyectoUI := ProyectoFinalUI new.</do-it><do-it>proyectoUIW := ProyectoFinalUI windowSpec.</do-it><do-it>proyectoUI open.</do-it><do-it>proyectoUI open.</do-it><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 709 176 1029 656 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #dddd 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>Transcript show: 'Case C'; cr.</do-it><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #value 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #value 					#target: #'[Transcript show: "hello"]'					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #value 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>proyectoUI := ProyectoFinalUI new.proyectoUI open.Transcript show: 'Case C'; cr.</do-it><do-it>proyectoUI := ProyectoFinalUI new.proyectoUI open.Transcript show: 'Case C'; cr.</do-it><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 226 147 546 627 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #value 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #'Transcript show: ''Case C''; cr.' ) 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #value 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #'[Transcript show: ''Case C''; cr.]' ) 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>Transcript show: 'Case C'; cr.</do-it><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #value 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #'Transcript show: (194 * 9) printString; cr.' ) 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #'Transcript show: (194 * 9) printString; cr.' ) 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><class><name>AdmProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaArticulos listaCategorias listaVentas gui </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := ProyectoFinalUI new.	gui open.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>ProyectoFinalUI class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="gui">gui	^gui</body></methods><do-it>admin gui.</do-it><do-it>admin gui.</do-it><do-it>admin gui widgetAt: #botonRegistrarVenta.</do-it><do-it>(admin gui widgetAt: #botonRegistrarVenta) label: 'perro'.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.(admin gui widgetAt: #botonRegistrarVenta) label: 'perro'.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>(admin gui widgetAt: #botonRegistrarVenta).</do-it><do-it>(admin gui widgetAt: #botonRegistrarVenta) labelString: 'as'.</do-it><do-it>(admin gui widgetAt: #botonRegistrarVenta) labelString: 'asasd'.</do-it><do-it>(admin gui widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].</do-it><do-it>ProyectoFinalUI renameTo: #UI_MenuPrincipal</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := UI_MenuPrincipal new.	gui open.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>gui</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>gui</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>AdmProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaArticulos listaCategorias listaVentas guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>AdmProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaArticulos listaCategorias listaVentas gui </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>AdmProyectoFinal</class-id> <selector>gui</selector></remove-selector><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' add: (UI_MenuPrincipal new).	"(admin gui widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello']."	gui open.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].	"(admin gui "	gui open.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].	(gui at: 'menuPrincipal') open.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	(gui at: 'menuPrincipal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>admin := AdmProyectoFinal new.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><class><name>UI_agregarVenta</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_agregarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Agregar Venta' 			#bounds: #(#{Graphics.Rectangle} 940 293 1140 493 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>UI_MenuPrincipal renameTo: #UI_menuPrincipal</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_menuPrincipal new).	(gui at: 'menuPrincipal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>UI_agregarVenta renameTo: #UI_AgregarVenta</do-it><do-it>UI_menuPrincipal renameTo: #UI_MenuPrincipal</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	(gui at: 'menuPrincipal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	(gui at: 'menuPrincipal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [Transcript show: 'hello'].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [((gui at: 'menuPrincipal') open).].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [((gui at: 'agregarVenta') open).].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	(gui at: 'menuPrinciṕal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.].	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	gui := Dictionary new.	self initializeUI.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	(gui at: 'menuPrinciṕal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.].</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	(gui at: 'menuPrincipal') open.	((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.].</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>UI_MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#shortcutKeyCharacter: #End 							#shortcutModifiers: 2 ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Agregar artículo...' 							#nameKey: #botonAgregarArticulo 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Agregar categoría/subcategoría...' 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	^(gui at: 'menuPrincipal').</body></methods><do-it>(admin menuPrincipal widgetAt: #botonRegistrarVenta) label.</do-it><do-it>(admin menuPrincipal widgetAt: #botonRegistrarVenta) label.</do-it><do-it>(admin menuPrincipal widgetAt: #botonRegistrarVenta) label.</do-it><do-it>(admin menuPrincipal widgetAt: #botonRegistrarVenta) label.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.(admin menuPrincipal widgetAt: #botonRegistrarVenta) label.</do-it><do-it>(admin menuPrincipal widgetAt: #botonAgregarArticulo).</do-it><do-it>(admin menuPrincipal widgetAt: #menu).</do-it><do-it>(admin menuPrincipal widgetAt: #menuPrincipal).</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	gui at: 'menuPrincipal' put: (UI_MenuPrincipal new).	gui at: 'agregarVenta' put: (UI_AgregarVenta new).	(gui at: 'menuPrincipal') open.	"((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.]."</body></methods><do-it>UI_MenuPrincipal class organization addCategory: #accessing</do-it><methods><class-id>UI_MenuPrincipal class</class-id> <category>accessing</category><body package="ProyectoFinal" selector="test">test	Transcript show: 'hello'.</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Agregar artículo...' 							#nameKey: #botonAgregarArticulo 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Agregar categoría/subcategoría...' 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #test 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #'UI_MenuPrincipal test' 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #'UI_MenuPrincipal test' 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>UI_MenuPrincipal test.</do-it><do-it>UI_MenuPrincipal test.</do-it><do-it>UI_MenuPrincipal test.</do-it><do-it>UI_MenuPrincipal test.</do-it><remove-selector><class-id>UI_MenuPrincipal class</class-id> <selector>test</selector></remove-selector><do-it>UI_MenuPrincipal class organization removeCategory: #accessing</do-it><do-it>UI_MenuPrincipal class organization addCategory: #interface</do-it><do-it>UI_MenuPrincipal class organization removeCategory: #interface</do-it><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="test">test	Transcript show: 'hello'.</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #test 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 27, 2016' '4:05:07 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 16:05:07 on 27 de diciembre de 2016."</do-it><remove-selector><class-id>UI_MenuPrincipal class</class-id> <selector>test</selector></remove-selector><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="test">test	Transcript show: 'hello'.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="gui">gui	^gui</body></methods><remove-selector><class-id>AdmProyectoFinal</class-id> <selector>menuPrincipal</selector></remove-selector><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="test">test	Transcript show: 'hello'.	(UI_AgregarVenta new) open.</body></methods><class><name>AdmProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaArticulos listaCategorias listaVentas guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	guiMenuPrincipal := UI_MenuPrincipal new.	guiMenuPrincipal open.	"((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.]."</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarVenta">agregarVenta	(UI_AgregarVenta new) open.</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #agregarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #test 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCalificacion">agregarCalificacion	Transcript show: 'hello'.</body></methods><remove-selector><class-id>UI_MenuPrincipal</class-id> <selector>test</selector></remove-selector><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #agregarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #agregarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_AgregarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'Agregar Venta' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 724 285 1144 485 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><class><name>UI_MenuPrincipal</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: unObjeto	admin:= unObjeto.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	guiMenuPrincipal := UI_MenuPrincipal new.	guiMenuPrincipal admin: self.	guiMenuPrincipal open.	"((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.]."</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarArticulo">agregarArticulo	Transcript show: 'hello'.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	Transcript show: 'hello'.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: unObjeto	admin := unObjeto.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Agregar artículo...' 							#nameKey: #botonAgregarArticulo 							#value: #agregarArticulo 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Agregar categoría/subcategoría...' 							#value: #agregarCategoria 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) ) #(2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><class><name>UI_AgregarVenta</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_AgregarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>UI_AgregarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject</body></methods><class><name>UI_AgregarCategoria</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Agregar categoría / Subcategoría' 			#bounds: #(#{Graphics.Rectangle} 530 338 1005 620 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 21 0 146 0 126 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 201 0 105 0 222 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 234 0 58 0 255 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: 3.	categoria idCategoriaPadre: 4.	categoria nombre: 4.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	(UI_AgregarCategoria new) open.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #idCategoria).</do-it><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Agregar categoría / Subcategoría' 			#bounds: #(#{Graphics.Rectangle} 446 243 921 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 21 0 146 0 126 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 201 0 105 0 222 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 234 0 58 0 255 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) ) ) )</body></methods><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #idCategoria).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #idCategoria).</do-it><do-it>(perro widgetAt: #idCategoria) stepper.</do-it><do-it>(perro widgetAt: #idCategoria) model.</do-it><do-it>(perro widgetAt: #idCategoria) model value.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria idCategoriia idCategoriaPadre nombre|	categoria := Categoria new.	categoria idCategoria: 3.	categoria idCategoriaPadre: 4.	categoria nombre: 4.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: 4.	categoria nombre: 4.</body></methods><do-it>(perro widgetAt: #nombreCategoria) model value.</do-it><do-it>(perro widgetAt: #nombreCategoria) model value.</do-it><do-it>(perro widgetAt: #nombreCategoria) model value.</do-it><do-it>(perro widgetAt: #idCategoria) model value.</do-it><do-it>(perro widgetAt: #nombreCategoria).</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><do-it>(perro widgetAt: #categoriaPadre) model.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) model value).</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) model value).	admin agregarCategoria: categoria.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui|	ui := UI_AgregarCategoria new.	ui admin: admin.	ui open.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarVenta">agregarVenta	|ui|	ui := UI_AgregarVenta new.	ui admin: admin.	ui open.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) model value).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Agregar categoría / Subcategoría' 			#bounds: #(#{Graphics.Rectangle} 626 268 1101 550 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 21 0 146 0 126 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 201 0 105 0 222 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 234 0 58 0 255 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) ) ) )</body></methods><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #nombreCategoria) model.</do-it><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #labelFromApplication false #openType #advanced ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 815 272 1135 554 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 21 0 313 0 118 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 197 0 146 0 218 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 259 0 231 0 311 0 252 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) ) ) )</body></methods><remove-selector><class-id>UI_AgregarCategoria</class-id> <selector>admin</selector></remove-selector><remove-selector><class-id>UI_AgregarVenta</class-id> <selector>admin</selector></remove-selector><methods><class-id>UI_AgregarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comentario">comentario	^comentario</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comentario:">comentario: anObject	comentario := anObject</body></methods><do-it>(perro widgetAt: #categoriaPadre) model.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #categoriaPadre) model.</do-it><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 243 843 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 21 0 313 0 118 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight 					#rootExpander: true ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 197 0 146 0 218 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 259 0 231 0 311 0 252 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) ) ) )</body></methods><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #categoriaPadre) model.</do-it><do-it>(perro widgetAt: #categoriaPadre).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #categoriaPadre).</do-it><do-it>(perro widgetAt: #categoriaPadre).</do-it><do-it>(perro widgetAt: #categoriaPadre) rootExpander: 'dasda'.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateAppendCollection: 3.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateAdd: 3.</do-it><do-it>dict := Dictionary new.dict at: 0 put: 'dasd'.dict at: 1 put: 'dasd'.dict at: 1 put: 'dasd'.dict at: 2 put: 'dasd'.</do-it><do-it>dict := Dictionary new.dicth := Dictionary new.dicth at: 0 put: 'adas'.dict at: 0 put: dicth.dicth := Dictionary new.dicth at: 0 put: 'adas'.dict at: 0 put: dicth.dicth := Dictionary new.dicth at: 0 put: 'adas'.dict at: 0 put: dicth.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #categoriaPadre) forceSelectionUpdate.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateQuietlyAt: 40.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateAppendCollection: 3.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateQuietlyAt: 40.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre) updateAppendCollection: 3.(perro widgetAt: #categoriaPadre) updateQuietlyAt: 40.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateAdd: 40.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateInsert: 40.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateInsert: 40.</do-it><do-it>(perro widgetAt: #categoriaPadre) updateInsert: 40.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.admin calificarAlVendedorEnLaVenta: 10 con: 4.5.admin buscarCategoriaPorId: 7.respuesta := admin hijosDeLaCategoria: 5.admin perteneceALaCategoria: 6 a: 3.admin buscarArticulosPorCategoria: 5.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>(perro widgetAt: #categoriaPadre) model.</do-it><do-it>(perro widgetAt: #categoriaPadre) model.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>perro := UI_AgregarCategoria new.</do-it><do-it>perro open.</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root.</do-it><do-it>node := Node new.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := 'hola'.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := 'hola'.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := 'hola'.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := 'hola'.</do-it><do-it>nodef := Node new.</do-it><do-it>nodef := XML.Text new.</do-it><do-it>nodef := XML.Text new.</do-it><do-it>nodef text: 'hola'.</do-it><do-it>node := TreeModel new.</do-it><do-it>node := TreeModel new.</do-it><do-it>treem := TreeModel new.</do-it><do-it>treem := TreeModel new.</do-it><do-it>treem := TreeModel new.</do-it><do-it>treem := TreeModel new.node := AssociationTree new.treem root: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root: node.</do-it><do-it>node := AssociationTree new.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root addChild: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root addChild: node.</do-it><do-it>node2 := AssociationTree new.</do-it><do-it>node := AssociationTree new.</do-it><do-it>node key: 'Raiz' value: 'perro'.</do-it><do-it>node := AssociationTree new.</do-it><do-it>node key: 'Raiz' value: 'perro'.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.node := AssociationTree new.node key: 'Raiz' value: 'perro'.((perro widgetAt: #categoriaPadre) model value) root: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.node := AssociationTree new.node key: 'Raiz' value: 'perro'.((perro widgetAt: #categoriaPadre) model value) root: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.node := AssociationTree new.node key: 'Raiz' value: 'perro'.((perro widgetAt: #categoriaPadre) model value) root: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>node := AssociationTree new.</do-it><do-it>node key: 'dasdas' value: 'perro'.</do-it><do-it>node key: 'dasdas' value: 'perro'.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root addChild: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root value.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>node := AssociationTree new.</do-it><do-it>node key: 'dasdas' value: 'perro'.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) root addChild: node.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 780 270 1100 552 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 197 0 146 0 218 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 259 0 231 0 311 0 252 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.HierarchicalViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 315 0 120 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.node := AssociationTree new.node key: 'dasdas' value: 'perro'.((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>admin := AdmProyectoFinal new.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value).</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) add: 'dad'.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) add: 'dasdas'.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) add: 'dasdas'.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) add: 'dasdas'.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>((perro widgetAt: #categoriaPadre)).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.((perro widgetAt: #categoriaPadre) model).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).</do-it><do-it>nodo := AssociationTree new.</do-it><do-it>nodo := AssociationTree new.</do-it><do-it>nodo key: 'dasd' value: 'dasd'.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) add: nodo.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).nodo := Association new.nodo key: 'dasd' value: 'dasd'.</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).nodo := Association new.nodo key: 'dasd' value: 'dasd'.((perro widgetAt: #categoriaPadre) model value) add: nodo.</do-it><do-it>((perro widgetAt: #categoriaPadre) model value) add: nodo.</do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).((perro widgetAt: #categoriaPadre) model).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre) model.</do-it><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 584 251 904 533 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 197 0 146 0 218 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 259 0 231 0 311 0 252 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre) </do-it><do-it>((perro widgetAt: #categoriaPadre) model).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.(perro widgetAt: #categoriaPadre).((perro widgetAt: #categoriaPadre) model).</do-it><do-it>(perro widgetAt: #categoriaPadre).</do-it><do-it>SequenceView  example3.</do-it><do-it>(0 to: 500 by: 10)</do-it><do-it>hola :=(0 to: 500 by: 10).</do-it><do-it>perro := UI_AgregarCategoria new.perro open.((perro widgetAt: #categoriaPadre) model: (ValueHolder with: (0 to: 500 by: 10))).</do-it><do-it>(#line1 &lt;&lt; #examples &gt;&gt; 'line 1') </do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	ui admin: admin.	admin listaCategorias do: [].	ui open.		(#line1 &lt;&lt; #examples &gt;&gt; 'line 1') </body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPersonas">listaPersonas	^listaPersonas</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPersonas:">listaPersonas: anObject	listaPersonas := anObject</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaArticulos">listaArticulos	^listaArticulos</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaArticulos:">listaArticulos: anObject	listaArticulos := anObject</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaCategorias">listaCategorias	^listaCategorias</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaCategorias:">listaCategorias: anObject	listaCategorias := anObject</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaVentas">listaVentas	^listaVentas</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaVentas:">listaVentas: anObject	listaVentas := anObject</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	ui admin: admin.	admin listaCategorias do: [:c|		listaCategorias add: (#line1 &lt;&lt; #examples &gt;&gt; 'line 1').	].	ui open.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	ui admin: admin.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (#line1 &lt;&lt; #examples &gt;&gt; 'line 1').	].	ui open.</body></methods><do-it>(#line1 &lt;&lt; #examples &gt;&gt; 'line 1')</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	ui admin: admin.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: ((c idCategoria) &lt;&lt; #examples &gt;&gt; (c nombre)).	].	ui open.</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	ui admin: admin.	ui open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: ((c idCategoria) &lt;&lt; #examples &gt;&gt; (c nombre)).	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		listaCategorias add: ((c idCategoria) &lt;&lt; #examples &gt;&gt; (c nombre)).	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><do-it>(#dsada&gt;&gt;'sadads')</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		listaCategorias add: ((c idCategoria) &gt;&gt; (c nombre)).	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>(#dsada&gt;&gt;'sadads')</do-it><do-it>(#dsada&gt;&gt;'sadads')</do-it><do-it>admin buscarCategoriaPorId: 7.</do-it><do-it>admin buscarCategoriaPorId: 5.</do-it><do-it>(admin buscarCategoriaPorId: 5) nombre.</do-it><do-it>#((admin buscarCategoriaPorId: 5) nombre).</do-it><do-it>UserMessage new.</do-it><do-it>UserMessage new = 5; key: #hola.</do-it><do-it>(UserMessage new) = 5; key: #hola.</do-it><do-it>(UserMessage new) key: #hola.</do-it><do-it>(UserMessage new) key: #hola; = 5.</do-it><do-it>um := UserMessage new.um key: 'dasd'.um = 5.</do-it><do-it>um</do-it><do-it>um</do-it><do-it>um &gt;&gt; dsadas</do-it><do-it>um &gt;&gt; 'dsadas'</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.		admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre)		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.		admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 243 843 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 152 0 104 0 173 0 ) 					#name: #idCategoria 					#type: #number 					#low: 0 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 132 0 ) 					#name: #Label2 					#label: 'Id categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 197 0 146 0 218 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 178 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 259 0 231 0 311 0 252 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>	ui := UI_AgregarCategoria new.	ui open.	((ui widgetAt: #nombreCategoria) model value).</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria tmp|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	((self widgetAt: #nombreCategoria) selectedVisualBlock: [:x| tmp:=x]).	categoria nombre: tmp.	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria tmp|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	((self widgetAt: #nombreCategoria) selectedVisualBlock: [:x| categoria nombre: x ]).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	((self widgetAt: #nombreCategoria) selectedVisualBlock: [:x| categoria nombre: x ]).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) selection value).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) selection).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>um := UserMessage new.um key: 'dasd'.um &gt;&gt; 'dsadas'</do-it><do-it>um</do-it><do-it>um defaultString</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) selection defaultString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) model value).	categoria nombre: ((self widgetAt: #nombreCategoria) model value).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection defaultString).	categoria nombre: ((self widgetAt: #nombreCategoria) model value).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection defaultString asNumber).	categoria nombre: ((self widgetAt: #nombreCategoria) model value).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><do-it>4</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; 'dasdsad'.		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_AgregarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>'dasda' asString</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection defaultString asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	admin listaCategorias collect: [:x| x idCategoria].	categoria idCategoria: ((self widgetAt: #idCategoria) model value).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>(admin listaCategorias collect: [:x| x idCategoria]).</do-it><do-it>(admin listaCategorias collect: [:x| x idCategoria]).</do-it><do-it>(admin listaCategorias collect: [:x| x idCategoria]) size.</do-it><do-it>(admin listaCategorias collect: [:x| x idCategoria]).</do-it><do-it>(admin listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :c | (a &gt; c)   ifTrue: [a]   ifFalse: [c]].</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: ((admin listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :c | (a &gt; c) ifTrue: [a] ifFalse: [c]]).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><do-it>5 max: 4</do-it><do-it>5 max: 6.</do-it><do-it>((admin listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :c | a max: c]).</do-it><do-it>((admin listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :b | a max: b]).</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="autoIncrementIdCategoria">autoIncrementIdCategoria	^((listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :b | a max: b]).</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="autoIncrementIdCategoria">autoIncrementIdCategoria	^((listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :b | a max: b])+1.</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="autoIncrementIdCategoria">autoIncrementIdCategoria	^((listaCategorias collect: [:x| x idCategoria]) inject: 0 into: [:a :b | a max: b]) + 1.</body></methods><do-it>admin autoIncrementIdCategoria</do-it><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin listaCategorias autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_AgregarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 241 280 561 470 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><do-it>UI_AgregarCategoria renameTo: #UI_ModificarCategoria</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>UI_AgregarVenta renameTo: #UI_ModificarVenta</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarVenta">agregarVenta	|ui|	ui := UI_ModificarVenta new.	ui admin: admin.	ui open.</body></methods><class><name>UI_SeleccionarItem</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 686 208 1032 339 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #id 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 106 0 56 0 127 0 ) 					#name: #botonNuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 232 0 106 0 345 0 127 0 ) 					#name: #botonEditar 					#label: 'Editar seleccionado' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>As yet unclassified</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias</body></methods><do-it>UI_SeleccionarItem organization renameCategory: #'As yet unclassified' to: #updating</do-it><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	self windowLabel: 'dasd'.</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	self windowLabel.</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	self windowLabel thisContext.</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #id) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_SeleccionarItem new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_SeleccionarItem new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui cargarCategorias.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui um listaCategorias|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui cargarCategorias.	ui open."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui cargarCategorias.	ui open."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 106 0 56 0 127 0 ) 					#name: #botonNuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 232 0 106 0 345 0 127 0 ) 					#name: #botonEditar 					#label: 'Editar seleccionado' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|ui|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarCategorias."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar Personas' 							#nameKey: #botonAdministrarPersonas 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#nameKey: #botonMenuArticulos 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#nameKey: #botonMenuCategorias 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) ) #(3 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar Personas' 							#nameKey: #botonAdministrarPersonas 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#nameKey: #botonMenuArticulos 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#nameKey: #botonMenuCategorias 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) ) #(3 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategoriaa">administrarCategoriaa	|ui|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarCategorias."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategorias">administrarCategorias	|ui|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarCategorias."agregarCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias))."</body></methods><remove-selector><class-id>UI_MenuPrincipal</class-id> <selector>administrarCategoriaa</selector></remove-selector><remove-selector><class-id>UI_MenuPrincipal</class-id> <selector>agregarCalificacion</selector></remove-selector><remove-selector><class-id>UI_MenuPrincipal</class-id> <selector>agregarArticulo</selector></remove-selector><remove-selector><class-id>UI_MenuPrincipal</class-id> <selector>agregarCategoria</selector></remove-selector><remove-selector><class-id>UI_MenuPrincipal</class-id> <selector>agregarVenta</selector></remove-selector><methods><class-id>UI_ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarCategoria:">cargarCategoria: unId	|categoria|	categoria := (admin buscarCategoriaPorId: unId).	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarCategoria:">cargarCategoria: unId	|categoria|	categoria := (admin buscarCategoriaPorId: unId).	"idCategoria := unId."	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarCategoria:">cargarCategoria: unId	|categoria|	categoria := (admin buscarCategoriaPorId: unId).	"idCategoria := unId."	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	((self widgetAt: #nombreCategoria) model) value: (categoria nombre).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>UI_ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarCategoria:">cargarCategoria: unId	|categoria|	categoria := (admin buscarCategoriaPorId: unId).	"idCategoria := unId."	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	((self widgetAt: #nombreCategoria) model) value: (categoria nombre).</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 28, 2016' '8:31:56 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:31:56 on 28 de diciembre de 2016."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 28, 2016' '8:34:01 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:34:01 on 28 de diciembre de 2016."</do-it><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #botonNuevo) action: ["self modificarCategoria"]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #botonNuevo) action: ["self nuevaCategoria"]).	((self widgetAt: #botonNuevo) action: ["self modificarCategoria"]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #botonNuevo) action: ["self nuevaCategoria"]).	((self widgetAt: #botonEditar) action: ["self modificarCategoria"]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevaCategoria">nuevaCategoria</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategorias">administrarCategorias	|ui|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarCategorias.</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevaCategoria">nuevaCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	listaCategorias := List new.	ui admin: admin.	ui open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><methods><class-id>UI_MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarArticulos">administrarArticulos	|ui|	ui := UI_SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarArticulos.</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarArticulos">cargarArticulos	|um listaArticulos|	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idArticulo).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaArticulos)).	((self widgetAt: #botonNuevo) action: ["self nuevaCategoria"]).	((self widgetAt: #botonEditar) action: ["self modificarCategoria"]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevaCategoria">nuevaCategoria	|ui um listaCategorias|	ui := UI_ModificarCategoria new.	ui admin: admin.	ui open.	((ui widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevaCategoria">nuevaCategoria	|ui|	ui := UI_ModificarCategoria new.	ui admin: admin.	ui open.</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><remove-selector><class-id>UI_SeleccionarItem</class-id> <selector>open</selector></remove-selector><do-it>UI_SeleccionarItem organization removeCategory: #'interface opening'</do-it><methods><class-id>UI_ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarArticulos">cargarArticulos	|um listaArticulos|	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idArticulo).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaArticulos)).	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><class><name>UI_SeleccionarItem</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id">id	^id</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id:">id: anObject	id := anObject</body></methods><remove-selector><class-id>UI_SeleccionarItem</class-id> <selector>id</selector></remove-selector><remove-selector><class-id>UI_SeleccionarItem</class-id> <selector>id:</selector></remove-selector><class><name>UI_SeleccionarItem</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	((self widgetAt: #categoriaPadre) selection key asNumber).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := UI_ModificarCategoria new.	ui admin: admin.	ui open.	((self widgetAt: #categoriaPadre) selection key asNumber).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := UI_ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #categoriaPadre) selection key asNumber).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarArticulos">cargarArticulos	|um listaArticulos|	listaArticulos := List new.	admin listaArticulos do: [:c|		um := UserMessage new.		um key: (c idArticulo).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: listaArticulos)).	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarArticulos">cargarArticulos	|um lista|	lista := List new.	admin listaArticulos do: [:c|		um := UserMessage new.		um key: (c idArticulo).		um &gt;&gt; (c nombre).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um lista|	lista := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><class><name>UI_ModificarCategoria</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>UI_ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id">id	^id</body></methods><methods><class-id>UI_ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id:">id: anObject	id := anObject</body></methods><methods><class-id>UI_MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec2">windowSpec2	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #agregarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #agregarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><remove-selector><class-id>UI_MenuPrincipal class</class-id> <selector>windowSpec2</selector></remove-selector><class><name>AdmUI</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdmUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>AdmUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject</body></methods><methods><class-id>AdmUI</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	admin := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>AdmUI class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>MenuPrincipal</name><environment>Smalltalk</environment><super>AdmUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>MenuPrincipal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>UI_MenuPrincipal</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>MenuPrincipal</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>AdmUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>MenuPrincipal</name><environment>Smalltalk</environment><super>AdmUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MenuPrincipal</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>MenuPrincipal</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>MenuPrincipal removeFromSystem</do-it><class><name>UI_MenuPrincipal</name><environment>Smalltalk</environment><super>AdmUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>UI_ModificarCategoria</name><environment>Smalltalk</environment><super>AdmUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>UI_ModificarVenta</name><environment>Smalltalk</environment><super>AdmUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>UI_SeleccionarItem</name><environment>Smalltalk</environment><super>AdmUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><do-it>UI_MenuPrincipal renameTo: #MenuPrincipal</do-it><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	guiMenuPrincipal open.	"((gui at: 'menuPrincipal') widgetAt: #botonRegistrarVenta) action: [(gui at: 'agregarVenta') open.]."</body></methods><do-it>UI_ModificarCategoria renameTo: #ModificarCategoria</do-it><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #categoriaPadre) selection key asNumber).</body></methods><methods><class-id>UI_SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevaCategoria">nuevaCategoria	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.</body></methods><do-it>UI_ModificarVenta renameTo: #ModificarVenta</do-it><do-it>UI_SeleccionarItem renameTo: #SeleccionarItem</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarArticulos">administrarArticulos	|ui|	ui := SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarArticulos.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategorias">administrarCategorias	|ui|	ui := SeleccionarItem new.	ui admin: admin.	ui open.	ui cargarCategorias.</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><comment><class-id>ModificarCategoria</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarVenta</class-id><body>ModificarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.sdasda</body></comment><comment><class-id>SeleccionarItem</class-id><body>SeleccionarItem has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>Articulo</class-id><body>Articulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of tipoasd</body></comment><comment><class-id>Categoria</class-id><body>Categoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	idCategoriaPadre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoriaPadre	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombreasd</body></comment><comment><class-id>Cliente</class-id><body>Cliente has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idCliente	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idClienteasd</body></comment><comment><class-id>Persona</class-id><body>Persona has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	apellido	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of apellido	direccion	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of direccion	dni	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of dni	fechaNacimiento	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of fechaNacimiento	idPersona	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPersona	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	sexo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of sexoasd</body></comment><comment><class-id>Vendedor</class-id><body>Vendedor has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idVendedor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idVendedorasd</body></comment><comment><class-id>Venta</class-id><body>Venta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	calificacionCliente	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of calificacionCliente	calificacionVendedor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of calificacionVendedor	comentario	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of comentario	idCliente	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCliente	idVendedor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idVendedor	idVenta	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idVenta	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precioasd</body></comment><comment><class-id>MenuPrincipal</class-id><body>MenuPrincipal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>AdmUI</class-id><body>AdmUI has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	admin	&lt;AdmProyectoFinal&gt;	description of adminasd</body></comment><comment><class-id>AdmProyectoFinal</class-id><body>AdmProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdmUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaPersonas	&lt;(List of: Articulo)&gt;	description of listaPersonas	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><comment><class-id>Administrador</class-id><body>Administrador has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idAdministrador	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idAdministradorasd</body></comment><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	self initializeUI.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Administrador</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idAdministrador := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Administrador</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	idAdministrador := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Administrador</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	idAdministrador := nil.	^self</body></methods><methods><class-id>Administrador</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	idAdministrador := nil.	^self</body></methods><methods><class-id>AdmProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	self initializeUI.	^self</body></methods><methods><class-id>AdmUI</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	admin := nil.	^self</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarLista">cargarLista	|um lista|	lista := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarLista:texto:valor:">cargarLista: unaLista texto: unTexto valor: unValor	|um lista|	lista := List new.	unaLista do: [:c|		um := UserMessage new.		um key: (unValor value: c).		um &gt;&gt; (unTexto value: c).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarLista:texto:valor:">cargarLista: unaLista texto: unTexto valor: unValor	|um lista|	lista := List new.	unaLista do: [:x|		um := UserMessage new.		um key: (unValor value: x).		um &gt;&gt; (unTexto value: x).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).</body></methods><remove-selector><class-id>SeleccionarItem</class-id> <selector>cargarLista</selector></remove-selector><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um lista|	lista := List new.	"	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	"	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	|um lista|	lista := List new.	"	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	"	self cargarLista: (admin listaCategorias) texto: [:x| x nombre] valor: [:x| x idCategoria].	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	self cargarLista: (admin listaCategorias) texto: [:x| x nombre] valor: [:x| x idCategoria].	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #id) selection key asNumber).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><do-it>admin := AdmProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.admin agregarArticulo: articulo.</do-it><do-it>AdmProyectoFinal renameTo: #AdminProyectoFinal</do-it><comment><class-id>AdminProyectoFinal</class-id><body>AdmProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdmUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaPersonas	&lt;(List of: Articulo)&gt;	description of listaPersonas	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><do-it>AdmUI renameTo: #AdminProyectoFinalUI</do-it><comment><class-id>AdminProyectoFinalUI</class-id><body>AdmUI has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	admin	&lt;AdmProyectoFinal&gt;	description of adminasd</body></comment><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarArticulos">cargarArticulos	self cargarLista: (admin listaArticulos) texto: [:x| x nombre] valor: [:x| x idArticulo].	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><remove-selector><class-id>ModificarVenta</class-id> <selector>admin</selector></remove-selector><remove-selector><class-id>ModificarVenta</class-id> <selector>admin:</selector></remove-selector><do-it>ModificarVenta organization removeCategory: #accessing</do-it><remove-selector><class-id>AdminProyectoFinalUI</class-id> <selector>initialize</selector></remove-selector><do-it>AdminProyectoFinalUI organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>MenuPrincipal</class-id> <selector>admin</selector></remove-selector><remove-selector><class-id>MenuPrincipal</class-id> <selector>admin:</selector></remove-selector><remove-selector><class-id>ModificarCategoria</class-id> <selector>admin</selector></remove-selector><remove-selector><class-id>ModificarCategoria</class-id> <selector>admin:</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>admin</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>admin:</selector></remove-selector><do-it>SeleccionarItem organization removeCategory: #accessing</do-it><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><do-it>ModificarCategoria renameTo: #ModificarItem</do-it><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := ModificarItem new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevaCategoria">nuevaCategoria	|ui|	ui := ModificarItem new.	ui admin: admin.	ui open.</body></methods><class><name>ModificarCategoria</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarCategoria</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ModificarCategoria</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ModificarCategoria</class-id><body>agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></comment><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: ["self agregarItem"]	ifFalse: ["self actualizaItem"].</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>agregarCategoria</selector></remove-selector><do-it>ModificarCategoria organization removeCategory: #accessing</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarCategoria">agregarCategoria	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>agregarCategoria</selector></remove-selector><remove-selector><class-id>ModificarCategoria</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarCategoria organization removeCategory: #'initialize-release'</do-it><comment><class-id>ModificarCategoria</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><component-property><name>ProyectoFinal</name> <type>package</type><property>comment</property> <value>'This object has not been commented.asd'</value></component-property><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>open</selector></remove-selector><do-it>ModificarItem organization removeCategory: #'interface opening'</do-it><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificarCategoria">modificarCategoria	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarCategoria:">cargarCategoria: unId	|categoria|	categoria := (admin buscarCategoriaPorId: unId).	"idCategoria := unId."	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	((self widgetAt: #nombreCategoria) model) value: (categoria nombre).</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>cargarCategoria:</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarItem">agregarItem	^nil</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizaItem">actualizaItem	^nil</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [self agregarItem]	ifFalse: [self actualizaItem].</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizaItem">actualizaItem	^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarItem">actualizarItem	^nil</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>actualizaItem</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarItem">actualizarItem	^nil</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>actualizaItem</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [self agregarItem]	ifFalse: [self actualizarItem].</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarItem">agregarItem	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>agregarCategoria</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarItem">actualizarItem	(admin buscarCategoriaPorId: 'ID').	^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarItem">actualizarItem	|categoria|	(admin buscarCategoriaPorId: 'ID').	^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarItem">actualizarItem	|categoria|	(admin buscarCategoriaPorId: 'ID').		^nil</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><class><name>SeleccionarCategoria</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarCategoria</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarCategorias">cargarCategorias	self cargarLista: (admin listaCategorias) texto: [:x| x nombre] valor: [:x| x idCategoria].	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><remove-selector><class-id>SeleccionarCategoria</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarCategoria organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| x nombre] valor: [:x| x idCategoria].	((self widgetAt: #botonNuevo) action: [self nuevaCategoria]).	((self widgetAt: #botonEditar) action: [self modificarCategoria]).</body></methods><remove-selector><class-id>SeleccionarCategoria</class-id> <selector>cargarCategorias</selector></remove-selector><do-it>SeleccionarCategoria organization removeCategory: #updating</do-it><remove-selector><class-id>SeleccionarItem</class-id> <selector>cargarCategorias</selector></remove-selector><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="modificar">modificar</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo</body></methods><remove-selector><class-id>SeleccionarItem</class-id> <selector>modificar</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>modificarCategoria</selector></remove-selector><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarItem new.	ui admin: admin.	ui open.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui cargarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.</body></methods><comment><class-id>SeleccionarCategoria</class-id><body>SeleccionarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 106 0 56 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 232 0 106 0 345 0 127 0 ) 					#name: #botonEditar 					#model: #editor 					#label: 'Editar seleccionado' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| x nombre] valor: [:x| x idCategoria].</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.</body></methods><remove-selector><class-id>SeleccionarItem</class-id> <selector>nuevaCategoria</selector></remove-selector><class><name>SeleccionarArticulos</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarArticulos</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>SeleccionarArticulos</class-id><body>SeleccionarArticulos has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>SeleccionarItem</class-id> <selector>open</selector></remove-selector><do-it>SeleccionarItem organization removeCategory: #'interface opening'</do-it><methods><class-id>SeleccionarArticulos</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre] valor: [:x| x idArticulo].</body></methods><remove-selector><class-id>SeleccionarArticulos</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarArticulos organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>SeleccionarItem</class-id> <selector>cargarArticulos</selector></remove-selector><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarArticulos">administrarArticulos	|ui|	ui := SeleccionarArticulos new.	ui admin: admin.	ui open.</body></methods><methods><class-id>AdminProyectoFinalUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategorias">administrarCategorias	|ui|	ui := SeleccionarCategoria new.	ui admin: admin.	ui open.</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 106 0 56 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 232 0 106 0 345 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar seleccionado' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 241 280 561 470 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #agregarCategoria 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><remove-selector><class-id>ModificarItem class</class-id> <selector>windowSpec</selector></remove-selector><do-it>ModificarItem class organization removeCategory: #'interface specs'</do-it><class><name>ModificarArticulo</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarArticulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ModificarArticulo</class-id><body>ModificarArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>ModificarArticulo</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarArticulo organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarItem">actualizarItem</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarItem">agregarItem</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>actualizarItem</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>agregarItem</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	(admin buscarCategoriaPorId: 'ID').		^nil</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>actualizarItem</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>agregarItem</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	(admin buscarCategoriaPorId: id).		^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).		^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.	^nil</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar:">cargar: unId	|item|	item := (admin buscarCategoriaPorId: unId).	"idCategoria := unId."	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	"idCategoria := unId."	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	"((self widgetAt: #categoriaPadre) selection).     categoria idCategoriaPadre"	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>cargar:</selector></remove-selector><remove-selector><class-id>ModificarCategoria</class-id> <selector>cargarCategoria:</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id:">id: anObject	id := anObject.	self cargar.</body></methods><methods><class-id>ModificarItem</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	id := nil.	^self</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((self widgetAt: #categoriaPadre) selectionIndex: (item idCategoriaPadre)).	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) model updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) selectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarLista:texto:valor:">cargarLista: unaLista texto: unTexto valor: unValor	|um lista|	lista := List new.	unaLista do: [:x|		um := UserMessage new.		um key: (unValor value: x).		um &gt;&gt; (unTexto value: x).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	((self widgetAt: #idItem) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [self agregar]	ifFalse: [self actualizar].</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPersonas">administrarPersonas	|ui|	ui := 'SeleccionarPersonas new'.	ui admin: admin.	ui open.</body></methods><class><name>SeleccionarPersonas</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarPersonas</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPersonas) texto: [:x| x nombreYApellido] valor: [:x| x idCategoria].</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombreYApellido">nombreYApellido	^nombre , ' ' , apellido</body></methods><comment><class-id>SeleccionarPersonas</class-id><body>SeleccionarPersonas has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>SeleccionarPersonas</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarPersonas organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarPersonas</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPersonas) texto: [:x| x nombreYApellido] valor: [:x| x idPersona].</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPersonas">administrarPersonas	|ui|	ui := SeleccionarPersonas new.	ui admin: admin.	ui open.</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 643 338 989 469 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #ActionButton1 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		((c idCategoria) == id)		ifFalse:[			um := UserMessage new.			um key: (c idCategoria).			um &gt;&gt; (c nombre).			listaCategorias add: um.		].	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><remove-selector><class-id>AdminProyectoFinalUI class</class-id> <selector>new</selector></remove-selector><do-it>AdminProyectoFinalUI class organization removeCategory: #'instance creation'</do-it><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>ModificarItem class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 644 299 964 489 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 317 0 158 0 ) 					#name: #subCanvas ) ) ) )</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>open</selector></remove-selector><do-it>ModificarItem organization removeCategory: #'interface opening'</do-it><do-it>(ModificarItem new) open.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	(ModificarItem new) open.	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	(ModificarItem new) open.	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 676 307 996 497 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	(ModificarItem new) open.	super open.	((self widgetAt: #subCanvas) model: (ValueHolder with: listaCategorias)).	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	((self widgetAt: #subCanvas) model: (super open)).	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	((mi widgetAt: #subCanvas) model: (ValueHolder with: (super open))).	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	((mi widgetAt: #subCanvas) model: (ValueHolder with: self)).	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><do-it>mi := ModificarItem new.mi open.</do-it><do-it>(mi widgetAt: #subCanvas).</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{ModificarCategoria} ) ) ) )</body></methods><do-it>mi := ModificarItem new.mi open.(mi widgetAt: #subCanvas).</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 686 323 1006 513 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{ModificarCategoria} 					#clientKey: #asdad ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{ModificarCategoria} ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 390 322 710 512 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{ModificarCategoria} ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 187 355 507 545 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{ModificarCategoria} ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{MenuPrincipal} ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 667 335 987 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 160 0 ) 					#name: #subCanvas 					#majorKey: #{SeleccionarArticulos} ) ) ) )</body></methods><do-it>mi := ModificarItem new.mi open.(mi widgetAt: #subCanvas).</do-it><do-it>mi := ModificarItem new.mi open.(mi widgetAt: #subCanvas).</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 622 353 942 543 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 153 0 ) 					#name: #subCanvas 					#flags: 3 					#isOpaque: true 					#majorKey: #{SeleccionarArticulos} 					#minorKey: #dasdas 					#clientKey: #dasdas ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 153 0 ) 					#name: #subCanvas 					#flags: 3 					#isOpaque: true 					#majorKey: #{SeleccionarArticulos} 					#minorKey: #dasdas ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 576 300 896 490 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 153 0 ) 					#name: #subCanvas 					#flags: 3 					#isOpaque: true 					#majorKey: #{SeleccionarArticulos} ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0 0 0 319 0 120 0 ) 					#name: #ViewHolder1 ) ) ) )</body></methods><do-it>mi := ModificarItem new.mi open.(mi widgetAt: #subCanvas).</do-it><do-it>mi := ModificarItem new.mi open.(mi widgetAt: #ViewHolder1).</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 318 0 151 0 ) 					#name: #subCanvas 					#majorKey: #{UI.SubCanvas} 					#minorKey: #MenuPrincipal ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 318 0 151 0 ) 					#name: #subCanvas 					#minorKey: #MenuPrincipal ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 318 0 151 0 ) 					#name: #subCanvas 					#majorKey: #{UI.SubCanvasSpec} ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 318 0 151 0 ) 					#name: #subCanvas 					#majorKey: #{UI.SubCanvasSpec} 					#clientKey: #MenuPrincipal ) ) ) )</body></methods><do-it>mi := RecordVersionsViewer new.mi open.</do-it><do-it>mi := RecordVersionsViewer new.mi open.(mi widgetAt: #selectionModule).</do-it><do-it>mi := RecordVersionsViewer new.</do-it><do-it>mi open.</do-it><do-it>(mi widgetAt: #selectionModule) defaultWrapperClass.</do-it><do-it>(mi widgetAt: #selectionModule).</do-it><do-it>(mi widgetAt: #selectionModule) client: (MenuPrincipal new).</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 663 328 983 518 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 318 0 151 0 ) 					#name: #subCanvas ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	(mi widgetAt: #subCanvas) client: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 623 283 943 603 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 165 0 315 0 186 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#name: #botonAceptar 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><class><name>ModificarItem</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="item">item	^item</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="item:">item: anObject	item := anObject</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [item agregar]	ifFalse: [item actualizar].</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>item</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi item: self.	(mi widgetAt: #subCanvas) client: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi item: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [((self widgetAt: #subCanvas) client) agregar]	ifFalse: [((self widgetAt: #subCanvas) client) actualizar].</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>item</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>item</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ModificarItem</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><remove-selector><class-id>ModificarItem</class-id> <selector>item:</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	((mi widgetAt: #subCanvas) client: self).	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	(mi widgetAt: #subCanvas) client: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><do-it>mi := RecordVersionsViewer new.mi open.(mi widgetAt: #selectionModule) client: (MenuPrincipal new).</do-it><do-it>(mi widgetAt: #selectionModule).</do-it><do-it>(mi widgetAt: #selectionModule) children.</do-it><do-it>(mi widgetAt: #selectionModule).</do-it><do-it>(mi widgetAt: #selectionModule) specComponents.</do-it><do-it>(mi widgetAt: #selectionModule) wrapperClass.</do-it><do-it>(mi widgetAt: #selectionModule) components.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [item agregar]	ifFalse: [item actualizar].</body></methods><class><name>ModificarItem</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="item">item	^item</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="item:">item: anObject	item := anObject</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi item: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="item:">item: anObject	(self widgetAt: #subCanvas) client: anObject.	item := anObject</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><class><name>ModificarItem</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id claseItem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseItem">claseItem	^claseItem</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseItem:">claseItem: anObject	claseItem := anObject</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>item</selector></remove-selector><remove-selector><class-id>ModificarItem</class-id> <selector>item:</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>claseItem</selector></remove-selector><remove-selector><class-id>ModificarItem</class-id> <selector>id</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseItem:">claseItem: anObject	(self widgetAt: #subCanvas) client: anObject.	claseItem := anObject</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [claseItem agregar]	ifFalse: [item actualizar].</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id">id	^id</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id1:">id1: anObject	id := anObject</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>id1:</selector></remove-selector><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 743 291 1063 481 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 180 0 ) 					#name: #RadioButton1 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 209 0 ) 					#name: #RadioButton2 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' ) ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 180 0 ) 					#name: #RadioButton1 					#model: #da 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) 					#select: #da ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 201 0 ) 					#name: #RadioButton2 					#model: #da 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) 					#select: #da ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 180 0 ) 					#name: #RadioButton 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 201 0 ) 					#name: #RadioButton 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 719 305 1039 495 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 180 0 ) 					#name: #RadioButton 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) 					#select: #da ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 201 0 ) 					#name: #RadioButton 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) 					#select: #da ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 180 0 ) 					#name: #RadioButton1 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) 					#select: #da ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 201 0 ) 					#name: #RadioButton2 					#label: 					#(#{Kernel.UserMessage} 						#key: #dasd 						#defaultString: 'Radio Button' 						#catalogID: #da ) 					#select: #da ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 522 288 842 478 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 177 0 103 0 198 0 ) 					#name: #MenuButton1 					#menu: #productoServicio ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Editar artículo' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 792 326 1112 516 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 177 0 103 0 198 0 ) 					#name: #MenuButton1 					#menu: #productoServicio ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Editar artículo' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 763 305 1083 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Editar artículo' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 29, 2016' '8:54:43 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 8:54:43 on 29 de diciembre de 2016."</do-it><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoria) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><do-it>admin := AdminProyectoFinal new.categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.venta := Venta new.venta idVenta: 10.admin agregarVenta: venta.articulo := Articulo new.articulo idArticulo: 1.articulo idCategoria: 5.articulo nombre: 'Radio'.admin agregarArticulo: articulo.articulo := Articulo new.articulo idArticulo: 2.articulo idCategoria: 6.articulo nombre: 'Celular'.admin agregarArticulo: articulo.persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.</do-it><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>gui</selector></remove-selector><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	guiMenuPrincipal open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	"guardarInfo"	super closeRequest.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	"self cargarInfo."	self initializeUI.	^self</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarInformacionDelDisco">cargarInformacionDelDisco</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco</body></methods><do-it>ReadStream</do-it><do-it>ReadStream</do-it><do-it>lines := 'smalltalk.rc' asFilename.</do-it><do-it>lines.</do-it><do-it>lines.</do-it><do-it>lines uriComponents.</do-it><do-it>lines uriComponents.</do-it><do-it>lines uriComponents.</do-it><do-it>lines uriComponents readStream.</do-it><do-it>lines uriComponents readStream. lines</do-it><do-it>stream := 'newFile' asFilename writeStream.</do-it><do-it>stream := 'newFile' asFilename writeStream.</do-it><do-it>stream := 'newFile' asFilename readStream.</do-it><do-it>stream := 'newFile' asFilename readStream.</do-it><do-it>stream := 'newFile' asFilename readStream contents.</do-it><do-it>stream := 'newFile' asFilename readStream contents.</do-it><do-it>aStream := ReadStream on:aCollection.</do-it><do-it>aStream := ReadStream on:aCollection.</do-it><do-it>aStream := ReadStream on:aCollection.</do-it><do-it>aStream := ReadStream on: (admin listaCategorias).</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><methods><class-id>MenuPrincipal</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	admin guardarInformacionAlDisco.	super closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; 'Raíz'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><class><name>ModificarPersona</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarPersona</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ModificarPersona</class-id><body>ModificarPersona has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>ModificarPersona</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarPersona organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarPersona new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarPersona new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><comment><class-id>ModificarPersona</class-id><body>open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></comment><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open</body></methods><comment><class-id>ModificarPersona</class-id><body>ModificarPersona has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><class><name>ModificarVenta</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin autoIncrementIdCategoria</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == 0)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == 0)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ 0) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #botonNuevo) visible.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #botonNuevo) isVisible: (self class canUnderstand: #nuevo).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #botonNuevo) isVisible: (self class canUnderstand: #nuevo).	(self widgetAt: #botonEditar) isVisible: (self class canUnderstand: #editar).</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin respondsTo: #nuevo.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><remove-selector><class-id>SeleccionarPersonas</class-id> <selector>nuevo</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>editar</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>nuevo</selector></remove-selector><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar</body></methods><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Seleccionar Item' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #editar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #botonNuevo) isVisible: (self class canUnderstand: #nuevo).	(self widgetAt: #botonEditar) isVisible: (self class canUnderstand: #editar).	(self widgetAt: #botonEliminar) isVisible: (self class canUnderstand: #eliminar).</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPadrePorIdCategoria:">buscarCategoriaPadrePorIdCategoria: unId	^ self buscarCategoriaPorId: ((self buscarCategoriaPorId: unId) idCategoriaPadre).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPadrePorIdCategoria:">buscarCategoriaPadrePorIdCategoria: unId	^ (self buscarCategoriaPorId: ((self buscarCategoriaPorId: unId) idCategoriaPadre)).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; ((c nombre),  (admin buscarCategioraPadrePorIdCategoria: (c idCategoria))).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; ((c nombre), ' (', ((admin buscarCategoriaPadrePorIdCategoria: (c idCategoria)) nombre)).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; ((c nombre), ' (', ((admin buscarCategoriaPadrePorIdCategoria: (c idCategoria)) nombre) ,')').		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| ((x nombre), ' (', ((admin buscarCategoriaPadrePorIdCategoria: (x idCategoria)) nombre) ,')')] valor: [:x| x idCategoria].</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| x nombre] valor: [:x| x idCategoria].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	^(unaCategoria nombre),  ([:x| (x == nil)		ifTrue: ['']		ifFalse: [' (' , (x nombre) , ')']	] value: ((self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)))).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	^(unaCategoria nombre),  ([:x|		(x == nil)		ifTrue: ['']		ifFalse: [' (' , (x nombre) , ')']	] value: ((self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)))).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	|categoriaPadre|	categoriaPadre := (self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)).	^(unaCategoria nombre),  (		(categoriaPadre == nil)		ifTrue: ['']		ifFalse: [' (' , (categoriaPadre nombre) , ')']	).</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>categoria := Categoria new.categoria idCategoria: 5.categoria nombre: 'Electronica'.admin agregarCategoria: categoria.categoria := Categoria new.categoria idCategoria: 6.categoria idCategoriaPadre: 5.categoria nombre: 'Audio'.admin agregarCategoria: categoria.</do-it><do-it>admin nombreConFormatoCategoria: categoria.</do-it><do-it>admin nombreConFormatoCategoria: categoria.</do-it><do-it>respuesta:=(admin buscarCategoriaPorId: 5).</do-it><do-it>respuesta:=(admin buscarCategoriaPorId: 5).</do-it><do-it>admin nombreConFormatoCategoria: respuesta.</do-it><do-it>admin nombreConFormatoCategoria: respuesta.</do-it><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| (admin nombreConFormatoCategoria: x)] valor: [:x| x idCategoria].</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	mi := ModificarItem new.	mi open.	mi claseItem: self.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoria) updateModel).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoria) updateModel).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi open.	mi claseItem: self.</body></methods><remove-selector><class-id>ModificarPersona</class-id> <selector>open</selector></remove-selector><do-it>ModificarPersona organization removeCategory: #'interface opening'</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>ModificarItem new.</do-it><do-it>ModificarItem new.</do-it><do-it>ModificarArticulo new.</do-it><do-it>ModificarArticulo new.</do-it><do-it>ModificarArticulo new.</do-it><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	(mi super) open.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi super open.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi class super open.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi super open.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="openP">openP	super open.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openP.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="openWindow">openWindow	super open.</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>openP</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi claseItem: self.</body></methods><do-it>ModificarArticulo new.</do-it><do-it>ModificarArticulo new.</do-it><do-it>ModificarItem new.</do-it><do-it>ModificarItem new.</do-it><do-it>ModificarItem new.</do-it><do-it>ModificarItem new.</do-it><do-it>(ModificarItem new) open.</do-it><do-it>(ModificarVenta new) open.</do-it><do-it>(ModificarVenta new) open.</do-it><do-it>#{asd}</do-it><do-it>#{asd}</do-it><do-it>#{UI.WindowSpec}</do-it><do-it>#{UI.WindowSpec}</do-it><do-it>hola := #{UI.WindowSpec}.</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #hola			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>SeleccionarItem new</do-it><do-it>(SeleccionarItem new) open.</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'asdsa'</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar Item'</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar item'</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar item'</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar item'</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar item'</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar persona'</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar artículo'</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar venta'</body></methods><do-it>(ModificarItem new) open.</do-it><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi label: 'asd'.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>labelString</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi window label: 'asd'.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi windowSpec label: 'asd'.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi mainWindow label: 'asd'.	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi mainWindow label: (self labelString).	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar item'</body></methods><remove-selector><class-id>ModificarArticulo</class-id> <selector>labelString</selector></remove-selector><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar artículo'</body></methods><remove-selector><class-id>ModificarVenta</class-id> <selector>labelString</selector></remove-selector><do-it>ModificarVenta organization removeCategory: #'interface opening'</do-it><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar venta'</body></methods><do-it>ModificarPersona organization addCategory: #accessing</do-it><do-it>ModificarPersona classifySymbol: #labelString under: #accessing</do-it><do-it>ModificarCategoria organization addCategory: #accessing</do-it><do-it>ModificarCategoria classifySymbol: #labelString under: #accessing</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar rr'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>SeleccionarItem organization addCategory: #accessing</do-it><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><do-it>SeleccionarArticulos organization addCategory: #accessing</do-it><methods><class-id>SeleccionarArticulos</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><do-it>SeleccionarCategoria organization addCategory: #accessing</do-it><methods><class-id>SeleccionarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><do-it>SeleccionarPersonas organization addCategory: #accessing</do-it><methods><class-id>SeleccionarPersonas</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Seleccionar persona'</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Seleccionar categoría'</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar categorías'</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar categorías'</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar artículos'</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar personas'</body></methods><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar items'</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #editar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><class><name>ObjectWithRoles</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rol roles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="rol">rol	^rol</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="rol:">rol: anObject	rol := anObject</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="roles">roles	^roles</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="roles:">roles: anObject	roles := anObject</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	rol := nil.	roles := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ObjectWithRoles class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><remove-selector><class-id>ObjectWithRoles</class-id> <selector>rol:</selector></remove-selector><remove-selector><class-id>ObjectWithRoles</class-id> <selector>roles:</selector></remove-selector><methods><class-id>ObjectWithRoles</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	rol := nil.	roles := List new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="addRole:">addRole: anRol	roles add: anRol</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>error handling</category><body package="ProyectoFinal" selector="doesNotUnderstand:">doesNotUnderstand: aMessage    ^ rol perform: aMessage selector withArguments: aMessage arguments</body></methods><comment><class-id>ObjectWithRoles</class-id><body>ObjectWithRoles has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	rol	&lt;Object | ProtoObject&gt;	description of rol	roles	&lt;Collection&gt;	description of rolesasd</body></comment><class><name>Persona</name><environment>Smalltalk</environment><super>ObjectWithRoles</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPersona nombre apellido fechaNacimiento sexo dni direccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="assumeRol:">assumeRol: aBlock	rol := (roles select: [:x| (aBlock) value: x]).</body></methods><methods><class-id>ObjectWithRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="assumeRol:">assumeRol: aBlock	rol := (roles select: [:x| aBlock value: x]).</body></methods><do-it>ObjectWithRoles renameTo: #ObjetoConRoles</do-it><comment><class-id>ObjetoConRoles</class-id><body>ObjectWithRoles has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	rol	&lt;Object | ProtoObject&gt;	description of rol	roles	&lt;Collection&gt;	description of rolesasd</body></comment><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregarRol:">agregarRol: anRol	roles add: anRol</body></methods><remove-selector><class-id>ObjetoConRoles</class-id> <selector>addRole:</selector></remove-selector><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asumirRol:">asumirRol: aBlock	rol := (roles select: [:x| aBlock value: x]).</body></methods><remove-selector><class-id>ObjetoConRoles</class-id> <selector>assumeRol:</selector></remove-selector><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="borrarRoles">borrarRoles	roles := List new.	rol := nil.</body></methods><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="eliminarRol:">eliminarRol: unBloque	roles removeAllSuchThat: [:x| unBloque value: x].</body></methods><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="eliminarRoles:">eliminarRoles: unBloque	roles removeAllSuchThat: [:x| unBloque value: x].</body></methods><remove-selector><class-id>ObjetoConRoles</class-id> <selector>eliminarRol:</selector></remove-selector><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="eliminarRoles">eliminarRoles	roles := List new.	rol := nil.</body></methods><remove-selector><class-id>ObjetoConRoles</class-id> <selector>borrarRoles</selector></remove-selector><do-it>persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.cliente := Cliente new.cliente idCliente: 7.persona agregarRol: cliente.persona asumirRol: [:x| (x idCliente) = 7].</do-it><do-it>persona rol</do-it><methods><class-id>ObjetoConRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asumirRol:">asumirRol: aBlock	rol := (roles detect: [:x| aBlock value: x]).</body></methods><do-it>persona := Persona new.persona idPersona: 1.persona nombre: 'Diego'.persona apellido: 'Alfaro'.admin agregarPersona: persona.cliente := Cliente new.cliente idCliente: 7.persona agregarRol: cliente.persona asumirRol: [:x| (x idCliente) = 7].persona idCliente.</do-it><do-it>persona nombre.</do-it><name-space><name>UIProyectoFinal</name><environment>Smalltalk</environment><private>false</private><imports>			private Core.*			</imports><category></category><attributes><package>ProyectoFinal</package></attributes></name-space><do-it>AdminProyectoFinalUI relocateTo: UIProyectoFinal</do-it><do-it>MenuPrincipal removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarCategoria</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarCategoria</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarCategoria removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarArticulos</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarArticulos</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarArticulos removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarPersonas</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarPersonas</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarPersonas removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarItem</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarItem</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarItem removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarCategoria</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarCategoria</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarCategoria removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarArticulo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarArticulo</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarArticulo removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarPersona</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarPersona</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarPersona removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarVenta</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarVenta</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarVenta removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarItem</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarItem</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarItem removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>AdminProyectoFinalUI</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>AdminProyectoFinalUI</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>UIProyectoFinal.AdminProyectoFinalUI removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIProyectoFinal</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UIProyectoFinal</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>UIProyectoFinal removeFromSystem</do-it><name-space><name>UIProyectoFinal</name><environment>Smalltalk</environment><private>false</private><imports>			private Core.*			</imports><category></category><attributes><package>ProyectoFinal</package></attributes></name-space><class><name>AdminProyectoFinalUI</name><environment>UIProyectoFinal</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>admin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>UIProyectoFinal.AdminProyectoFinalUI</class-id><body>AdmUI has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	admin	&lt;AdmProyectoFinal&gt;	description of adminasd</body></comment><methods><class-id>UIProyectoFinal.AdminProyectoFinalUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin">admin	^admin</body></methods><methods><class-id>UIProyectoFinal.AdminProyectoFinalUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject</body></methods><class><name>MenuPrincipal</name><environment>Smalltalk</environment><super>UIProyectoFinal.AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>MenuPrincipal</class-id><body>MenuPrincipal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategorias">administrarCategorias	|ui|	ui := SeleccionarCategoria new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPersonas">administrarPersonas	|ui|	ui := SeleccionarPersonas new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarArticulos">administrarArticulos	|ui|	ui := SeleccionarArticulos new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	admin guardarInformacionAlDisco.	super closeRequest.</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar Personas' 							#nameKey: #botonAdministrarPersonas 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#nameKey: #botonMenuArticulos 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#nameKey: #botonMenuCategorias 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) ) #(3 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 144 843 624 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 6 0 316 0 27 0 ) 					#name: #botonRegistrarVenta 					#model: #agregarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 34 0 316 0 54 0 ) 					#name: #botonRegistrarCalificacion 					#model: #agregarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><class><name>SeleccionarItem</name><environment>Smalltalk</environment><super>UIProyectoFinal.AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>SeleccionarItem</class-id><body>SeleccionarItem has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar items'</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #botonNuevo) isVisible: (self class canUnderstand: #nuevo).	(self widgetAt: #botonEditar) isVisible: (self class canUnderstand: #editar).	(self widgetAt: #botonEliminar) isVisible: (self class canUnderstand: #eliminar).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cargarLista:texto:valor:">cargarLista: unaLista texto: unTexto valor: unValor	|um lista|	lista := List new.	unaLista do: [:x|		um := UserMessage new.		um key: (unValor value: x).		um &gt;&gt; (unTexto value: x).		lista add: um.	].	((self widgetAt: #idItem) model: (ValueHolder with: lista)).	((self widgetAt: #idItem) updateModel).</body></methods><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #editar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><class><name>SeleccionarCategoria</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>SeleccionarCategoria</class-id><body>SeleccionarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar categorías'</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| (admin nombreConFormatoCategoria: x)] valor: [:x| x idCategoria].</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarCategoria new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><class><name>SeleccionarArticulos</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>SeleccionarArticulos</class-id><body>SeleccionarArticulos has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar artículos'</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><class><name>SeleccionarPersonas</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>SeleccionarPersonas</class-id><body>SeleccionarPersonas has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarPersona new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar personas'</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPersonas) texto: [:x| x nombreYApellido] valor: [:x| x idPersona].</body></methods><class><name>ModificarItem</name><environment>Smalltalk</environment><super>UIProyectoFinal.AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id claseItem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar item'</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi mainWindow label: (self labelString).	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id">id	^id</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseItem:">claseItem: anObject	(self widgetAt: #subCanvas) client: anObject.	claseItem := anObject</body></methods><methods><class-id>ModificarItem</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	id := nil.	^self</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="id:">id: anObject	id := anObject.	self cargar.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="openWindow">openWindow	super open.</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar rr'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 263 0 290 0 315 0 311 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 202 0 291 0 253 0 312 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><class><name>ModificarCategoria</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarCategoria</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><class><name>ModificarArticulo</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarArticulo</class-id><body>ModificarArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar artículo'</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoria) updateModel).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item'			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><class><name>ModificarPersona</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarPersona</class-id><body>ModificarPersona has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar persona'</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementIdCategoria).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><class><name>ModificarVenta</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarVenta</class-id><body>ModificarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.sdasda</body></comment><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar venta'</body></methods><methods><class-id>ModificarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'Agregar Venta' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 724 285 1144 485 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>UIProyectoFinal.AdminProyectoFinalUI relocateTo: Smalltalk</do-it><do-it>UIProyectoFinal removeFromSystem</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 30, 2016' '9:55:08 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 21:55:08 on 30 de diciembre de 2016."</do-it><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><do-it>(ModificarItem new) open.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#nameKey: #botonAdministrarPersonas 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#nameKey: #botonMenuArticulos 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#nameKey: #botonMenuCategorias 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) ) #(3 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><class><name>AdminProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaRoles listaArticulos listaCategorias listaVentas guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaRoles">listaRoles	^listaRoles</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaRoles:">listaRoles: anObject	listaRoles := anObject</body></methods><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaVentas:</selector></remove-selector><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaPersonas:</selector></remove-selector><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaArticulos:</selector></remove-selector><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaCategorias:</selector></remove-selector><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaRoles:</selector></remove-selector><class><name>ParametroGeneral</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idParametro nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idParametro">idParametro	^idParametro</body></methods><methods><class-id>ParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idParametro:">idParametro: anObject	idParametro := anObject</body></methods><methods><class-id>ParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>ParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>ParametroGeneral</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idParametro := nil.	nombre := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ParametroGeneral class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="autoIncrementoLista:delParametro:">autoIncrementoLista: unaLista delParametro: unBloque	^((unaLista collect: [:x| (unBloque value: x)]) inject: 0 into: [:a :b | a max: b]) + 1.</body></methods><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>autoIncrementIdCategoria</selector></remove-selector><class><name>AdminProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaParametrosGenerales">listaParametrosGenerales	^listaParametrosGenerales</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaParametrosGenerales:">listaParametrosGenerales: anObject	listaParametrosGenerales := anObject</body></methods><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaParametrosGenerales:</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|categoria|	categoria := Categoria new.	categoria idCategoria: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: categoria.	self closeRequest.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreArticulo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><comment><class-id>ParametroGeneral</class-id><body>ParametroGeneral has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idParametro	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idParametro	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombreasd</body></comment><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaParametrosGenerales:">listaParametrosGenerales: anObject	listaParametrosGenerales := anObject</body></methods><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaParametrosGenerales:</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'December 31, 2016' '1:30:43 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 1:30:43 on 31 de diciembre de 2016."</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	listaParametrosGenerales := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	listaParametrosGenerales := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarRol:">agregarRol: unRol	listaRoles add: unRol.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarParametroGeneral:">agregarParametroGeneral: unParametro	listaParametrosGenerales add: unParametro.</body></methods><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #hijosDeLaCategoria: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #nombreConFormatoCategoria: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #buscarVentasPorVendedor: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #buscarArticulosPorCategoria: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #buscarCategoriaPadrePorIdCategoria: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #buscarCategoriaPorId: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #buscarVentasPorCliente: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #buscarArticuloPorId: under: #accessing</do-it><do-it>AdminProyectoFinal organization addCategory: #accessing</do-it><do-it>AdminProyectoFinal classifySymbol: #cargarInformacionDelDisco under: #accessing</do-it><class><name>ModificarParametroGeneral</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarParametroGeneral</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ModificarParametroGeneral</class-id><body>ModificarParametroGeneral has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>ModificarParametroGeneral</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarParametroGeneral organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 43 0 148 0 64 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 21 0 ) 					#label: 'Nombre Parametro' ) ) ) )</body></methods><class><name>SeleccionarParametroGeneral</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarParametroGeneral</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><remove-selector><class-id>SeleccionarParametroGeneral</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarParametroGeneral organization removeCategory: #'initialize-release'</do-it><comment><class-id>SeleccionarParametroGeneral</class-id><body>SeleccionarParametroGeneral has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarParametroGeneral</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategorias) texto: [:x| (admin nombreConFormatoCategoria: x)] valor: [:x| x idCategoria].</body></methods><do-it>SeleccionarParametroGeneral organization addCategory: #accessing</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar categorías'</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar parámetros generales'</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaParametrosGenerales) texto: [:x| x nombre] valor: [:x| x idParametro].</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 43 0 148 0 64 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 21 0 ) 					#label: 'Nombre Parametro' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarCategoriaPorId: id).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarCategoria: id por: item.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarArticulo: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarArticulo: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoría padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre categoría' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 713 307 1033 497 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Nombre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 27 0 146 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 57 0 ) 					#label: 'Apellido' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 80 0 148 0 101 0 ) 					#name: #apellido ) ) ) )</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarArticulo: item.	self closeRequest.</body></methods><do-it>SeleccionarParametroGeneral organization addCategory: #updating</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarParametroGeneral new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarParametroGeneral new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarParametrosGenerales">administrarParametrosGenerales	|ui|	ui := SeleccionarParametroGeneral new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar parámetros generales' ) ) #(4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar parámetros generales' 							#value: #administrarParametrosGenerales ) ) #(4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar parámetros generales' 							#value: #administrarParametrosGenerales ) ) #(4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>AdminProyectoFinalUI</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open</body></methods><methods><class-id>AdminProyectoFinalUI</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	admin agregarGui: self.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarGui:">agregarGui: unGui	listaArticulos add: unGui.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarVentana:">agregarVentana: unaVentana	"listaVentanas add: unaVentana."</body></methods><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>agregarGui:</selector></remove-selector><class><name>AdminProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaVentanas guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaVentanas">listaVentanas	^listaVentanas</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaVentanas:">listaVentanas: anObject	listaVentanas := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>guiMenuPrincipal</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>guiMenuPrincipal</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>AdminProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaVentanas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	(MenuPrincipal new) admin: self; open.</body></methods><remove-selector><class-id>AdminProyectoFinal</class-id> <selector>listaVentanas:</selector></remove-selector><comment><class-id>AdminProyectoFinal</class-id><body>AdmProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdmUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaPersonas	&lt;(List of: Articulo)&gt;	description of listaPersonas	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><comment><class-id>AdminProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;Collection&gt;	description of listaParametrosGenerales	listaPersonas	&lt;(List of: Articulo)&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentanas	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of listaVentanas	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarVentana:">agregarVentana: unaVentana	listaVentanas add: unaVentana.</body></methods><methods><class-id>AdminProyectoFinalUI</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	admin agregarVentana: self.	super open.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	listaVentanas do: [:x| x closeRequest].</body></methods><methods><class-id>MenuPrincipal</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	admin guardarInformacionAlDisco.	admin cerrarTodasLasVentanas.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarVentana:">eliminarVentana: unBloque	listaVentanas removeAllSuchThat: [:a| unBloque value: a].</body></methods><methods><class-id>AdminProyectoFinalUI</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	admin eliminarVentana: [:x| x == self].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	|ui|	ui := MenuPrincipal new.	ui admin: self.	ui open.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarVentana:">agregarVentana: unaVentana	self listaVentanas add: unaVentana.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarVentana:">agregarVentana: unaVentana	listaVentanas add: unaVentana.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	listaParametrosGenerales := List new.	listaVentanas := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	Transcript show: 'perro'.	admin guardarInformacionAlDisco.	admin cerrarTodasLasVentanas.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><class><name>SeleccionarParametroGeneral</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarParametroGeneral</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><remove-selector><class-id>SeleccionarParametroGeneral</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarParametroGeneral organization removeCategory: #'initialize-release'</do-it><comment><class-id>SeleccionarParametroGeneral</class-id><body>SeleccionarParametroGeneral has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarParametroGeneral</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaParametrosGenerales) texto: [:x| x nombre] valor: [:x| x idParametro].</body></methods><do-it>SeleccionarParametroGeneral organization addCategory: #updating</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarPersona new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><class><name>ModificarParametroGeneral</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarParametroGeneral</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><remove-selector><class-id>ModificarParametroGeneral</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarParametroGeneral organization removeCategory: #'initialize-release'</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '1:26:39 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 13:26:39 on 2 de enero de 2017."</do-it><comment><class-id>ModificarParametroGeneral</class-id><body>ModificarParametroGeneral has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 453 351 773 541 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 522 288 842 478 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombreCategoria 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneralPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneralPorId: id).	((item idParametro) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneralPorId: id).	((self widgetAt: #nombr) model) value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneralPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#name: #Label1 					#label: 'Categoria padre' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#name: #Label3 					#label: 'Nombre Categoria' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarParametroGeneral:">agregarParametroGeneral: unParametro	listaParametrosGenerales add: unParametro.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarRol:">agregarRol: unParametro	listaRoles add: unParametro.</body></methods><do-it>SeleccionarParametroGeneral organization addCategory: #accessing</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar parámetros generales'</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '3:03:57 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:03:57 on 2 de enero de 2017."</do-it><class><name>SeleccionarRoles</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarRoles</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>SeleccionarRoles</class-id><body>SeleccionarRoles has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><do-it>SeleccionarRoles organization addCategory: #accessing</do-it><methods><class-id>SeleccionarRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar roles'</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar categoría'</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Modificar parámetro general'</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi claseItem: self.	mi mainWindow label: (self labelString).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	mi mainWindow label: (self labelString).	mi claseItem: self.</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#nameKey: #botonAdministrarPersonas 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#nameKey: #botonMenuArticulos 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar parámetros generales' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#nameKey: #botonMenuCategorias 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) ) #(2 2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#value: #administrarRoles ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar parámetros generales' 							#value: #administrarParametrosGenerales ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) ) #(2 2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '3:37:37 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:37:37 on 2 de enero de 2017."</do-it><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarParametrosGenerales">administrarParametrosGenerales	|ui|	ui := SeleccionarParametroGeneral new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarRoles">administrarRoles	|ui|	ui := SeleccionarRoles new.	ui admin: admin.	ui open.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin listaParametrosGenerales</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaVentas := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaVentas := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	|ui|	ui := ModificarParametroGeneral new.	ui admin: admin.	ui open.	ui id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '3:54:19 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:54:19 on 2 de enero de 2017."</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarParametroGeneral new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := ModificarArticulo new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	|ui|	ui := (self claseModificar) new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="nuevo">nuevo	self abrirVentanaModificacion.	self closeRequest.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="abrirVentanaModificacion">abrirVentanaModificacion	|ui|	ui := (self claseModificar) new.	ui admin: admin.	ui open.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="abrirVentanaModificacion">abrirVentanaModificacion	|ui|	ui := (self claseModificar) new.	ui admin: admin.	ui open.	^ui</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="editar">editar	self abrirVentanaModificacionid: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="editar">editar	(self abrirVentanaModificacion) id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><remove-selector><class-id>SeleccionarArticulos</class-id> <selector>editar</selector></remove-selector><remove-selector><class-id>SeleccionarArticulos</class-id> <selector>nuevo</selector></remove-selector><do-it>SeleccionarArticulos organization removeCategory: #updating</do-it><remove-selector><class-id>SeleccionarCategoria</class-id> <selector>nuevo</selector></remove-selector><remove-selector><class-id>SeleccionarCategoria</class-id> <selector>editar</selector></remove-selector><remove-selector><class-id>SeleccionarParametroGeneral</class-id> <selector>editar</selector></remove-selector><remove-selector><class-id>SeleccionarParametroGeneral</class-id> <selector>nuevo</selector></remove-selector><do-it>SeleccionarParametroGeneral organization removeCategory: #updating</do-it><remove-selector><class-id>SeleccionarPersonas</class-id> <selector>editar</selector></remove-selector><do-it>SeleccionarPersonas organization removeCategory: #updating</do-it><remove-selector><class-id>SeleccionarRoles</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarRoles organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarRoles</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPersonas) texto: [:x| x nombreYApellido] valor: [:x| x idPersona].</body></methods><methods><class-id>SeleccionarRoles</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaRoles) texto: [:x| 'un rol'] valor: [:x| 'y su id'].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '4:31:50 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 16:31:50 on 2 de enero de 2017."</do-it><remove-selector><class-id>SeleccionarItem</class-id> <selector>editar</selector></remove-selector><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="editar">editar	(self abrirVentanaModificacion) id: ((self widgetAt: #idItem) selection key asNumber).	self closeRequest.</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarArticulo</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarArticulo</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarArticulo</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarArticulo</body></methods><methods><class-id>SeleccionarRoles</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarArticulo</body></methods><remove-selector><class-id>SeleccionarRoles</class-id> <selector>claseModificar</selector></remove-selector><methods><class-id>SeleccionarPersonas</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarPersona</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarParametroGeneral</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarCategoria</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><class><name>VentanaConfirmar</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>texto </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="texto">texto	^texto</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="texto:">texto: anObject	texto := anObject</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	texto := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><remove-selector><class-id>VentanaConfirmar</class-id> <selector>initialize</selector></remove-selector><do-it>VentanaConfirmar organization removeCategory: #'initialize-release'</do-it><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #editar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>VentanaConfirmar class organization addCategory: #'interface specs'</do-it><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #editar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #'Confirmar petición' 			#bounds: #(#{Graphics.Rectangle} 714 399 1060 530 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 208 0 106 0 271 0 127 0 ) 					#model: #nuevo 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 279 0 106 0 344 0 127 0 ) 					#model: #editar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.4 0.5 0.5 ) 					#label: 'asd' ) ) ) )</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #'Confirmar petición' 			#bounds: #(#{Graphics.Rectangle} 714 399 1060 530 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 208 0 106 0 271 0 127 0 ) 					#model: #nuevo 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 279 0 106 0 344 0 127 0 ) 					#model: #editar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.4 0.5 0.5 ) 					#label: #texto ) ) ) )</body></methods><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of textoasd</body></comment><do-it>VentanaConfirmar organization addCategory: #'private accessing'</do-it><methods><class-id>VentanaConfirmar</class-id> <category>private accessing</category><body package="ProyectoFinal" selector="new">new	super new.</body></methods><do-it>VentanaConfirmar new.</do-it><do-it>VentanaConfirmar new.</do-it><remove-selector><class-id>VentanaConfirmar</class-id> <selector>new</selector></remove-selector><do-it>VentanaConfirmar organization removeCategory: #'private accessing'</do-it><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="esperarPeticion:">esperarPeticion: unTexto	|obj|	obj := self new.	obj texto: unTexto.	[obj estaRespondido] whileFalse: [].	^obj respuesta</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:">esperarPeticion: unTexto	|obj|	obj := self new.	obj texto: unTexto.	[obj estaRespondido] whileFalse: [].	^obj respuesta</body></methods><remove-selector><class-id>VentanaConfirmar</class-id> <selector>esperarPeticion:</selector></remove-selector><class><name>VentanaConfirmar</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>texto estaRespondido respuesta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	estaRespondido := true.	respuesta := true.</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cancelar">cancelar	estaRespondido := true.	respuesta := false.</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cancelar">cancelar	estaRespondido := true.	self closeRequest.</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	estaRespondido := true.	respuesta := true.	self closeRequest.</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="estaRespondido">estaRespondido	^estaRespondido</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="estaRespondido:">estaRespondido: anObject	estaRespondido := anObject</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="respuesta">respuesta	^respuesta</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="respuesta:">respuesta: anObject	respuesta := anObject</body></methods><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	estaRespondido	&lt;Boolean&gt;	description of estaRespondido	respuesta	&lt;Boolean&gt;	description of respuesta	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of textoasd</body></comment><remove-selector><class-id>VentanaConfirmar</class-id> <selector>respuesta:</selector></remove-selector><remove-selector><class-id>VentanaConfirmar</class-id> <selector>estaRespondido:</selector></remove-selector><do-it>VentanaConfirmar organization addCategory: #'initialize-release'</do-it><methods><class-id>VentanaConfirmar</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	texto := ''.	estaRespondido  := false.	respuesta := false.	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '5:46:28 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 17:46:28 on 2 de enero de 2017."</do-it><do-it>AdminProyectoFinal new.</do-it><do-it>VentanaConfirmar new.</do-it><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:">esperarPeticion: unTexto	|obj|	obj := self new.	obj texto: unTexto.	obj open.	[obj estaRespondido] whileFalse: [].	^obj respuesta</body></methods><do-it>VentanaConfirmar new.</do-it><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Confirmar petición' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 208 0 106 0 271 0 127 0 ) 					#model: #nuevo 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 279 0 106 0 344 0 127 0 ) 					#model: #editar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.4 0.5 0.5 ) 					#label: #texto ) ) ) )</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:">esperarPeticion: unTexto yRealizar: unBloque	|obj|	obj := self new.	obj texto: unTexto.	[obj estaRespondido] whileFalse: [].	^obj respuesta</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:">esperarPeticion: unTexto yRealizar: unBloque	|obj|	obj := self new.	obj texto: unTexto.</body></methods><remove-selector><class-id>VentanaConfirmar</class-id> <selector>estaRespondido</selector></remove-selector><remove-selector><class-id>VentanaConfirmar</class-id> <selector>respuesta</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>estaRespondido</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>estaRespondido</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>respuesta</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>respuesta</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>VentanaConfirmar</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>texto bloqueAceptar bloqueCancelar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	estaRespondido	&lt;Boolean&gt;	description of estaRespondido	respuesta	&lt;Boolean&gt;	description of respuesta	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of textoasd</body></comment><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	estaRespondido	&lt;Boolean&gt;	description of estaRespondido	respuesta	&lt;Boolean&gt;	description of respuesta	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of textoasd</body></comment><remove-selector><class-id>VentanaConfirmar class</class-id> <selector>esperarPeticion:</selector></remove-selector><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cancelar">cancelar	bloqueCancelar value.	self closeRequest.</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	bloqueAceptar value.	self closeRequest.</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="bloqueAceptar">bloqueAceptar	^bloqueAceptar</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="bloqueAceptar:">bloqueAceptar: anObject	bloqueAceptar := anObject</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="bloqueCancelar">bloqueCancelar	^bloqueCancelar</body></methods><methods><class-id>VentanaConfirmar</class-id> <category>accessing</category><body package="ProyectoFinal" selector="bloqueCancelar:">bloqueCancelar: anObject	bloqueCancelar := anObject</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:">esperarPeticion: unTexto yRealizar: unBloque	|obj|	obj := self new.	obj bloqueAceptar: unBloque.	obj open.	obj texto: unTexto.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:">esperarPeticion: unTexto yRealizar: unBloque	|obj|	obj := self new.	obj bloqueAceptar: unBloque.	obj texto: unTexto.	obj open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	|obj|	obj := self new.	obj bloqueAceptar: unBloque.	obj bloqueCancelar: unBloque	obj texto: unTexto.	obj open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	|obj|	obj := self new.	obj bloqueAceptar: unBloque.	obj bloqueCancelar: unBloque.	obj texto: unTexto.	obj open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	|obj|	obj := self new.	obj bloqueAceptar: unBloque.	obj bloqueCancelar: otroBloque.	obj texto: unTexto.	obj open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Confirmar petición' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 208 0 106 0 271 0 127 0 ) 					#model: #nuevo 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 279 0 106 0 344 0 127 0 ) 					#model: #editar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.4 0.5 0.5 ) 					#label: #texto ) ) ) )</body></methods><do-it>VentanaConfirmar esperarPeticion: '¿Sos diego?' yRealizar: [Transcript show: 'si'] oSino: [Transcript show: 'no'].</do-it><methods><class-id>VentanaConfirmar</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	bloqueAceptar := [].	bloqueCancelar := [].	^self</body></methods><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	bloqueAceptar	&lt;BlockClosure&gt;	description of bloqueAceptar	bloqueCancelar	&lt;BlockClosure&gt;	description of bloqueCancelar	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of texto</body></comment><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	bloqueAceptar	&lt;BlockClosure&gt;	description of bloqueAceptar	bloqueCancelar	&lt;BlockClosure&gt;	description of bloqueCancelar	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of texto</body></comment><comment><class-id>VentanaConfirmar</class-id><body>VentanaConfirmar has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	bloqueAceptar	&lt;BlockClosure&gt;	description of bloqueAceptar	bloqueCancelar	&lt;BlockClosure&gt;	description of bloqueCancelar	texto	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of textoasd</body></comment><do-it>VentanaConfirmar esperarPeticion: '¿Sos diego?' yRealizar: [Transcript show: 'si'] oSino: [Transcript show: 'no'].</do-it><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Confirmar petición' 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 208 0 106 0 271 0 127 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 279 0 106 0 344 0 127 0 ) 					#model: #cancelar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.4 0.5 0.5 ) 					#label: #texto ) ) ) )</body></methods><do-it>VentanaConfirmar esperarPeticion: '¿Sos diego?' yRealizar: [Transcript show: 'si'] oSino: [Transcript show: 'no'].</do-it><do-it>VentanaConfirmar esperarPeticion: '¿Sos diego?' yRealizar: [Transcript show: 'si'] oSino: [Transcript show: 'no'].</do-it><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="peticionEliminar">peticionEliminar	VentanaConfirmar esperarPeticion: '¿Sos diego?'	yRealizar: [	]	oSino: [	].</body></methods><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="peticionEliminar">peticionEliminar	VentanaConfirmar esperarPeticion: '¿Sos diego?'	yRealizar: [		self eliminar.	].</body></methods><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="peticionEliminar">peticionEliminar	VentanaConfirmar esperarPeticion: '¿Sos diego?' yRealizar: [self eliminar].</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	listaCategorias removeAllSuchThat: [:x| unId = (x idCategoria)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarArticulo:">eliminarArticulo: unId	listaArticulos removeAllSuchThat: [:x| unId = (x idArticulo)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarPersona:">eliminarPersona: unId	listaPersonas removeAllSuchThat: [:x| unId = (x idPersona)].</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarCategoria: 30.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|categoria|	categoria := (admin buscarCategoriaPorId: id).	categoria idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	categoria nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarCategoria: id por: categoria.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametroGeneralPorId:">buscarParametroGeneralPorId: unId	^(listaParametrosGenerales detect: [:e| (e idParametro) = unId ] ifNone:[]).</body></methods><do-it>SeleccionarParametroGeneral organization addCategory: #updating</do-it><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarCategoria: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneral: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarParametroGeneral:">eliminarParametroGeneral: unId	listaParametrosGenerales removeAllSuchThat: [:x| unId = (x idPersona)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarParametroGeneral:">eliminarParametroGeneral: unId	listaParametrosGenerales removeAllSuchThat: [:x| unId = (x idParametro)].</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString 			#bounds: #(#{Graphics.Rectangle} 749 345 1095 476 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #eliminarPeticion 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 106 0 134 0 127 0 ) 					#name: #botonEditar 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="peticionEliminar">peticionEliminar	VentanaConfirmar esperarPeticion: '¿Está seguro que desea eliminar el elemento?' yRealizar: [self eliminar].</body></methods><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString 			#bounds: #(#{Graphics.Rectangle} 815 361 1161 492 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 70 0 106 0 135 0 127 0 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>SeleccionarItem organization addCategory: #aa</do-it><methods><class-id>SeleccionarItem</class-id> <category>aa</category><body package="ProyectoFinal" selector="a">a	Transcript show: 'a'.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>aa</category><body package="ProyectoFinal" selector="b">b	Transcript show: 'b'.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>aa</category><body package="ProyectoFinal" selector="c">c	Transcript show: 'c'.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>aa</category><body package="ProyectoFinal" selector="d">d	Transcript show: 'd'.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>aa</category><body package="ProyectoFinal" selector="e">e	Transcript show: 'e'.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>aa</category><body package="ProyectoFinal" selector="f">f	Transcript show: 'f'.</body></methods><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString 			#bounds: #(#{Graphics.Rectangle} 853 382 1199 513 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #d 						#focusOutSelector: #f 						#valueChangeSelector: #e 						#requestFocusInSelector: #a 						#requestFocusOutSelector: #c 						#requestValueChangeSelector: #b ) 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 70 0 106 0 135 0 127 0 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #a ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 70 0 106 0 135 0 127 0 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><remove-selector><class-id>SeleccionarItem</class-id> <selector>a</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>b</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>c</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>d</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>e</selector></remove-selector><remove-selector><class-id>SeleccionarItem</class-id> <selector>f</selector></remove-selector><do-it>SeleccionarItem organization removeCategory: #aa</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #labelString 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 3 0 344 0 101 0 ) 					#name: #idItem 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 106 0 66 0 127 0 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 70 0 106 0 135 0 127 0 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 106 0 199 0 127 0 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonEliminar) isVisible: (self class canUnderstand: #nuevo).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonEliminar) isEnabled: true.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonEliminar) isEnabled: true.	(self widgetAt: #botonEditar) isEnabled: true.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	"	(self widgetAt: #botonNuevo) isVisible: (self class canUnderstand: #nuevo).	(self widgetAt: #botonEditar) isVisible: (self class canUnderstand: #editar).	(self widgetAt: #botonEliminar) isVisible: (self class canUnderstand: #eliminar).	"</body></methods><do-it>SeleccionarPersonas organization addCategory: #updating</do-it><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneral: ((self widgetAt: #idItem) selection key asNumber).</body></methods><do-it>SeleccionarRoles organization addCategory: #updating</do-it><methods><class-id>SeleccionarRoles</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneral: ((self widgetAt: #idItem) selection key asNumber).</body></methods><do-it>SeleccionarArticulos organization addCategory: #updating</do-it><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneral: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneral: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar</body></methods><methods><class-id>SeleccionarArticulos</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarArticulo: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarPersonas</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPersona: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>SeleccionarRoles</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarRoles: ((self widgetAt: #idItem) selection key asNumber).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarRol:">eliminarRol: unId	listaPersonas removeAllSuchThat: [:x| unId = (x idPersona)].</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	SeleccionarItem new.	self closeRequest.</body></methods><class><name>ModificarItem</name><environment>Smalltalk</environment><super>AdminProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id claseItem claseSeleccionar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	(self claseSeleccionar) new.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticulos</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticulos</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticulos</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticulos</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticulos</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarCategoria</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarParametroGeneral</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarPersonas</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^'SeleccionarVenta'</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	(claseItem claseSeleccionar) new.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	(claseItem claseSeleccionar) new open.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	((claseItem claseSeleccionar) new) admin: admin; open.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '10:12:35 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 22:12:35 on 2 de enero de 2017."</do-it><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	(claseItem claseSeleccionar) new admin: admin; open.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	|ui|	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	ui := (claseItem claseSeleccionar) new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	|ui|	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: admin.	ui open.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	|ui|	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 296 0 259 0 317 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 295 0 316 0 316 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 296 0 259 0 317 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 295 0 316 0 316 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 296 0 259 0 317 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 280 0 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 295 0 316 0 316 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '11:33:05 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:33:05 on 2 de enero de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '11:57:28 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:57:28 on 2 de enero de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 2, 2017' '11:58:06 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:58:06 on 2 de enero de 2017."</do-it><do-it>AdminProyectoFinal new.</do-it><do-it>AdminProyectoFinal new.</do-it><class><name>ParametroGeneralArticulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idParametro </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>ParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><methods><class-id>ParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idParametro">idParametro	^idParametro</body></methods><methods><class-id>ParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idParametro:">idParametro: anObject	idParametro := anObject</body></methods><methods><class-id>ParametroGeneralArticulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	idParametro := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ParametroGeneralArticulo class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>ParametroGeneralArticulo</class-id><body>ParametroGeneralArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idParametro	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idParametroasd</body></comment><class><name>AdminProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarParametroGeneralArticulo:">agregarParametroGeneralArticulo: unElemento	listaParametrosGeneralesArticulos add: unElemento.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametroGeneral:delArticulo:">buscarParametroGeneral: unIdParametro delArticulo: unIdArticulo	^(listaParametrosGenerales detect: [:e| ((e idParametro) = unIdParametro) and: ((e idArticulo) = unIdArticulo) ] ifNone:[]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	^(listaArticulos select: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	^(listaArticulos do: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	^(listaArticulos removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ]).</body></methods><class><name>ModificarAdministrador</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarAdministrador</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ModificarCliente</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarCliente</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ModificarVendedor</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarVendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ModificarAdministrador</class-id><body>ModificarAdministrador has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ModificarCliente</class-id><body>ModificarCliente has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ModificarVendedor</class-id><body>ModificarVendedor has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>ModificarVendedor</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarVendedor organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>ModificarCliente</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarCliente organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>ModificarAdministrador</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarAdministrador organization removeCategory: #'initialize-release'</do-it><do-it>ModificarAdministrador class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarAdministrador class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><do-it>ModificarCliente class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarCliente class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><do-it>ModificarVendedor class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarVendedor class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar administradores' 										#value: #administrarAdministradores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar vendedores' 										#value: #administrarVendedores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar clientes' 										#value: #administrarClientes ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar parámetros generales' 							#value: #administrarParametrosGenerales ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar categorías' 							#value: #administrarCategorias 							#shortcutKeyCharacter: #F3 							#shortcutModifiers: 0 ) ) #(2 2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>SeleccionarRoles renameTo: #SeleccionarAdministrador</do-it><comment><class-id>SeleccionarAdministrador</class-id><body>SeleccionarRoles has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarRoles">administrarRoles	|ui|	ui := SeleccionarAdministrador new.	ui admin: admin.	ui open.</body></methods><class><name>SeleccionarCliente</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarCliente</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>SeleccionarVendedor</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarVendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>SeleccionarCliente</class-id><body>SeleccionarCliente has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>SeleccionarVendedor</class-id><body>SeleccionarVendedor has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.sd</body></comment><class><name>SeleccionarVenta</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>SeleccionarVenta</class-id><body>SeleccionarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarVendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarVendedor</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarVenta</body></methods><methods><class-id>ModificarCliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarCliente</body></methods><methods><class-id>ModificarAdministrador</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarAdministrador</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 823 327 1143 517 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 27 0 147 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 57 0 ) 					#label: 'Apellido' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 75 0 149 0 97 0 ) 					#name: #apellido ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 103 0 ) 					#label: 'Sexo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 122 0 146 0 144 0 ) 					#name: #sexo 					#label: 'Seleccione sexo' 					#menu: #femeninoMasculino ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="femeninoMasculino">femeninoMasculino	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><remove-selector><class-id>ModificarPersona class</class-id> <selector>productoServicio</selector></remove-selector><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona class</class-id> <category>resources</category><body package="ProyectoFinal" selector="femeninoMasculino">femeninoMasculino	"Tools.MenuEditor new openOnClass: self andSelector: #femeninoMasculino"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Femenino' 				#value: #femenino ) 			#(#{UI.MenuItem} 				#rawLabel: 'Masculino' 				#value: #Masculino ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarPersona class</class-id> <category>resources</category><body package="ProyectoFinal" selector="femeninoMasculino">femeninoMasculino	"Tools.MenuEditor new openOnClass: self andSelector: #femeninoMasculino"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Femenino' 				#value: #femenino ) 			#(#{UI.MenuItem} 				#rawLabel: 'Masculino' 				#value: #masculino ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrirInterfaz:">abrirInterfaz: unaInterfaz	|ui|	ui := unaInterfaz new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarArticulos">administrarArticulos	self abrirInterfaz: SeleccionarArticulos.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarCategorias">administrarCategorias	self abrirInterfaz: SeleccionarCategoria.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarParametrosGenerales">administrarParametrosGenerales	self abrirInterfaz: SeleccionarParametroGeneral.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPersonas">administrarPersonas	self abrirInterfaz: SeleccionarPersonas.</body></methods><do-it>SeleccionarPersonas renameTo: #SeleccionarPersona</do-it><comment><class-id>SeleccionarPersona</class-id><body>SeleccionarPersonas has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPersonas">administrarPersonas	self abrirInterfaz: SeleccionarPersona.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarPersona</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarAdministradores">administrarAdministradores	self abrirInterfaz: SeleccionarAdministrador.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarClientes">administrarClientes	self abrirInterfaz: SeleccionarCliente.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarVendedores">administrarVendedores	self abrirInterfaz: SeleccionarVendedor.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarVentas">administrarVentas	self abrirInterfaz: SeleccionarVenta.</body></methods><do-it>SeleccionarArticulos renameTo: #SeleccionarArticulo</do-it><comment><class-id>SeleccionarArticulo</class-id><body>SeleccionarArticulos has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticulo</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarArticulos">administrarArticulos	self abrirInterfaz: SeleccionarArticulo.</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>AdminProyectoFinal new.</do-it><do-it>AdminProyectoFinal new.</do-it><comment><class-id>AdminProyectoFinal</class-id><body>AdmProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdmUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaPersonas	&lt;(List of: Articulo)&gt;	description of listaPersonas	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><comment><class-id>AdminProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><do-it>AdminProyectoFinal new.</do-it><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item nombre: (((self widgetAt: #nombreCategoria) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	admin agregarPersona: item.	self closeRequest.</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := '(admin buscarPersonaPorId: id)'.	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarPersonaPorId:">buscarPersonaPorId: unId	^(listaPersonas detect: [:e| (e idPersona) = unId ] ifNone: []).</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((item idPersona) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	((self widgetAt: #nombreCategoria) model) value: (item nombre).</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).</body></methods><do-it>AdminProyectoFinal new.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarCategoriaPorId: id).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarCategoria: id por: item.</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>AdminProyectoFinal new.</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>SeleccionarCliente organization addCategory: #updating</do-it><methods><class-id>SeleccionarCliente</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPersona: ((self widgetAt: #idItem) selection key asNumber).</body></methods><do-it>AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	admin agregarPersona: item.	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarPersona:por:">modificarPersona: unIdPersona por: unaPersona	listaPersonas:= (listaPersonas collect: [:p|		((p idPersona) = unIdPersona)			ifTrue: [unaPersona]			ifFalse: [p].	]).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idCategoria]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: item.	self closeRequest.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarParametroGeneral:por:">modificarParametroGeneral: unIdParametro por: unParametro	listaParametrosGenerales:= (listaParametrosGenerales collect: [:p|		((p idParametro) = unIdParametro)			ifTrue: [unParametro]			ifFalse: [p].	]).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	Transcript show: ((self widgetAt: #categoriaPadre) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	Transcript show: ((self widgetAt: #tipo) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	Transcript show: ((self widgetAt: #tipoArticulo) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	Transcript show: ((self widgetAt: #tipoArticulo) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	Transcript show: ((self widgetAt: #tipoArticulo) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	Transcript show: ((self widgetAt: #tipoArticulo) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><do-it>ventana := ModificarArticulo new.</do-it><do-it>boton := ventana widgetAt: #tipoArticulo.</do-it><do-it>boton currentChoice.</do-it><do-it>boton currentChoice.</do-it><do-it>boton currentChoice.</do-it><methods><class-id>SeleccionarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre,		((x tipo) = (Articulo Servicio))	] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre,		((x tipo) = (Articulo servicio))	] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre, ' (' ,		((x tipo) = (Articulo servicio))		ifTrue: ['servicio']	] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre, ' (' ,		((x tipo) = (Articulo servicio))		ifTrue: ['servicio']		ifFalse: ['producto']	] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| x nombre, ' (' ,		(((x tipo) = (Articulo servicio))		ifTrue: ['servicio']		ifFalse: ['producto']), ')'	] valor: [:x| x idArticulo].</body></methods><methods><class-id>SeleccionarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaArticulos) texto: [:x| (x nombre, ' (' ,		(((x tipo) = (Articulo servicio))		ifTrue: ['servicio']		ifFalse: ['producto']), ')')	] valor: [:x| x idArticulo].</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((((self widgetAt: #tipoArticulo) currentChoice) = #servicio) ifTrue: [Articulo servicio] ifFalse: [Articulo producto]).	Transcript show: ((self widgetAt: #tipoArticulo) selection key asString).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((((self widgetAt: #tipoArticulo) currentChoice) = #servicio) ifTrue: [Articulo servicio] ifFalse: [Articulo producto]).	admin agregarCategoria: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((((self widgetAt: #tipoArticulo) currentChoice) = #servicio) ifTrue: [Articulo servicio] ifFalse: [Articulo producto]).	admin agregarArticulo: item.	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><do-it>admin buscarArticulosPorCategoria: 2.</do-it><do-it>resultado := admin buscarArticulosPorCategoria: 2.</do-it><do-it>resultado := admin buscarArticulosPorCategoria: 1.</do-it><do-it>resultado := admin buscarArticulosPorCategoria: 0.</do-it><do-it>resultado := admin buscarArticulosPorCategoria: 1.</do-it><do-it>resultado := admin buscarArticulosPorCategoria: 2.</do-it><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ 0) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><do-it>resultado := admin buscarArticulosPorCategoria: 3.</do-it><do-it>resultado := admin buscarArticulosPorCategoria: 3.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarArticuloPorId: id).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((((self widgetAt: #tipoArticulo) currentChoice) = #servicio) ifTrue: [Articulo servicio] ifFalse: [Articulo producto]).	admin modificarArticulo: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto 				#indication: true ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 654 287 974 507 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#helpText: '' 					#label: 'Seleccionar...' 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipoArticulo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><do-it>(ui widgetAt: #tipoArticulo) menu: (ModificarArticulo productoServicio) default: #producto.</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: (ValueHolder with: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: (ValueHolder with: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: (ValueHolder new setValue: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: (ValueHolder new setValue: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: (ValueHolder new setValue: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: #servicio.</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: #servicio.</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) menuHolder: #servicio.</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) model: #servicio.</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) model: (ValueHolder with: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) model: (ValueHolder with: #producto).</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) model: (ValueHolder with: #producto).</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>(ui widgetAt: #tipoArticulo) model: (ValueHolder with: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><do-it>ui := ModificarArticulo new.</do-it><do-it>(ui widgetAt: #tipoArticulo) model: (ValueHolder with: #servicio).</do-it><do-it>(ui widgetAt: #tipoArticulo) resetCurrent.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #tipoArticulo) model: (ValueHolder with: (item tipo)).	(self  widgetAt: #tipoArticulo) resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #tipoArticulo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	(self widgetAt: #tipoArticulo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 27 0 147 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 57 0 ) 					#label: 'Apellido' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 75 0 149 0 97 0 ) 					#name: #apellido ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 103 0 ) 					#label: 'Sexo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 122 0 146 0 144 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) ) ) )</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	admin agregarArticulo: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarArticuloPorId: id).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin modificarArticulo: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) ) ) )</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoria) updateModel).	(self widgetAt: #tipoArticulo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoria) updateModel).	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	((item idCategoria) == nil) ifFalse: [((self widgetAt: #categoria) setSelectionIndex: (item idCategoria))].	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 681 332 1001 522 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 27 0 147 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 153 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 153 0 26 0 298 0 47 0 ) 					#name: #apellido ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 103 0 ) 					#label: 'Sexo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 121 0 151 0 142 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 74 0 150 0 97 0 ) 					#name: #InputField1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 55 0 ) 					#label: 'DNI' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 162 0 58 0 183 0 ) 					#name: #SpinButton1 					#type: #number ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 162 0 123 0 183 0 ) 					#name: #SpinButton2 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 162 0 185 0 183 0 ) 					#name: #SpinButton3 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 741 318 1061 508 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 27 0 147 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 153 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 153 0 26 0 298 0 47 0 ) 					#name: #apellido ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 103 0 ) 					#label: 'Sexo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 121 0 151 0 142 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 74 0 150 0 97 0 ) 					#name: #InputField1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 55 0 ) 					#label: 'DNI' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 162 0 58 0 183 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 69 0 162 0 123 0 183 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 139 0 162 0 185 0 183 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 699 371 1019 561 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 156 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 155 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 27 0 147 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 155 0 27 0 300 0 48 0 ) 					#name: #apellido ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 134 0 103 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 83 0 150 0 104 0 ) 					#name: #InputField1 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 113 0 315 0 167 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 183 0 137 0 237 0 158 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 137 0 294 0 158 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 137 0 175 0 158 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 155 0 81 0 298 0 102 0 ) 					#name: #direccion ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 791 322 1111 522 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 175 0 259 0 196 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 174 0 316 0 195 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 160 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 113 0 315 0 167 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 9 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 27 0 151 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 134 0 103 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #InputField1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 183 0 137 0 237 0 158 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 137 0 294 0 158 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 137 0 175 0 158 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 113 0 315 0 167 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 9 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 27 0 151 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #InputField1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 183 0 137 0 237 0 158 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 137 0 294 0 158 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 137 0 175 0 158 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) ) ) )</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 113 0 315 0 167 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 9 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 27 0 151 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 183 0 137 0 237 0 158 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 137 0 294 0 158 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 137 0 175 0 158 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) ) ) )</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dni) model) value: (item fechaNacimiento).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento day).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><do-it>fecha := Date new.</do-it><do-it>fecha day.</do-it><do-it>fecha day.</do-it><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 635 302 955 492 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 109 0 312 0 178 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 9 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 27 0 151 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 184 0 149 0 238 0 170 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 149 0 294 0 170 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 149 0 175 0 170 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 119 0 132 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 184 0 132 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 248 0 132 0 ) 					#label: 'Año' ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 109 0 312 0 178 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 9 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 27 0 151 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 184 0 149 0 238 0 170 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 149 0 294 0 170 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 149 0 175 0 170 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 120 0 132 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 184 0 132 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 248 0 132 0 ) 					#label: 'Año' ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 697 293 1017 483 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 111 0 113 0 312 0 182 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 120 0 136 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 184 0 136 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 248 0 136 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 120 0 153 0 175 0 174 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 184 0 153 0 238 0 174 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 248 0 153 0 294 0 174 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 732 309 1052 609 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 207 0 232 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 79 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 143 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 79 0 203 0 133 0 224 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 143 0 203 0 189 0 224 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 207 0 232 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 79 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 143 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 79 0 203 0 133 0 224 0 ) 					#name: #mes 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 143 0 203 0 189 0 224 0 ) 					#name: #anio 					#type: #number 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 744 288 1064 568 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 679 256 999 556 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 273 0 230 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 79 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 143 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 79 0 203 0 133 0 224 0 ) 					#name: #mes 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 12 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 143 0 203 0 189 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 731 244 1051 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 79 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 79 0 203 0 171 0 224 0 ) 					#name: #mes 					#helpText: '1' 					#menu: #meses 					#type: #number 					#interval: 0 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 671 287 991 587 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 79 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 79 0 203 0 171 0 224 0 ) 					#name: #mes 					#helpText: '1' 					#menu: #meses 					#type: #number 					#interval: 0 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>resources</category><body package="ProyectoFinal" selector="meses">meses	"Tools.MenuEditor new openOnClass: self andSelector: #femeninoMasculino"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Femenino' 				#value: #femenino ) 			#(#{UI.MenuItem} 				#rawLabel: 'Masculino' 				#value: #masculino ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarPersona class</class-id> <category>resources</category><body package="ProyectoFinal" selector="meses">meses	"Tools.MenuEditor new openOnClass: self andSelector: #meses"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Enero' 				#value: 1 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Febrero' 				#value: 2 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Marzo' 				#value: 3 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Abril' 				#value: 4 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Mayo' 				#value: 5 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Junio' 				#value: 6 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Julio' 				#value: 7 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Agosto' 				#value: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Septiembre' 				#value: 9 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Octubre' 				#value: 10 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Noviembre' 				#value: 11 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Diciembre' 				#value: 12 ) ) #(12 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 79 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 79 0 203 0 171 0 224 0 ) 					#name: #mes 					#helpText: '1' 					#menu: #meses 					#type: #number 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 626 293 946 593 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#menu: #meses ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#name: #mes 					#menu: #meses ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 7, 2017' '11:23:01 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:23:01 on 7 de enero de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 7, 2017' '11:23:06 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:23:06 on 7 de enero de 2017."</do-it><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento day).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento day).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	(self widgetAt: #anio) model: (ValueHolder with: (item fechaNacimiento year)); resetCurrent.	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento day).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date)	"	((self widgetAt: #sexo) currentChoice).	"	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newWithDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #year) model value) asNumber))	"	((self widgetAt: #sexo) currentChoice).	"	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newWithDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #year) model value) asNumber)).	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #year) model value) asNumber)).	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #year) model value) asNumber)).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #apellido) model value) asNumber).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #year) model value) asNumber)).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #apellido) model value) asNumber).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #year) model value) asNumber)).	admin modificarPersona: id por: item.	self closeRequest.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #apellido) model value) asNumber).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #apellido) model value) asNumber).	item direccion: ((self widgetAt: #direccion) currentChoice).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #apellido) model value) asNumber).	item direccion: (((self widgetAt: #direccion) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #dni) model value) asNumber).	item direccion: (((self widgetAt: #direccion) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin agregarPersona: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #dni) model value) asNumber).	item direccion: (((self widgetAt: #direccion) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin modificarPersona: id por: item.	self closeRequest.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#name: #mes 					#menu: #meses ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento monthDay).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	((self widgetAt: #direccion) model) value: (item direccion).	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	((self widgetAt: #anio) model) value: 1980.</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	((self widgetAt: #anio) model) value: 1980.</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	((self widgetAt: #mes) model) value: 1980.	((self widgetAt: #anio) model) value: 1980.</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #sexo) model: (ValueHolder with: 1); resetCurrent.	((self widgetAt: #anio) model) value: 1980.</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	((self widgetAt: #dia) model) value: 1.	(self widgetAt: #mes) model: (ValueHolder with: 1); resetCurrent.	((self widgetAt: #anio) model) value: 1980.</body></methods><methods><class-id>ModificarPersona</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #sexo) model: (ValueHolder with: #femenino); resetCurrent.	((self widgetAt: #dia) model) value: 1.	(self widgetAt: #mes) model: (ValueHolder with: 1); resetCurrent.	((self widgetAt: #anio) model) value: 1980.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	|ui|	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	super closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	|ui|	ui := self class new.	ui admin: admin.	ui open.</body></methods><methods><class-id>SeleccionarAdministrador</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarRoles: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarArticulo</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarArticulo: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarCategoria: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarCliente</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPersona: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarParametroGeneral</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneral: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarPersona</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPersona: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	|ui|	ui := self class new.	ui admin: admin.	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	|ui|	self closeRequest.	ui := self class new.	ui admin: admin.	ui open.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	|ui|	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	claseItem closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	super closeRequest.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarArticuloPorId: id).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin modificarArticulo: id por: item.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]).	item idCategoria: ((self widgetAt: #categoria) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]).	item idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #dni) model value) asNumber).	item direccion: (((self widgetAt: #direccion) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin modificarPersona: id por: item.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #dni) model value) asNumber).	item direccion: (((self widgetAt: #direccion) model value) asString).	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin agregarPersona: item.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [claseItem agregar]	ifFalse: [claseItem actualizar].	self closeRequest.</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar administradores' 										#value: #administrarAdministradores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar vendedores' 										#value: #administrarVendedores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar clientes' 										#value: #administrarClientes ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos (productos/servicios)' 							#value: #administrarArticulos 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias 										#shortcutKeyCharacter: #F3 										#shortcutModifiers: 0 ) ) #(2 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar administradores' 										#value: #administrarAdministradores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar vendedores' 										#value: #administrarVendedores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar clientes' 										#value: #administrarClientes ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias 										#shortcutKeyCharacter: #F3 										#shortcutModifiers: 0 ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas 							#shortcutKeyCharacter: #F1 							#shortcutModifiers: 0 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar administradores' 										#value: #administrarAdministradores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar vendedores' 										#value: #administrarVendedores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar clientes' 										#value: #administrarClientes ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#shortcutKeyCharacter: #F2 							#shortcutModifiers: 0 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias 										#shortcutKeyCharacter: #F3 										#shortcutModifiers: 0 ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar administradores' 										#value: #administrarAdministradores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar vendedores' 										#value: #administrarVendedores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar clientes' 										#value: #administrarClientes ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar administradores' 										#value: #administrarAdministradores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar vendedores' 										#value: #administrarVendedores ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar clientes' 										#value: #administrarClientes ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 748 265 1068 565 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#name: #mes 					#menu: #meses ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&lt;new item&gt;' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;Ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	((self widgetAt: #categoriaPadre) updateModel).</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 9, 2017' '3:07:40 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:07:40 on 9 de enero de 2017."</do-it><do-it>ui widgetAt: #idCategoriaPadre.</do-it><do-it>ui := ModificarCategoria new.</do-it><do-it>ui widgetAt: #idCategoriaPadre.</do-it><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 314 0 118 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><do-it>ui := ModificarCategoria new.</do-it><do-it>cat := (ui widgetAt: #categoriaPadre).</do-it><do-it>cat := (ui widgetAt: #categoriaPadre).</do-it><do-it>cat := (ui widgetAt: #categoriaPadre).</do-it><do-it>cat sequence.</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat sequence.</do-it><do-it>cat := (ui widgetAt: #categoriaPadre).</do-it><do-it>cat sequence.</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat updateModel.</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'dassd').</do-it><do-it>cat sequence removeAllSuchThat: [:x| (x key) = 'asd'].</do-it><do-it>cat updateModel.</do-it><do-it>cat sequence removeAllSuchThat: [:x| (x key) = 'dassd'].</do-it><do-it>cat updateModel.</do-it><do-it>cat updateModel.</do-it><do-it>cat sequence removeAllSuchThat: [:x| (x key) = 'dassd'].</do-it><do-it>cat updateModel.</do-it><do-it>cat updateModel.</do-it><do-it>cat sequence removeAllSuchThat: [:x| (x key) = #aa].</do-it><do-it>cat updateModel.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) setSelectionIndex: (item idCategoriaPadre))].	((self widgetAt: #categoriaPadre) removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat sequence add: (#aa &gt;&gt; 'asdad').</do-it><do-it>cat setSelectionIndex: 3.</do-it><do-it>cat updateModel.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	((item idCategoriaPadre) == nil) ifFalse: [((self widgetAt: #categoriaPadre) sequence: (item idCategoriaPadre))].	((self widgetAt: #categoriaPadre) removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	"	cat setSelectionIndex: 3.	cat updateModel.	"	((self widgetAt: #categoriaPadre) removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><do-it>admin := AdminProyectoFinal new.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	"	cat setSelectionIndex: 3.	cat updateModel.	"	((self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	"	cat setSelectionIndex: 3.	cat updateModel.	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (x id)])); updateModel.	"	((self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	"	cat setSelectionIndex: 3.	cat updateModel.	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	"	((self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	((self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (x key) = (item idCategoria)]).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;Ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 0; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.		um := UserMessage new.		um key: 0.		um &gt;&gt; '&lt;Ninguno&gt;'.		listaCategorias add: um.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	^(listaArticulos removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux.</body></methods><class><name>ParametroGeneralArticulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idParametro valor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valor">valor	^valor</body></methods><methods><class-id>ParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valor:">valor: anObject	valor := anObject</body></methods><comment><class-id>ParametroGeneralArticulo</class-id><body>ParametroGeneralArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idParametro	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idParametro	valor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of valorasd</body></comment><do-it>ParametroGeneralArticulo renameTo: #RelacionParametroGeneralArticulo</do-it><comment><class-id>RelacionParametroGeneralArticulo</class-id><body>ParametroGeneralArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idParametro	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idParametro	valor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of valorasd</body></comment><class><name>Usuario</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idUsuario idPersona </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Usuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idUsuario">idUsuario	^idUsuario</body></methods><methods><class-id>Usuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idUsuario:">idUsuario: anObject	idUsuario := anObject</body></methods><methods><class-id>Usuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPersona">idPersona	^idPersona</body></methods><methods><class-id>Usuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPersona:">idPersona: anObject	idPersona := anObject</body></methods><methods><class-id>Usuario</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idUsuario := nil.	idPersona := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Usuario class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>Administrador</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idAdministrador </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>Vendedor</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVendedor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>Usuario</class-id><body>Usuario has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idPersona	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPersona	idUsuario	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idUsuarioasd</body></comment><class><name>Cliente</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idCliente </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idAdministrador</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idAdministrador</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Administrador</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idCliente</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idCliente</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Cliente</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idVendedor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idVendedor</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Vendedor</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>Administrador</class-id> <selector>idAdministrador</selector></remove-selector><remove-selector><class-id>Administrador</class-id> <selector>idAdministrador:</selector></remove-selector><do-it>Administrador organization removeCategory: #accessing</do-it><remove-selector><class-id>Cliente</class-id> <selector>idCliente</selector></remove-selector><remove-selector><class-id>Cliente</class-id> <selector>idCliente:</selector></remove-selector><do-it>Cliente organization removeCategory: #accessing</do-it><remove-selector><class-id>Vendedor</class-id> <selector>idVendedor</selector></remove-selector><remove-selector><class-id>Vendedor</class-id> <selector>idVendedor:</selector></remove-selector><do-it>Vendedor organization removeCategory: #accessing</do-it><methods><class-id>Vendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	^self</body></methods><remove-selector><class-id>Vendedor</class-id> <selector>initialize</selector></remove-selector><do-it>Vendedor organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>Cliente</class-id> <selector>initialize</selector></remove-selector><do-it>Cliente organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>Administrador</class-id> <selector>initialize</selector></remove-selector><do-it>Administrador organization removeCategory: #'initialize-release'</do-it><class><name>Vendedor</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>legajo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="legajo">legajo	^legajo</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="legajo:">legajo: anObject	legajo := anObject</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>AdminProyectoFinal</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>AdminProyectoFinal</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>AdminProyectoFinal removeFromSystem</do-it><class><name>AdminProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>AdminProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarArticulo:">agregarArticulo: unArticulo	listaArticulos add: unArticulo.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarPersona:">eliminarPersona: unId	listaPersonas removeAllSuchThat: [:x| unId = (x idPersona)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarCategoria:por:">modificarCategoria: unIdCategoria por: unaCategoria	listaArticulos := (listaArticulos collect: [:c|		((c idCategoria) = unIdCategoria)			ifTrue: [unaCategoria]			ifFalse: [c].	]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="autoIncrementoLista:delParametro:">autoIncrementoLista: unaLista delParametro: unBloque	^((unaLista collect: [:x| (unBloque value: x)]) inject: 0 into: [:a :b | a max: b]) + 1.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaCategorias">listaCategorias	^listaCategorias</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPorId:">buscarCategoriaPorId: unId	^(listaCategorias detect: [:e| (e idCategoria) = unId ] ifNone:[]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarAlClienteEnLaVenta:con:">calificarAlClienteEnLaVenta: unIdVenta con: unaCalificacion	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionCliente: unaCalificacion.				v.			] 			ifFalse: [v].	].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticuloPorId:">buscarArticuloPorId: unId	^(listaArticulos detect: [:e| (e idArticulo) = unId ] ifNone: []).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarRol:">eliminarRol: unId	listaPersonas removeAllSuchThat: [:x| unId = (x idPersona)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarCategoria:">agregarCategoria: unaCategoria	listaCategorias add: unaCategoria.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarVenta:">agregarVenta: unaVenta	listaVentas add: unaVenta.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarParametroGeneral:por:">modificarParametroGeneral: unIdParametro por: unParametro	listaParametrosGenerales:= (listaParametrosGenerales collect: [:p|		((p idParametro) = unIdParametro)			ifTrue: [unParametro]			ifFalse: [p].	]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	|categoriaPadre|	categoriaPadre := (self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)).	^(unaCategoria nombre),  (		(categoriaPadre == nil)		ifTrue: ['']		ifFalse: [' (' , (categoriaPadre nombre) , ')']	).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaVentas">listaVentas	^listaVentas</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarParametroGeneral:">eliminarParametroGeneral: unId	listaParametrosGenerales removeAllSuchThat: [:x| unId = (x idParametro)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaArticulos">listaArticulos	^listaArticulos</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarParametroGeneral:">agregarParametroGeneral: unParametro	listaParametrosGenerales add: unParametro.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarArticulosPorCategoria:">buscarArticulosPorCategoria: unIdCategoria	^(listaArticulos select: [:e| (self perteneceALaCategoria: (e idCategoria) a: unIdCategoria) ]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPersonas">listaPersonas	^listaPersonas</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarCategoriaPadrePorIdCategoria:">buscarCategoriaPadrePorIdCategoria: unId	^ (self buscarCategoriaPorId: ((self buscarCategoriaPorId: unId) idCategoriaPadre)).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarArticulo:por:">modificarArticulo: unIdArticulo por: unArticulo	listaArticulos := (listaArticulos collect: [:a|		((a idArticulo) = unIdArticulo)			ifTrue: [unArticulo]			ifFalse: [a].	]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarPersona:por:">modificarPersona: unIdPersona por: unaPersona	listaPersonas:= (listaPersonas collect: [:p|		((p idPersona) = unIdPersona)			ifTrue: [unaPersona]			ifFalse: [p].	]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarPersona:">agregarPersona: unaPersona	listaPersonas add: unaPersona.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarVentasPorVendedor:">buscarVentasPorVendedor: unId	^(listaVentas select: [:e| (e idVendedor) = unId ]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarVentasPorCliente:">buscarVentasPorCliente: unId	^(listaVentas select: [:e| (e idCliente) = unId ]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaRoles">listaRoles	^listaRoles</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametroGeneral:delArticulo:">buscarParametroGeneral: unIdParametro delArticulo: unIdArticulo	^(listaParametrosGenerales detect: [:e| ((e idParametro) = unIdParametro) and: ((e idArticulo) = unIdArticulo) ] ifNone:[]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ 0) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarInformacionDelDisco">cargarInformacionDelDisco</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="calificarAlVendedorEnLaVenta:con:">calificarAlVendedorEnLaVenta: unIdVenta con: unaCalificacion	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v calificacionVendedor: unaCalificacion.				v.			] 			ifFalse: [v].	].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarParametroGeneralArticulo:">agregarParametroGeneralArticulo: unElemento	listaParametrosGeneralesArticulos add: unElemento.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarPersonaPorId:">buscarPersonaPorId: unId	^(listaPersonas detect: [:e| (e idPersona) = unId ] ifNone: []).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initializeUI">initializeUI	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	guiMenuPrincipal open.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaParametrosGenerales">listaParametrosGenerales	^listaParametrosGenerales</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="hijosDeLaCategoria:">hijosDeLaCategoria: unId	|listaHijos|	listaHijos := List new.	(listaCategorias do: [:e|		((e idCategoriaPadre) = unId) ifTrue: [listaHijos add: e].	]).	^listaHijos.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarArticulo:">eliminarArticulo: unId	listaArticulos removeAllSuchThat: [:x| unId = (x idArticulo)].</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="agregarRol:">agregarRol: unParametro	listaRoles add: unParametro.</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametroGeneralPorId:">buscarParametroGeneralPorId: unId	^(listaParametrosGenerales detect: [:e| (e idParametro) = unId ] ifNone:[]).</body></methods><methods><class-id>AdminProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><methods><class-id>AdminProyectoFinal class</class-id> <category>organization</category><body package="ProyectoFinal" selector="vendedor">vendedor	^#vendedor</body></methods><methods><class-id>AdminProyectoFinal class</class-id> <category>organization</category><body package="ProyectoFinal" selector="administrador">administrador	^#administrador</body></methods><methods><class-id>AdminProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>AdminProyectoFinal class</class-id> <category>organization</category><body package="ProyectoFinal" selector="cliente">cliente	^#cliente</body></methods><do-it>AdminProyectoFinal renameTo: #ProyectoFinal</do-it><comment><class-id>ProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><do-it>AdminProyectoFinalUI renameTo: #ProyectoFinalUI</do-it><comment><class-id>ProyectoFinalUI</class-id><body>AdmUI has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	admin	&lt;AdmProyectoFinal&gt;	description of adminasd</body></comment><do-it>Usuario organization addCategory: #comparing</do-it><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esCliente">esCliente	^false</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esAdministrador">esAdministrador	^false</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esVendedor">esVendedor	^false</body></methods><do-it>Administrador organization addCategory: #comparing</do-it><do-it>Cliente organization addCategory: #comparing</do-it><do-it>Vendedor organization addCategory: #comparing</do-it><methods><class-id>Administrador</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esAdministrador">esAdministrador	^false</body></methods><methods><class-id>Cliente</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esAdministrador">esAdministrador	^false</body></methods><methods><class-id>Vendedor</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esAdministrador">esAdministrador	^false</body></methods><methods><class-id>Administrador</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esAdministrador">esAdministrador	^true</body></methods><methods><class-id>Cliente</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esCliente">esCliente	^true</body></methods><methods><class-id>Vendedor</class-id> <category>comparing</category><body package="ProyectoFinal" selector="esVendedor">esVendedor	^true</body></methods><remove-selector><class-id>Vendedor</class-id> <selector>esAdministrador</selector></remove-selector><remove-selector><class-id>Cliente</class-id> <selector>esAdministrador</selector></remove-selector><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsCliente:">siEsCliente: unBloque	^self esCliente ifTrue: [unBloque value]</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsCliente:">siEsCliente: unBloque	^(self esCliente ifTrue: [unBloque value]).</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsCliente:">siEsCliente: unBloque	^((self esCliente) ifTrue: [unBloque value]).</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsCliente:">siEsCliente: unBloque	^self esCliente ifTrue: [unBloque value] ifFalse:[].</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsCliente:">siEsCliente: unBloque	^self esCliente ifTrue: [unBloque value] ifFalse:[nil].</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsAdministrador:">siEsAdministrador: unBloque	^self esAdministrador ifTrue: [unBloque value] ifFalse:[nil].</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsVendedor:">siEsVendedor: unBloque	^self esVendedor ifTrue: [unBloque value] ifFalse:[nil].</body></methods><methods><class-id>Usuario</class-id> <category>comparing</category><body package="ProyectoFinal" selector="siEsAdministrador:siEsCliente:siEsVendedor:">siEsAdministrador: unBloqueAdministrador siEsCliente: unBloqueCliente siEsVendedor: unBloqueVendedor^self esAdministrador ifTrue: [unBloqueAdministrador value] ifFalse:[	self esCliente ifTrue: [unBloqueCliente value] ifFalse: [		self esVendedor ifTrue: [unBloqueVendedor value] ifFalse: [nil]	] ].</body></methods><remove-selector><class-id>ProyectoFinal class</class-id> <selector>vendedor</selector></remove-selector><remove-selector><class-id>ProyectoFinal class</class-id> <selector>cliente</selector></remove-selector><remove-selector><class-id>ProyectoFinal class</class-id> <selector>administrador</selector></remove-selector><do-it>ProyectoFinal class organization removeCategory: #organization</do-it><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>usuario listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><comment><class-id>ProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="usuario">usuario	^usuario</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="usuario:">usuario: anObject	usuario := anObject</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaUsuarios">listaUsuarios	^listaUsuarios</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaUsuarios:">listaUsuarios: anObject	listaUsuarios := anObject</body></methods><class><name>Logeo</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Logeo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	^self menuAdministrador</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuAdministrador">menuAdministrador	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>Logeo class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 744 288 1064 568 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><remove-selector><class-id>Logeo class</class-id> <selector>windowSpec</selector></remove-selector><do-it>Logeo class organization removeCategory: #'instance creation'</do-it><do-it>Logeo class organization addCategory: #'interface specs'</do-it><methods><class-id>Logeo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 744 288 1064 568 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><class><name>Logeo</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Logeo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 748 265 1068 565 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#name: #mes 					#menu: #meses ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Logeo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Logeo</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Logeo removeFromSystem</do-it><class><name>Cliente</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>telefono </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="telefono">telefono	^telefono</body></methods><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="telefono:">telefono: anObject	telefono := anObject</body></methods><methods><class-id>Persona class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="femenino">femenino	^#femenino</body></methods><methods><class-id>Persona class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="masculino">masculino	^#masculino</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarVendedor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarVendedor</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarVendedor removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarCliente</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarCliente</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarCliente removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarVendedor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarVendedor</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarVendedor removeFromSystem</do-it><class><name>ModificarUsuario</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarUsuario</class-id><body>ModificarUsuario has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarAdministrador</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^'SeleccionarUsuario'</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarCliente</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarCliente</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarCliente removeFromSystem</do-it><do-it>SeleccionarAdministrador renameTo: #SeleccionarUsuario</do-it><comment><class-id>SeleccionarUsuario</class-id><body>SeleccionarRoles has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>ModificarAdministrador</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarUsuario</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarRoles">administrarRoles	|ui|	ui := SeleccionarUsuario new.	ui admin: admin.	ui open.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarAdministradores">administrarAdministradores	self abrirInterfaz: SeleccionarUsuario.</body></methods><methods><class-id>SeleccionarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarCategoria</body></methods><methods><class-id>SeleccionarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarUsuario</body></methods><methods><class-id>SeleccionarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar usuarios'</body></methods><do-it>admin := ProyectoFinal new.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 9, 2017' '10:05:34 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 22:05:34 on 9 de enero de 2017."</do-it><do-it>OpenFileDialog new.</do-it><do-it>OpenFileDialog new open.</do-it><do-it>OpenFileDialog new open.</do-it><remove-selector><class-id>Administrador class</class-id> <selector>new</selector></remove-selector><do-it>Administrador class organization removeCategory: #'instance creation'</do-it><remove-selector><class-id>Cliente class</class-id> <selector>new</selector></remove-selector><do-it>Cliente class organization removeCategory: #'instance creation'</do-it><remove-selector><class-id>Vendedor class</class-id> <selector>new</selector></remove-selector><do-it>Vendedor class organization removeCategory: #'instance creation'</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self cargarInformacionDelDisco.	self initializeUI.	^self</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaCategoriasSinRaiz">listaCategoriasSinRaiz	^(listaCategorias detect: [:x| (x idCategoria) ~~ 0])</body></methods><methods><class-id>SeleccionarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaCategoriasSinRaiz) texto: [:x| (admin nombreConFormatoCategoria: x)] valor: [:x| x idCategoria].</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (admin nombreConFormatoCategoria: c).		listaCategorias add: um.	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add:( (UserMessage new)		key: (c idCategoria);		&gt;&gt; (admin nombreConFormatoCategoria: c)		 ).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias |	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add:( (UserMessage new)		key: (c idCategoria);		&gt;&gt; (admin nombreConFormatoCategoria: c)		 ).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add:( (UserMessage new)		key: (c idCategoria);		&gt;&gt; (admin nombreConFormatoCategoria: c)		 ).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add:( (UserMessage new)			key: (c idCategoria);			&gt;&gt; (admin nombreConFormatoCategoria: c)		 ).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add:( (UserMessage new) key: (c idCategoria); &gt;&gt; (admin nombreConFormatoCategoria: c)).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaCategoriasSinRaiz">listaCategoriasSinRaiz	^(listaCategorias select: [:x| (x idCategoria) ~~ 0])</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	|categoriaPadre|	categoriaPadre := (self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)).	^(unaCategoria nombre),  (		((unaCategoria idCategoriaPadre) == 0)		ifTrue: ['']		ifFalse: [' (' , (categoriaPadre nombre) , ')']	).</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 10, 2017' '4:18:39 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 4:18:39 on 10 de enero de 2017."</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	|listaArticulosAux|	listaArticulosAux := listaArticulos.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux.</body></methods><do-it>admin perteneceALaCategoria: 1 a: 0.</do-it><do-it>admin perteneceALaCategoria: 1 a: 0.</do-it><do-it>admin perteneceALaCategoria: 1 a: 1.</do-it><do-it>admin perteneceALaCategoria: 1 a: 0.</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ 0) &amp; (categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ 0) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ 0) &amp; (categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 10, 2017' '4:29:32 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 4:29:32 on 10 de enero de 2017."</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	|categoriaPadre|	categoriaPadre := (self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)).	^(unaCategoria nombre),  (		((unaCategoria idCategoriaPadre) = 0) | ((unaCategoria idCategoriaPadre) = nil)		ifTrue: ['']		ifFalse: [' (' , (categoriaPadre nombre) , ')']	)</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="nombreConFormatoCategoria:">nombreConFormatoCategoria: unaCategoria	|categoriaPadre|	categoriaPadre := (self buscarCategoriaPadrePorIdCategoria: (unaCategoria idCategoria)).	^(unaCategoria nombre),  (		(((unaCategoria idCategoriaPadre) = 0) | ((unaCategoria idCategoriaPadre) = nil))		ifTrue: ['']		ifFalse: [' (' , (categoriaPadre nombre) , ')']	)</body></methods><do-it>admin perteneceALaCategoria: 1 a: 0.</do-it><do-it>admin perteneceALaCategoria: 2 a: 0.</do-it><do-it>admin perteneceALaCategoria: 2 a: 1.</do-it><do-it>admin perteneceALaCategoria: 2 a: 0.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)	ifTrue: [		respuesta:=true.	]	ifFalse: [		categoria := (self buscarCategoriaPorId: unIdCategoria).		(categoria == nil)		ifTrue: [			respuesta := false.		]		ifFalse: [			categoriaPadre := (categoria idCategoriaPadre).			respuesta := (				(categoriaPadre ~~ nil) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><do-it>admin perteneceALaCategoria: 2 a: 0.</do-it><do-it>admin perteneceALaCategoria: 2 a: 0.</do-it><do-it>admin perteneceALaCategoria: 2 a: 1.</do-it><do-it>admin perteneceALaCategoria: 2 a: 2.</do-it><do-it>admin perteneceALaCategoria: 2 a: 3.</do-it><do-it>admin perteneceALaCategoria: 3 a: 2.</do-it><do-it>admin perteneceALaCategoria: 2 a: 3.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	"	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux."	listaArticulos removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].</body></methods><do-it>admin eliminarCategoria: 2.</do-it><do-it>admin eliminarCategoria: 2.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	"	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux."	listaCategorias removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	"	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux."	listaArticulos removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaCategorias removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	"	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux."	|idCategoriaPadre|	idCategoriaPadre := (self buscarCategoriaPorId: unId) idCategoriaPadre.	listaArticulos removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaCategorias removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	"	|listaArticulosAux|	listaArticulosAux := listaArticulos copy.	listaArticulosAux removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaArticulos := listaArticulosAux."	|idCategoriaPadre|	idCategoriaPadre := (self buscarCategoriaPorId: unId) idCategoriaPadre.	listaArticulos do: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].	listaCategorias removeAllSuchThat: [:e| (self perteneceALaCategoria: (e idCategoria) a: unId) ].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 10, 2017' '4:40:55 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 4:40:55 on 10 de enero de 2017."</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	listaArticulos collect: [:x|		(self perteneceALaCategoria: (x idCategoria) a: unId)		ifTrue: [			x idCategoria: ((self buscarCategoriaPorId: unId) idCategoriaPadre). x		]		ifFalse: [x]	].	listaCategorias removeAllSuchThat: [:x| (self perteneceALaCategoria: (x idCategoria) a: unId) ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	listaArticulos := listaArticulos collect: [:x|		(self perteneceALaCategoria: (x idCategoria) a: unId)		ifTrue: [			x idCategoria: ((self buscarCategoriaPorId: unId) idCategoriaPadre). x		]		ifFalse: [x]	].	listaCategorias removeAllSuchThat: [:x| (self perteneceALaCategoria: (x idCategoria) a: unId) ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarCategoria:">eliminarCategoria: unId	listaArticulos := (listaArticulos collect: [:x|		(self perteneceALaCategoria: (x idCategoria) a: unId)		ifTrue: [			x idCategoria: ((self buscarCategoriaPorId: unId) idCategoriaPadre). x		]		ifFalse: [x]	]).	listaCategorias removeAllSuchThat: [:x| (self perteneceALaCategoria: (x idCategoria) a: unId) ].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 10, 2017' '4:47:18 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 4:47:18 on 10 de enero de 2017."</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		(admin perteneceALaCategoria: (c idCategoria) a: id)		listaCategorias add:( (UserMessage new) key: (c idCategoria); &gt;&gt; (admin nombreConFormatoCategoria: c)).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		(admin perteneceALaCategoria: (c idCategoria) a: id) ifFalse: [			listaCategorias add:( (UserMessage new) key: (c idCategoria); &gt;&gt; (admin nombreConFormatoCategoria: c)).		]	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add:( (UserMessage new) key: (c idCategoria); &gt;&gt; (admin nombreConFormatoCategoria: c)).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x|		(x key) = (item idCategoria)	].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x|		(admin perteneceALaCategoria: (x idCategoria) a: id)	].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x idCategoria) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarCategoriaPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x key) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametroGeneral:delArticulo:">buscarParametroGeneral: unIdParametro delArticulo: unIdArticulo	^(listaParametrosGenerales detect: [:e| ((e idParametro) = unIdParametro) &amp; ((e idArticulo) = unIdArticulo) ] ifNone:[]).</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 627 283 947 503 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 317 0 213 0 ) 					#name: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><class><name>SeleccionarParametrosGeneralesArticulo</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><remove-selector><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarParametrosGeneralesArticulo organization removeCategory: #'initialize-release'</do-it><class><name>SeleccionarParametrosGeneralesArticulo</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><do-it>SeleccionarParametrosGeneralesArticulo organization addCategory: #'interface opening'</do-it><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaParametrosGeneralesDelArticulo: idArticulo) texto: [:x| x nombre] valor: [:x| x idParametro].</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaParametrosGeneralesDelArticulo: idArticulo) texto: [:x| x valor] valor: [:x| x idParametro].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 10, 2017' '3:50:16 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:50:16 on 10 de enero de 2017."</do-it><remove-selector><class-id>Venta</class-id> <selector>precio</selector></remove-selector><remove-selector><class-id>Venta</class-id> <selector>precio:</selector></remove-selector><methods><class-id>Venta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idVenta := nil.	idCliente := nil.	idVendedor := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>Precio</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio">precio	^precio</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="precio:">precio: anObject	precio := anObject</body></methods><methods><class-id>Precio</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	precio := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Precio class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>Precio</class-id><body>Precio has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precioasd</body></comment><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametrosGeneralesDelArticulo:">buscarParametrosGeneralesDelArticulo: unIdArticulo	^(listaParametrosGenerales select: [:e| ((e idArticulo) = unIdArticulo) ] ifNone:[]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametrosGeneralesDelArticulo:">buscarParametrosGeneralesDelArticulo: unIdArticulo	^(listaParametrosGeneralesArticulos select: [:e| ((e idArticulo) = unIdArticulo) ] ifNone:[]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="buscarParametroGeneral:delArticulo:">buscarParametroGeneral: unIdParametro delArticulo: unIdArticulo	^(listaParametrosGeneralesArticulos detect: [:e| ((e idParametro) = unIdParametro) &amp; ((e idArticulo) = unIdArticulo) ] ifNone:[]).</body></methods><do-it>SeleccionarParametrosGeneralesArticulo organization addCategory: #updating</do-it><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPersona: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneralArticulo: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarParametroGeneralArticuloConId:delArticulo:">eliminarParametroGeneralArticuloConId: unIdParametro delArticulo: unIdArticulo	listaParametrosGenerales removeAllSuchThat: [:x| 'dasd' = (x idParametro)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarParametroGeneralArticuloConId:delArticulo:">eliminarParametroGeneralArticuloConId: unIdParametro delArticulo: unIdArticulo	listaParametrosGenerales removeAllSuchThat: [:e| ((e idParametro) = unIdParametro) &amp; ((e idArticulo) = unIdArticulo) ].</body></methods><comment><class-id>SeleccionarParametrosGeneralesArticulo</class-id><body>SeleccionarParametrosGeneralesArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticuloasd</body></comment><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarParametroGeneralArticuloConId: ((self widgetAt: #idItem) selection key asNumber) delArticulo: idArticulo.	super eliminar.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaParametrosGeneralesDelArticulo:">listaParametrosGeneralesDelArticulo: unId	^listaParametrosGeneralesArticulos select: [:x| x idArticulo ].</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="editarParametrosGenerales">editarParametrosGenerales	SeleccionarParametroGeneralesArticulo</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="editarParametrosGenerales">editarParametrosGenerales	SeleccionarParametrosGeneralesArticulo new.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="editarParametrosGenerales">editarParametrosGenerales	|ui|	ui := SeleccionarParametrosGeneralesArticulo new.	ui admin: admin.	ui open.	^ui</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="editarParametrosGenerales">editarParametrosGenerales	|ui|	ui := SeleccionarParametrosGeneralesArticulo new.	ui admin: admin.	ui idArticulo: id.	ui open.	^ui</body></methods><do-it>RelacionParametroGeneralArticulo renameTo: #ParametroGeneralArticulo</do-it><comment><class-id>ParametroGeneralArticulo</class-id><body>ParametroGeneralArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idParametro	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idParametro	valor	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of valorasd</body></comment><class><name>ModificarParametroGeneralArticulo</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="abrirVentanaModificacion">abrirVentanaModificacion	|ui|	ui := (self claseModificar) new.	ui admin: admin.	ui open.	^ui</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="abrirVentanaModificacion">abrirVentanaModificacion	|ui|	ui := (self claseModificar) new.	ui idArticulo: idArticulo.	ui admin: admin.	ui open.	^ui</body></methods><comment><class-id>ModificarParametroGeneralArticulo</class-id><body>ModificarParametroGeneralArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticuloasd</body></comment><do-it>admin := ProyectoFinal new.</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 317 0 213 0 ) 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarParametroGeneralArticulo</body></methods><remove-selector><class-id>ModificarParametroGeneralArticulo</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarParametroGeneralArticulo organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item idParametro: ((self widgetAt: #idParametro) currentChoice).	item idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item idParametro: ((self widgetAt: #idParametro) currentChoice).	item idArticulo: idArticulo.	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item idParametro: ((self widgetAt: #idParametro) currentChoice).	item idArticulo: idArticulo.	item valor: (((self widgetAt: #valor) model value) asString).	admin agregarParametroGeneral: item.</body></methods><do-it>ModificarParametroGeneralArticulo class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 314 0 118 0 ) 					#name: #categoriaPadre 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 782 399 1102 589 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 314 0 118 0 ) 					#name: #parametro 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><do-it>ModificarParametroGeneralArticulo organization addCategory: #'interface opening'</do-it><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaParametros|	super open.	listaParametros := List new.	admin listaParametrosGenerales do: [:c|		listaParametros add: (			(UserMessage new)				key: (c idParametro);				&gt;&gt; (c nombre)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaParametros)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaParametros|	super open.	listaParametros := List new.	admin listaParametrosGenerales do: [:c|		listaParametros add: (			(UserMessage new)				key: (c idParametro);				&gt;&gt; (c nombre)		).	].	((self widgetAt: #parametro) model: (ValueHolder with: listaParametros)).	(self widgetAt: #parametro) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneralPorId: id delArticulo: idArticulo).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x key) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x key) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	(self widgetAt: #parametro) setSelectionIndex: ((self widgetAt: #parametro) sequence findIndexOf: ((self widgetAt: #parametro) sequence detect: [:x| (x key) = (item idParametro)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x key) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	(self widgetAt: #parametro) setSelectionIndex: ((self widgetAt: #parametro) sequence findIndexOf: ((self widgetAt: #parametro) sequence detect: [:x| (x key) = (item idParametro)])); updateModel.	(self widgetAt: #valor) model value: (item valor).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item idParametro: ((self widgetAt: #idParametro) currentChoice).	item idArticulo: idArticulo.	item valor: (((self widgetAt: #valor) model value) asString).	admin agregarParametroGeneralArticulo: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item idParametro: ((self widgetAt: #parametro) selection key asNumber).	item idArticulo: idArticulo.	item valor: (((self widgetAt: #valor) model value) asString).	admin agregarParametroGeneralArticulo: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarParametrosGeneralesArticulo</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaParametrosGeneralesDelArticulo:">listaParametrosGeneralesDelArticulo: unId	^listaParametrosGeneralesArticulos select: [:x| (x idArticulo) = unId ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="eliminarParametroGeneralArticuloConId:delArticulo:">eliminarParametroGeneralArticuloConId: unIdParametro delArticulo: unIdArticulo	listaParametrosGeneralesArticulos removeAllSuchThat: [:e| ((e idParametro) = unIdParametro) &amp; ((e idArticulo) = unIdArticulo) ].</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	super closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	super closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.	^ui.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	super closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.	^ui</body></methods><do-it>ModificarParametroGeneralArticulo organization addCategory: #'interface closing'</do-it><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	super closeRequest.	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: idArticulo.	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (claseItem idArticulo).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaParametros|	super open.	listaParametros := List new.	admin listaParametrosGenerales do: [:c|		((admin buscarParametroGeneral: (c idParametro) delArticulo: idArticulo) = nil) ifTrue: [			listaParametros add: (				(UserMessage new)					key: (c idParametro);					&gt;&gt; (c nombre)			).		]	].	((self widgetAt: #parametro) model: (ValueHolder with: listaParametros)).	(self widgetAt: #parametro) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	"(self widgetAt: #parametro) setSelectionIndex: ((self widgetAt: #parametro) sequence findIndexOf: ((self widgetAt: #parametro)"			(self widgetAt: #parametro) setSelectionIndex: ((self widgetAt: #parametro) sequence findIndexOf: ((self widgetAt: #parametro) sequence detect: [:x| (x key) = (item idParametro)])); updateModel.	(self widgetAt: #valor) model value: (item valor).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item parametro|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	parametro := (admin buscarParametroGeneralPorId: (item idParametro)).	(self widgetAt: #parametro) sequence add: ( (UserMessage new)		key: (parametro idParametro);		&gt;&gt; (parametro nombre)	).	(self widgetAt: #parametro) setSelectionIndex: ((self widgetAt: #parametro) sequence findIndexOf: ((self widgetAt: #parametro) sequence detect: [:x| (x key) = (item idParametro)])); updateModel.	(self widgetAt: #valor) model value: (item valor).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (claseItem idArticulo).	Transcript show: (idArticulo asString).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (claseItem idArticulo).	Transcript show: ('dasda', idArticulo asString).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	item valor: (((self widgetAt: #valor) model value) asString).	admin modificarParametroGeneral: id delArticulo: idArticulo por: item.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarParametroGeneral:delArticulo:por:">modificarParametroGeneral: unIdParametro delArticulo: unIdArticulo por: unParametro	listaParametrosGenerales:= (listaParametrosGenerales collect: [:p|		(((p idParametro) = unIdParametro) &amp; ((p idArticulo) = unIdArticulo))			ifTrue: [unParametro]			ifFalse: [p].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="modificarParametroGeneral:delArticulo:por:">modificarParametroGeneral: unIdParametro delArticulo: unIdArticulo por: unParametro	listaParametrosGeneralesArticulos:= (listaParametrosGeneralesArticulos collect: [:p|		(((p idParametro) = unIdParametro) &amp; ((p idArticulo) = unIdArticulo))			ifTrue: [unParametro]			ifFalse: [p].	]).</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (claseItem idArticulo).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (idArticulo).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (claseItem idArticulo).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	self asignarAClaseSeleccionar: ui.	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi admin: (claseItem admin).	unUi idArticulo: (claseItem idArticulo).	^unUi</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi admin: (claseItem admin).	^unUi</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi admin: (claseItem admin).	unUi idArticulo: (claseItem idArticulo).	^unUi</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui := self asignarAClaseSeleccionar: ui.	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (claseItem claseSeleccionar) new.	ui := (claseItem asignarAClaseSeleccionar: ui).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi admin: admin.	^unUi</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi admin: admin.	unUi idArticulo: idArticulo.	^unUi</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar parámetros generales del artículo'</body></methods><methods><class-id>SeleccionarParametrosGeneralesArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaParametrosGeneralesDelArticulo: idArticulo) texto: [:x|		((admin buscarParametroGeneralPorId: (x idParametro)) nombre) ,		': ' , (x valor)	] valor: [:x| x idParametro].</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 745 287 1065 507 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 317 0 213 0 ) 					#flags: 24 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) model value: (item nombre).	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) isVisible: true.	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 317 0 213 0 ) 					#name: #botonEditarParametros 					#flags: 24 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := ProyectoFinal new.</do-it><class><name>RegistrarVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Confirmar petición' 			#min: #(#{Core.Point} 346 131 ) 			#max: #(#{Core.Point} 346 131 ) 			#bounds: #(#{Graphics.Rectangle} 550 358 896 489 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 0 0.4 0.5 0.5 ) 					#label: #texto ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -65 1 -5 1 1 1 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 1 -5 1 1 1 ) 					#model: #cancelar 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #labelString 			#min: #(#{Core.Point} 346 346 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 626 361 972 492 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 -5 1 0 1 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 54 0 -5 1 0 1 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 100 0 -5 1 0 1 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -30 1 ) 					#name: #idItem 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #labelString 			#min: #(#{Core.Point} 346 131 ) 			#max: #(#{Core.Point} 346 131 ) 			#bounds: #(#{Graphics.Rectangle} 510 319 856 450 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 -5 1 0 1 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 54 0 -5 1 0 1 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 100 0 -5 1 0 1 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -30 1 ) 					#name: #idItem 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>SeleccionarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 			#label: #labelString 			#min: #(#{Core.Point} 346 131 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 572 363 918 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 -5 1 0 1 ) 					#name: #botonNuevo 					#model: #nuevo 					#label: 'Nuevo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 54 0 -5 1 0 1 ) 					#name: #botonEditar 					#flags: 40 					#model: #editar 					#label: 'Editar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 100 0 -5 1 0 1 ) 					#name: #botonEliminar 					#flags: 40 					#model: #peticionEliminar 					#label: 'Eliminar' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -30 1 ) 					#name: #idItem 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 320 280 ) 			#bounds: #(#{Graphics.Rectangle} 523 244 843 524 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 4 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 314 0 115 0 ) 					#name: #categoria 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 3 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 317 0 213 0 ) 					#name: #botonEditarParametros 					#flags: 24 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 314 0 118 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 314 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><do-it>RegistrarVenta class organization addCategory: #'interface specs'</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 320 280 ) 			#bounds: #(#{Graphics.Rectangle} 523 244 843 524 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 494 143 1134 623 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -32 1 ) 					#name: #tablaArticulos ) ) ) )</body></methods><remove-selector><class-id>MenuPrincipal class</class-id> <selector>menuAdministrador</selector></remove-selector><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuAdministrador">menuAdministrador	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar roles' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><remove-selector><class-id>MenuPrincipal class</class-id> <selector>menuAdministrador</selector></remove-selector><do-it>ui := RegistrarVenta new.</do-it><do-it>ui open.</do-it><do-it>ui widgetAt: #tabla</do-it><do-it>ui widgetAt: #tablaArticulos</do-it><do-it>ui := RegistrarVenta new.</do-it><do-it>ui open.</do-it><do-it>tab := ui widgetAt: #tablaArticulos.</do-it><do-it>tab table.</do-it><do-it>tab table add: 'perro'.</do-it><do-it>tab updateModel.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab updateModel.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab table addRow: 'perro'.</do-it><do-it>tab updateModel.</do-it><do-it>tab := ui widgetAt: #tablaArticulos.</do-it><do-it>(ui widgetAt: #tablaArticulos) table addRow: 'perro'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table addRow: 'perro'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table addRow: 'perro'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table addRow: 'perro'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table addRow: (RowAdaptor new).</do-it><do-it>tab updateModel.</do-it><do-it>ui := RegistrarVenta new.ui open.</do-it><do-it>theList := #((1 2) (3 4)).</do-it><do-it>theList := #((1 2) (3 4)) asList.</do-it><do-it>theList first class</do-it><do-it>(ui widgetAt: #tablaArticulos) table: (	TableAdaptor		on: theList		adaptors: (RowAdaptor adapt: theList first class))</do-it><do-it>(ui widgetAt: #tablaArticulos) table: (	TableAdaptor		on: theList		adaptors: (RowAdaptor adapt: theList first class))</do-it><do-it>(RowAdaptor adapt: theList first class)</do-it><do-it>tab updateModel.</do-it><do-it>(ui widgetAt: #tablaArticulos) table: (	TableAdaptor		on: theList		adaptors: (RowAdaptor adapt: theList first class))</do-it><do-it>(ui widgetAt: #tablaArticulos) table: (	TableAdaptor		on: theList		adaptors: (RowAdaptor adapt: theList first class))</do-it><do-it>ui := RegistrarVenta new.ui open.</do-it><do-it>tab := (ui widgetAt: #tablaArticulos).</do-it><do-it>theList := #((1 2) (3 4)) asList.</do-it><do-it>tab updateModel.</do-it><do-it>(ui widgetAt: #tablaArticulos) table: (	TableAdaptor		on: theList		adaptors: (RowAdaptor adapt: theList first class))</do-it><do-it>tab updateModel.</do-it><do-it>tab updateModel.</do-it><do-it>(ui widgetAt: #tablaArticulos) table: (	TableAdaptor		on: theList		adaptors: (RowAdaptor adapt: theList first class))</do-it><do-it>(ui widgetAt: #tablaArticulos) updateModel.</do-it><do-it>tab := (ui widgetAt: #tablaArticulos).</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table add: 'dasdas'.</do-it><do-it>(ui widgetAt: #tablaArticulos) table addRow: (RowAdaptor adapt: theList first class).</do-it><do-it>(ui widgetAt: #tablaArticulos) updateModel.</do-it><do-it>UIBuilder actionButtons.</do-it><do-it>Screen default ringBell.</do-it><do-it>Screen default ringBell.</do-it><do-it>Screen default ringBell.</do-it><do-it>Screen default ringBell.</do-it><do-it>Screen default ringBell.</do-it><do-it>Screen default ringBell.</do-it><do-it>UIBuilder radioButtons.</do-it><do-it>Bezier demoFlatness.</do-it><do-it>Bezier fromUser.</do-it><do-it>Bezier fromUser.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 11, 2017' '7:32:42 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 19:32:42 on 11 de enero de 2017."</do-it><do-it>Image openOnLogo.</do-it><do-it>Image openOnImageFromUser.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 11, 2017' '8:13:23 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:13:23 on 11 de enero de 2017."</do-it><do-it>ArtificialTreeItemHolder exampleDirect.</do-it><do-it>ArtificialTreeItemHolder exampleDirect.</do-it><do-it>ArtificialTreeItemHolder exampleDirect.</do-it><do-it>	root := Object new </do-it><do-it>	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | (a idCategoria) = (b idCategoriaPadre) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (b idCategoria)) idCategoria) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (a key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (b key)) idCategoria) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombreConFormatoCategoria: c)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 730 302 1050 492 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 149 0 196 0 177 0 ) 					#name: #categoriaPadreee 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 30 0 304 0 125 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombre)		).	].	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre)		rootHolder: root;		showRoot: false;		open.	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (admin nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre)		rootHolder: root;		showRoot: false.	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre)		rootHolder: root;		showRoot: false.	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model		rootHolder: root;		showRoot: false.	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	(self widgetAt: #categoriaPadre) model		rootHolder: root;		showRoot: false.	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	(self widgetAt: #categoriaPadre) model root:	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	(self widgetAt: #categoriaPadre) model root: root.	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	(self widgetAt: #categoriaPadre) model: (ValueHolder with: root).	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	model := (self widgetAt: #categoriaPadre) model.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: root).	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	self perro.	model := (self widgetAt: #categoriaPadre) model.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: root).	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	model := (self widgetAt: #categoriaPadre) model.	self perro.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: root).	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	model := (self widgetAt: #categoriaPadre) model.	self perro.	(self widgetAt: #categoriaPadre) model root: root.	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	arbol := (self widgetAt: #categoriaPadre).	model := (self widgetAt: #categoriaPadre) model.	(self widgetAt: #categoriaPadre) model root: root; showRoot: false.	"	rootHolder: root;		showRoot: false.	"	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root arbol model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model root: root; showRoot: false; setSelectionIndex: 1; updateModel.	(self widgetAt: #categoriaPadre)</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model root: root; showRoot: false; setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model value root: root; showRoot: false; setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: ((TreeModel new) root: root displayIt: false)); setSelectionIndex: 1; updateModel.</body></methods><do-it>	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder 		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: root; setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: root; setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: root.	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: root).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (TreeModel on: root displayRoot: false)).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (TreeModel on: root displayRoot: false).	"setSelectionIndex: 1; updateModel."</body></methods><do-it>TreeSelectionModule new open.</do-it><do-it>tre := TreeView new.</do-it><do-it>tre model.</do-it><do-it>tre model.</do-it><do-it>tre model.</do-it><do-it>tre := TreeView new.</do-it><do-it>tre model.</do-it><do-it>tre model.</do-it><do-it>Bezier fromUser.</do-it><class><name>ModificarCategoria</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>treeHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 583 293 903 483 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 149 0 196 0 177 0 ) 					#name: #categoriaPadreee 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 30 0 304 0 125 0 ) 					#name: #categoriaPadre 					#model: #treeHolder 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (TreeModel on: root displayRoot: false).	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"	root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model	"	((self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias)).	setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	self treeHolder list: model.	(self widgetAt: #categoriaPadre) model list: model.	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	(self widgetAt: #categoriaPadre) model list: model.	"setSelectionIndex: 1; updateModel."</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>treeHolder</selector></remove-selector><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 163 0 149 0 196 0 177 0 ) 					#name: #categoriaPadreee 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 30 0 304 0 125 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	model := TreeModel on: root displayRoot: false.	(self widgetAt: #categoriaPadre) model value list: model.	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model value: (TreeModel on: root displayRoot: false).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model value: (TreeModel on: root displayRoot: false).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (TreeModel on: root displayRoot: false).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (TreeModel on: root displayRoot: false)).	"setSelectionIndex: 1; updateModel."</body></methods><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].TreeSelectionModule new	rootHolder: root;	showRoot: false;	open.</do-it><do-it>ui := TreeSelectionModule new	rootHolder: root;	showRoot: false;	open.</do-it><do-it>ui := RegistrarVenta new.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root;	showRoot: false;	open.(ui widgetAt: #listView).</do-it><do-it>(ui widgetAt: #treeList).</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>(ui widgetAt: #treeList) model: (ValueHolder with: (TreeModel on: root displayRoot: false)).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>(ui widgetAt: #treeList) model: (ValueHolder with: (TreeModel on: root displayRoot: false)).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root;	showRoot: false;	open.</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>(ui widgetAt: #treeList) model: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>root.</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>(ui widgetAt: #treeList) model: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root;	showRoot: false;	open.</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>(ui widgetAt: #treeList) model: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>(ui widgetAt: #treeList) model.</do-it><do-it>(ui widgetAt: #treeList) model: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>(ui widgetAt: #treeList) model value: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>(ui widgetAt: #treeList) updateModel.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>(ui widgetAt: #treeList) model value: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>(ui widgetAt: #treeList) updateModel.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root;	showRoot: false;	open.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value: (ValueHolder with: (TreeModel on: root)).</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel on: root).</do-it><do-it>(ui widgetAt: #treeList) model value: root.</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel on: root).</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel on: root displayRoot: false).</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel on: root displayRoot: false).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui := TreeSelectionModule new.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui	rootHolder: root;	showRoot: false;	open.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(TreeModel on: root displayRoot: false)</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(TreeModel on: root displayRoot: false)</do-it><do-it>(TreeModel on: root displayRoot: true)</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel on: root displayRoot: true).</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel on: root displayRoot: true).</do-it><do-it>(ui widgetAt: #treeList) updateModel.</do-it><do-it>sel := SelectionInTree new</do-it><do-it>sel list: (TreeModel on: root displayRoot: false).</do-it><do-it>sel list: (TreeModel on: root displayRoot: false).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui := TreeSelectionModule new.</do-it><do-it>ui	rootHolder: root;	showRoot: false;	open.</do-it><do-it>sel := SelectionInTree new.</do-it><do-it>sel list: (TreeModel on: root displayRoot: false).</do-it><do-it>(ui widgetAt: #treeList) model value: sel.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>sel := SelectionInTree new list: (TreeModel on: root displayRoot: false).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root;	showRoot: false;	open.sel := SelectionInTree new list: (TreeModel on: root displayRoot: false).(ui widgetAt: #treeList) model value: sel.(ui widgetAt: #treeList) model value.(ui widgetAt: #treeList) updateModel.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root;	showRoot: false;	open.sel := SelectionInTree new list: (TreeModel on: root displayRoot: false).(ui widgetAt: #treeList) model value: sel.(ui widgetAt: #treeList) updateModel.(ui widgetAt: #treeList) model value.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui open.</do-it><do-it>ui	rootHolder: root.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui	rootHolder: root.</do-it><do-it>ui	showRoot: false.</do-it><do-it>ui setupTreeHolder.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>usuario</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>usuario</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><do-it>ui := TreeSelectionModule new.</do-it><do-it>ui open.</do-it><do-it>ui	rootHolder: root.</do-it><do-it>ui	showRoot: false.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui	rootHolder: root.</do-it><do-it>ui	showRoot: false.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>(ui widgetAt: #treeList) updateModel.</do-it><do-it>ArtificialTreeItemHolder exampleDirect.</do-it><do-it>	root :=  ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingIndirectRelation: [:a :b | b includesBehavior: a].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		preExpandTo: 2.</do-it><do-it>	root :=  ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingIndirectRelation: [:a :b | b includesBehavior: a].	TreeSelectionModule new		open;		rootHolder: root;		showRoot: false;		preExpandTo: 2;		setupTreeHolder.</do-it><do-it>	TreeSelectionModule new		open.</do-it><do-it>ui := TreeSelectionModule new.ui open.</do-it><do-it>(ui widgetAt: #treeList)</do-it><do-it>(ui widgetAt: #treeList) model value</do-it><do-it>ui := TreeSelectionModule new.ui open.</do-it><do-it>	root := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>ui := TreeSelectionModule new.ui open.</do-it><do-it>	root := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)		usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><remove-selector><class-id>RegistrarVenta</class-id> <selector>initialize</selector></remove-selector><do-it>RegistrarVenta organization removeCategory: #'initialize-release'</do-it><comment><class-id>RegistrarVenta</class-id><body>RegistrarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><do-it>root := ArtificialTreeItemHolder	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>root := ArtificialTreeItemHolder	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>ui := TreeSelectionModule new.ui open.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 12, 2017' '2:38:31 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 2:38:31 on 12 de enero de 2017."</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (TreeModel on: root displayRoot: false)).	self rp.	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (TreeModel on: root displayRoot: false)).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root displayRoot: false))).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root displayRoot: true))).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root displayRoot: true))).	"setSelectionIndex: 1; updateModel."</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root displayRoot: true))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: listaCategorias displayRoot: true))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root displayRoot: true))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: (SelectionInTree new list: (TreeModel on: root displayRoot: false))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: (SelectionInTree new tree: (TreeModel on: root displayRoot: false))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: (SelectionInTree new treeHolder: root)).	"setSelectionIndex: 1; updateModel.		((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria)	"</body></methods><do-it>ui := TreeSelectionModule new.ui open.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>root := ArtificialTreeItemHolder	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>(ui widgetAt: #treeList) model value: (TreeModel new).</do-it><do-it>(ui widgetAt: #treeList) model value.</do-it><do-it>root := ArtificialTreeItemHolder	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>tre := (ui widgetAt: #treeList).</do-it><do-it>ui setupTreeHolder.</do-it><do-it>tre updateModel.</do-it><do-it>root := ArtificialTreeItemHolder	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>ui	rootHolder: root.</do-it><do-it>ui	showRoot: false.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>tre updateModel.</do-it><do-it>tre updateModel.</do-it><do-it>tre updateModel.</do-it><do-it>tre updateModel.</do-it><do-it>root := ArtificialTreeItemHolder	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingIndirectRelation: [:a :b | b includesBehavior: a].</do-it><do-it>ui	rootHolder: root.ui	showRoot: false.</do-it><do-it>tre updateModel.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui := TreeSelectionModule new.</do-it><do-it>ui	rootHolder: root.</do-it><do-it>ui	showRoot: false.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui setupTreeHolder.</do-it><do-it>(TreeModel on: root displayRoot: false)</do-it><do-it>(TreeModel on: root displayRoot: true)</do-it><do-it>(TreeModel on: root displayRoot: false).</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui setupTreeHolder.</do-it><methods><class-id>Tools.TreeSelectionModule class</class-id> <category>interface specs</category><body package="Tools-Modules" selector="specWithScrollbar">specWithScrollbar	"Tools.UIPainter new openOnClass: self andSelector: #specWithScrollbar"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 815 297 1139 620 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #treeList 					#flags: 15 					#model: #treeHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #listDoubleClicked ) 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #other 					#iconSelectors: #(#icon ) ) ) ) )</body></methods><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.ui setupTreeHolder.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>tre := (ui widgetAt: #treeList).</do-it><do-it>tre updateModel.</do-it><do-it>tre updateModel.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.ui setupTreeHolder.</do-it><do-it>root := ArtificialTreeItemHolder 	hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: UI.Model)	usingDirectRelation: [:a :b | a subclasses includes: b].ui := TreeSelectionModule new.ui	rootHolder: root.ui	showRoot: false.ui open.ui setupTreeHolder.</do-it><component-created><name>Arbor Help System Widget Help Core</name> <type>package</type></component-created><parcel-loaded><name>Arbor Help System Widget Help Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'HelpSystemWidgetHelpCore.pcl'))</filename></parcel-loaded><component-created><name>Arbor Help System Core</name> <type>package</type></component-created><parcel-loaded><name>Arbor Help System Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'HelpSystemCore.pcl'))</filename></parcel-loaded><component-created><name>Arbor Hypertext</name> <type>package</type></component-created><parcel-loaded><name>Arbor Hypertext</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'Hypertext.pcl'))</filename></parcel-loaded><component-created><name>Arbor Help System Outline Help Core</name> <type>package</type></component-created><parcel-loaded><name>Arbor Help System Outline Help Core</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'HelpSystemOutlineHelpCore.pcl'))</filename></parcel-loaded><component-created><name>VWHelp</name> <type>package</type></component-created><parcel-loaded><name>VWHelp</name> <filename>(OS.PortableFilename fromComponents: #('$(VISUALWORKS)' 'parcels' 'VWHelp.pcl'))</filename></parcel-loaded><component-created><name>Table1-Example</name> <type>package</type></component-created><parcel-loaded><name>Table1-Example</name> <filename>(OS.LogicalFilename fromComponents: #('/' 'home' 'diego' 'vw8.1.1pul' 'examples' 'Table1.pcl'))</filename></parcel-loaded><component-created><name>Table3-Example</name> <type>package</type></component-created><parcel-loaded><name>Table3-Example</name> <filename>(OS.LogicalFilename fromComponents: #('/' 'home' 'diego' 'vw8.1.1pul' 'examples' 'Table3.pcl'))</filename></parcel-loaded><component-created><name>List1-Example</name> <type>package</type></component-created><parcel-loaded><name>List1-Example</name> <filename>(OS.LogicalFilename fromComponents: #('/' 'home' 'diego' 'vw8.1.1pul' 'examples' 'List1.pcl'))</filename></parcel-loaded><do-it>HelpBrowser open.</do-it><do-it>HelpBrowser open.</do-it><do-it>HelpBrowser open.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 620 182 1260 662 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #rowLabelsAsButtons false #showHorizontalLines true #allowColumnResizing true #showVerticalLines true ) 					#layout: #(#{Graphics.LayoutFrame} 58 0 75 0 569 0 307 0 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 30 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 58 0 75 0 569 0 307 0 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 30 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><do-it>IncrementalSearchDialog exampleRequest.</do-it><do-it>IncrementalSearchDialog exampleRequest.</do-it><do-it>IncrementalSearchDialog exampleRequestWithFilter.</do-it><do-it>Table1Example new open.</do-it><do-it>HelpBrowser open storeString.</do-it><do-it>HelpBrowser open storeString.</do-it><do-it>HelpBrowser open storeString.</do-it><do-it>HelpBrowser open storeString.</do-it><do-it>object := #(4 234 234).serialized := object storeString.(Compiler evaluate: serialized).</do-it><do-it>object := #(4 234 234).serialized := object storeString.</do-it><do-it>serialized := admin listaCategorias storeString.</do-it><do-it>serialized := admin listaCategorias storeString.</do-it><do-it>serialized := admin listaArticulos storeString.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	elementos := #().	diccionario := Dictionary new	at: 'listaArticulos' put: listaArticulos.</body></methods><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	elementos := #('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos').	diccionario := Dictionary new	at: 'listaArticulos' put: listaArticulos.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	diccionario := Dictionary new	at: 'listaArticulos' put: listaArticulos.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString)	].	diccionario := Dictionary new	at: 'listaArticulos' put: listaArticulos.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString)		diccionario at: 'listaArticulos' put: listaArticulos.	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: 'listaArticulos' put: listaArticulos.	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: x.	].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 12, 2017' '5:03:31 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 5:03:31 on 12 de enero de 2017."</do-it><do-it>admin := ProyectoFinal new.</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: x.	].	Transcript show: (diccionario storeString).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (x attribute).	].	Transcript show: (diccionario storeString).</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (self attribute x).	].	Transcript show: (diccionario storeString).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (self instVarNamed: x).	].	Transcript show: (diccionario storeString).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #(listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos).	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	Transcript show: (diccionario storeString).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|elementos diccionario|	diccionario := Dictionary new.	elementos := #('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos').	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	Transcript show: (diccionario storeString).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="InformacionSerializada">InformacionSerializada	|elementos diccionario|	diccionario := Dictionary new.	elementos := #('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos').	elementos do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	^diccionario storeString.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="InformacionSerializada">InformacionSerializada	|elementos diccionario|	diccionario := Dictionary new.	elementos := #('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos').	elementos do: [:x|		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	^diccionario storeString.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="InformacionSerializada">InformacionSerializada	|elementos diccionario|	diccionario := Dictionary new.	(self atributosASerializar) do: [:x|		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	^diccionario storeString.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="InformacionSerializada">InformacionSerializada	|diccionario|	diccionario := Dictionary new.	(self atributosASerializar) do: [:x|		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	^diccionario storeString.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="atributosASerializar">atributosASerializar	^#('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos').</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="atributosASerializar">atributosASerializar	^#('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos')</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	|diccionario|	diccionario := Dictionary new.	self atributosASerializar do: [:x|		Transcript show: (x asString).		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	Transcript show: (diccionario storeString).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	self informacionSerializada</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarInformacionAlDisco">guardarInformacionAlDisco	self informacionSerializada.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="informacionSerializada">informacionSerializada	|diccionario|	diccionario := Dictionary new.	(self atributosASerializar) do: [:x|		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	^diccionario storeString.</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>InformacionSerializada</selector></remove-selector><do-it>FileDialog openFileExample.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrir">abrir	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [dialog selection]		ifFalse: [nil]</body></methods><do-it>admin := ProyectoFinal new.</do-it><do-it>ProyectoFinal organization addCategory: #accessing</do-it><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarDestinoDeGuardado">cambiarDestinoDeGuardado	| dialog |	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'Smalltalk source (*.st)' pattern: '*.st';		addFileFilter: 'Workspace (*.ws)' pattern: '*.ws';		addFilterForAllFiles;		fileCondition: #new;		defaultFilename: 'archivoDestino'.	^dialog select</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>atributosASerializar</selector></remove-selector><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="atributosASerializar">atributosASerializar	^#('listaPersonas' 'listaUsuarios' 'listaRoles' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos')</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="informacionSerializada">informacionSerializada	|diccionario|	diccionario := Dictionary new.	(self class atributosASerializar) do: [:x|		diccionario at: (x asString) put: (self instVarNamed: (x asString)).	].	^diccionario storeString.</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>usuario</selector></remove-selector><remove-selector><class-id>ProyectoFinal</class-id> <selector>usuario:</selector></remove-selector><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaRoles listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal archivoGuardado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="archivoGuardado">archivoGuardado	^archivoGuardado</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="archivoGuardado:">archivoGuardado: anObject	archivoGuardado := anObject</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>archivoGuardado:</selector></remove-selector><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrir">abrir	admin abrirDesdeArchivo.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [dialog selection]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [archivoGuardado := (dialog selection)]		ifFalse: [nil]</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>guardarInformacionAlDisco</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	"guardar al archivo: archivoGuardado"	self informacionSerializada.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	"guardar al archivo: archivoGuardado la informacion serializada: self informacionSerializada."</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	"guardar al archivo:	archivoGuardado	la informacion serializada:	self informacionSerializada."</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarDestinoDeGuardado">cambiarDestinoDeGuardado	| dialog |	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'Smalltalk source (*.st)' pattern: '*.st';		addFileFilter: 'Workspace (*.ws)' pattern: '*.ws';		addFilterForAllFiles;		fileCondition: #new;		defaultFilename: 'archivoDestino'.	^archivoGuardado := dialog select</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>cargarInformacionDelDisco</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self initializeUI.	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarDestinoDeGuardado">cambiarDestinoDeGuardado	| dialog |	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		fileCondition: #new;		defaultFilename: 'archivoDestino'.	^archivoGuardado := dialog select</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarDestinoDeGuardado">cambiarDestinoDeGuardado	| dialog |	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		fileCondition: #new;		defaultFilename: archivoGuardado.	^archivoGuardado := dialog select</body></methods><do-it>(Compiler evaluate: serialized).</do-it><do-it>(Compiler evaluate: serialized).</do-it><do-it>serialized := admin listaArticulos storeString.</do-it><do-it>(Compiler evaluate: serialized).</do-it><do-it>admin informacionSerializada.</do-it><do-it>serialized := (admin informacionSerializada).</do-it><do-it>(Compiler evaluate: serialized).</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	(Compiler evaluate: 'archivoGuardado open').</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [			archivoGuardado := (dialog selection).			self cargarArchivo.			archivoGuardado.		]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [			archivoGuardado := (dialog selection).			self cargarArchivo.			archivoGuardado		]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [ archivoGuardado := (dialog selection). self cargarArchivo. archivoGuardado]		ifFalse: [nil]</body></methods><do-it>admin := ProyectoFinal new.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>archivoGuardado</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>archivoGuardado</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>admin archivoGuardado contentsOfEntireFile</do-it><do-it>serialized := (admin informacionSerializada).</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	Compiler evaluate: (archivoGuardado contentsOfEntireFile).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|informacionSerializada|	informacionSerializada := Compiler evaluate: (archivoGuardado contentsOfEntireFile).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|informacionSerializada|	informacionSerializada := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	diccionario do: [:x|		self instVarNamed: (x key) put: (x value)	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	diccionario do: [:x| self instVarNamed: (x key) put: (x value)].</body></methods><do-it>serialized := (admin informacionSerializada).</do-it><do-it>admin archivoGuardado</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado readWriteStream.</do-it><do-it>admin archivoGuardado readWriteStream reset.</do-it><do-it>admin archivoGuardado readWriteStream reset.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado readWriteStream reset.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado readWriteStream reset.</do-it><do-it>admin archivoGuardado readWriteStream reset.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dsadasdasd</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dsadasdasd</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>admin archivoGuardado readWriteStream reset.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado readWriteStream reset.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dsadasdasdadasda</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dsadasdasdadasda</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>admin archivoGuardado readWriteStream reset.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada printOn: archivoGuardado.	"guardar al archivo:	archivoGuardado	la informacion serializada:	self informacionSerializada."</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada printOn: (archivoGuardado writeStrieam).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada printOn: (archivoGuardado writeStream).</body></methods><do-it>admin guardarAlArchivo.</do-it><do-it>admin informacionSerializada.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada printOn: (archivoGuardado).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada printOn: (archivoGuardado writeStream).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	archivoGuardado setWritable: true.	diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	diccionario do: [:x| self instVarNamed: (x key) put: (x value)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	diccionario do: [:x| self instVarNamed: (x key) put: (x value)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [ archivoGuardado := (dialog selection) setWritable: true. self cargarArchivo . archivoGuardado]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [ (archivoGuardado := (dialog selection)) setWritable: true. self cargarArchivo . archivoGuardado]		ifFalse: [nil]</body></methods><do-it>admin guardarAlArchivo.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>admin guardarAlArchivo.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada asString printOn: (archivoGuardado writeStream).</body></methods><do-it>admin guardarAlArchivo.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada asString printOn: (archivoGuardado readWriteStream).</body></methods><do-it>admin guardarAlArchivo.</do-it><do-it>Transcript cr</do-it><do-it>Transcript cr</do-it><do-it>Transcript show: (admin informacionSerializada).</do-it><do-it>dict := Dictionary new.</do-it><do-it>dict at: 'dasd' put: 4322423.</do-it><do-it>dict do: [:x| Transcript show: (x storeString) ].</do-it><do-it>dict associations.</do-it><do-it>dict associationsDo: [:x| Transcript show: (x storeString) ]</do-it><do-it>dict associationsDo: [:x| Transcript show: x key ].</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	diccionario associationsDo: [:x| self instVarNamed: (x key) put: (x value)].</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="guardar">guardar	admin guardarAlArchivo.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="guardarComo">guardarComo	admin cambiarDestinoDeGuardado.	admin guardarAlArchivo.</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := '/tmp' asFilename.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self initializeUI.	^self</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := 'info.ipf' asFilename.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self initializeUI.	^self</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	self informacionSerializada asString printOn: (archivoGuardado writeStream).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream.	"	self informacionSerializada asString printOn: ().	"</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream on: 'adsdasd'.	"	self informacionSerializada asString printOn: ().	"</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream nextPutAll: (self informacionSerializada).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream nextPutAll: 'dasdasd'.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream nextPutAll: (self informacionSerializada).</body></methods><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado writeStream nextPut: 23.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado writeStream nextPut: 23.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado</do-it><do-it>admin archivoGuardado</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>ReadStream on: 'dassdasd'</do-it><do-it>admin archivoGuardado writeStream stream: (ReadStream on: 'dassdasd').</do-it><do-it>admin archivoGuardado writeStream contents.</do-it><do-it>admin archivoGuardado writeStream contents.</do-it><do-it>admin archivoGuardado writeStream cr.</do-it><do-it>admin archivoGuardado writeStream cr.</do-it><do-it>admin archivoGuardado writeStream cr.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws.</do-it><do-it>ws.</do-it><do-it>ws cr.</do-it><do-it>ws nextPut: 42342.</do-it><do-it>ws nextPut: Character cr.</do-it><do-it>ws nextPut: 4.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws nextPut: 4.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws := admin archivoGuardado readAppendStream.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws nextPutAll: '4dasdad'.</do-it><do-it>ws := admin archivoGuardado readAppendStream.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>e</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws nextPutAll: '4dasdadasdad'.</do-it><do-it>ws stream: '4dasdadasdad'.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>ws nextPutAll: #(324234).</do-it><do-it>ws nextPutAll: #(324234 4234 4234).</do-it><do-it>ws nextPutAll: #(324234 4234 4234).</do-it><do-it>ws nextPutAll: #(324234 4234 4234).</do-it><do-it>ws nextPutAll: #(324234 4234 4234).</do-it><do-it>ws nextPutAll: #(324234 4234 4234).</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws reset.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'dasdasdasd'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>ws reset.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws := admin archivoGuardado readWriteStream.</do-it><do-it>ws reset.</do-it><do-it>ws nextPutAll: 'la puta madre'.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado contentsOfEntireFile.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws := admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readAppendStream nextPutAll: 'la puta madre'.</do-it><do-it>ws := admin archivoGuardado readAppendStream nextPutAll: 'la puta madre'.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>ws := admin archivoGuardado readAppendStream nextPutAll: 'la puta madre'.</do-it><do-it>admin guardarAlArchivo.</do-it><do-it>ws := admin archivoGuardado readAppendStream nextPutAll: 'la puta madre'.</do-it><do-it>admin archivoGuardado.</do-it><do-it>admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado writeStream isText.</do-it><do-it>admin archivoGuardado writeStream nextPutAll: 'la puta madre'.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str nextPutAll: 'la puta madre'.</do-it><do-it>str nextPutAll: 'l'.</do-it><do-it>str nextPut: Character cr.</do-it><do-it>str nextPut: Character cr.</do-it><do-it>str nextPut: Character cr.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str text.</do-it><do-it>str nextPut: Character cr.</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str isText.</do-it><do-it>sc := WriteStream on: str.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str text.</do-it><do-it>sc := WriteStream on: str.</do-it><do-it>sc := WriteStream on: (admin archivoGuardado).</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>str isText.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>admin archivoGuardado setWritable: true.</do-it><do-it>str text.</do-it><do-it>str isText.</do-it><do-it>sc := WriteStream on: (admin archivoGuardado writeStream).</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>sc := ExternalStream on: (admin archivoGuardado writeStream).</do-it><do-it>ws := WriteStream on: 'dasdas'.</do-it><do-it>ws := WriteStream on: nil.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str writePosition.</do-it><do-it>str cr.</do-it><do-it>str class.</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str writePosition.</do-it><do-it>str writePosition.</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str stream: (WriteStream on: 'dasdasd').</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str isWritable.</do-it><do-it>str := admin archivoGuardado readAppendStream.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str isWritable.</do-it><do-it>str cr.</do-it><do-it>str cr.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str isText.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str text.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str isWritable.</do-it><do-it>str flush.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str flush.</do-it><do-it>str flush.</do-it><do-it>str flush.</do-it><do-it>str flush.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str flush.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str flush.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str flush.</do-it><do-it>str := admin archivoGuardado writeStream.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str nextPutAll: 'adasdas'.</do-it><do-it>str flush.</do-it><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream nextPutAll: (self informacionSerializada); flush.</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := 'info.ipf' asFilename.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self cargarArchivo.	self initializeUI.	^self</body></methods><do-it>admin := ProyectoFinal new.</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|mi|	mi := ModificarItem new.	mi openWindow.	self openInterface: #windowSpec.	mi mainWindow label: (self labelString).	mi claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #windowSpec.	self mainWindow label: (self labelString).	self claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseItem:">claseItem: anObject	claseItem := anObject</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|generalSpec|	generalSpec := (self openInterface: #generalSpec).	self widgetAt: #subCanvas client: self.	self mainWindow label: (self labelString).	self claseItem: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	(self widgetAt: #subCanvas) client: (super open).	self mainWindow label: (self labelString).</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 320 280 ) 			#bounds: #(#{Graphics.Rectangle} 523 244 843 524 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><remove-selector><class-id>ModificarItem class</class-id> <selector>windowSpec</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	((claseItem id) == nil)	ifTrue: [self agregar]	ifFalse: [self actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (self claseSeleccionar) new.	ui := (self asignarAClaseSeleccionar: ui).	ui open.	super closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	(id == nil)	ifTrue: [self agregar]	ifFalse: [self actualizar].	self closeRequest.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>claseItem</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>claseItem</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ModificarItem</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id claseSeleccionar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><remove-selector><class-id>ModificarItem</class-id> <selector>claseItem:</selector></remove-selector><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 320 280 ) 			#bounds: #(#{Graphics.Rectangle} 523 244 843 524 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	(self widgetAt: #subCanvas) client: (super open).</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	(self widgetAt: #subCanvas) client: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	self subCanvas client: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="subCanvas">subCanvas	^(self widgetAt: #subCanvas)</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>subCanvas</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvas">subCanvas	^(self widgetAt: #subCanvas)</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((self subCanvas widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	(self widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><do-it>ModificarArticulo new subCanvas.</do-it><do-it>ut subCanvas.</do-it><do-it>ut subCanvas components.</do-it><do-it>ut subCanvas.</do-it><class><name>ModificarItem</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id subCanvas claseSeleccionar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvas1">subCanvas1	^subCanvas</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvas:">subCanvas: anObject	subCanvas := anObject</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>subCanvas:</selector></remove-selector><remove-selector><class-id>ModificarItem</class-id> <selector>subCanvas</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvas">subCanvas	^subCanvas</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>subCanvas1</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := (self widgetAt: #subCanvas) client: self.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	(subCanvas widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) isVisible: true.	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	((subCanvas widgetAt: #categoria) model: (ValueHolder with: listaCategorias)).	(subCanvas widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(subCanvas widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	(subCanvas widgetAt: #categoria) model: (ValueHolder with: listaCategorias).	(subCanvas widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(subCanvas widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><do-it>ut := ModificarArticulo new.</do-it><do-it>ut subCanvas.</do-it><do-it>ut subCanvas.</do-it><do-it>ut := ModificarArticulo new.</do-it><do-it>ut := ModificarArticulo new.</do-it><do-it>ut subCanvas.</do-it><do-it>(ut widgetAt: #subCanvas).</do-it><do-it>(ut widgetAt: #subCanvas) layoutManager.</do-it><do-it>(ut widgetAt: #subCanvas) baseline.</do-it><do-it>(ut widgetAt: #subCanvas) components.</do-it><do-it>ut subCanvas.</do-it><do-it>sc := ut subCanvas window.</do-it><do-it>sc := ut subCanvas source.</do-it><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self) source.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	(self widgetAt: #subCanvas) client: self.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>subCanvas</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>subCanvas</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ModificarItem</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id claseSeleccionar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><comment><class-id>ModificarItem</class-id><body>ModificarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	id	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idasdasd</body></comment><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	self subCanvas client: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvas">subCanvas	^(self widgetAt: #subCanvas)</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvasSource">subCanvasSource	^(self widgetAt: #subCanvas) source</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	(self subCanvasSource widgetAt: #categoria) model: (ValueHolder with: listaCategorias).	(self subCanvasSource widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(self subCanvasSource widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><do-it>admin := ProyectoFinal new.</do-it><class><name>ModificarItem</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id subCanvas claseSeleccionar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvas">subCanvas	^subCanvas</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvasSource">subCanvasSource	^self subCanvas source</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := (self widgetAt: #subCanvas) client: self.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).</body></methods><do-it>ut := ModificarArticulo new.</do-it><do-it>sc := ut subCanvas source.</do-it><do-it>sc widgetAt: #categoria.</do-it><do-it>sc widgetAt: #tipo.</do-it><remove-selector><class-id>ModificarItem</class-id> <selector>subCanvasSource</selector></remove-selector><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	(self subCanvas componentAt: #categoria) model: (ValueHolder with: listaCategorias).	(self subCanvasSource widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(self subCanvasSource widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><do-it>ut := ModificarArticulo new.</do-it><do-it>ut := ModificarArticulo new.</do-it><do-it>sc := ut subCanvas.</do-it><do-it>sc componentAt: #tipo.</do-it><do-it>sc componentAt: #tipo.</do-it><do-it>(sc componentAt: #tipo) widget.</do-it><methods><class-id>ModificarArticulo</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent</body></methods><methods><class-id>ModificarArticulo</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(self subCanvas componentAt: aComponent) widget	]</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	(self widgetAt: #categoria) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoria) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) isVisible: true.	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 272 0 155 0 302 0 177 0 ) 					#name: #categoriaPadreFuturo 					#flags: 29 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><do-it>ut := ModificarCategoria new.</do-it><do-it>ut widgetAt: #categoriaPadre.</do-it><do-it>ut := ModificarCategoria new.</do-it><do-it>ut subCanvas.</do-it><do-it>ut subCanvas.</do-it><do-it>ut subCanvas componentAt: #categoriaPadre.</do-it><do-it>(ut subCanvas componentAt: #categoriaPadre) widget.</do-it><do-it>(ut subCanvas componentAt: #categoriaPadre) widget model.</do-it><do-it>ut widgetAt: #categoriaPadre.</do-it><remove-selector><class-id>ModificarArticulo</class-id> <selector>widgetAt:</selector></remove-selector><do-it>ModificarArticulo organization removeCategory: #'view accessing'</do-it><methods><class-id>ModificarItem</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(self subCanvas componentAt: aComponent) widget	]</body></methods><do-it>admin := ProyectoFinal new.</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface closing</category><body package="ProyectoFinal" selector="closeRequest">closeRequest	|ui|	ui := (self claseSeleccionar) new.	ui admin: (claseItem admin).	ui idArticulo: (claseItem idArticulo).	ui open.	super closeRequest.</body></methods><remove-selector><class-id>ModificarParametroGeneralArticulo</class-id> <selector>closeRequest</selector></remove-selector><do-it>ModificarParametroGeneralArticulo organization removeCategory: #'interface closing'</do-it><do-it>admin := ProyectoFinal new.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="guardarComo">guardarComo	admin guardarComo.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>controlling</category><body package="ProyectoFinal" selector="guardarComo">guardarComo	self cambiarDestinoDeGuardado.	self guardarAlArchivo.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="open">open	guiMenuPrincipal open.</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>initializeUI</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := 'info.ipf' asFilename.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self cargarArchivo.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaRoles := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := 'info.ipf' asFilename.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self cargarArchivo.	^self</body></methods><remove-selector><class-id>MenuPrincipal</class-id> <selector>administrarClientes</selector></remove-selector><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarUsuarios">administrarUsuarios	self abrirInterfaz: SeleccionarUsuario.</body></methods><remove-selector><class-id>MenuPrincipal</class-id> <selector>administrarRoles</selector></remove-selector><remove-selector><class-id>MenuPrincipal</class-id> <selector>administrarVendedores</selector></remove-selector><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarUsuarios">administrarUsuarios	self abrirInterfaz: SeleccionarUsuario.</body></methods><remove-selector><class-id>MenuPrincipal</class-id> <selector>administrarAdministradores</selector></remove-selector><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cerrar' 							#value: #closeRequest ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal new.</do-it><do-it>admin := ProyectoFinal new. admin open.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="abrirUI">abrirUI	guiMenuPrincipal open.</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>open</selector></remove-selector><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="auto">auto	|pf|	pf:=self new.	pf abrirUI.	^pf</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 12, 2017' '10:59:00 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 10:59:00 on 12 de enero de 2017."</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: listaCategorias).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: listaCategorias).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model value: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: root).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 321 0 182 0 ) 					#name: #categoriaPadre2 					#flags: 29 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 321 0 182 0 ) 					#name: #categoriaPadre2 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 302 0 183 0 ) 					#name: #categoriaPadre2 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (TreeModel on: root)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root))).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #eliminarArticulo: under: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #agregarArticulo: under: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #listaArticulos under: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #listaCategorias under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #listaCategoriasSinRaiz under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #listaCategoriasSinRaiz under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #listaCategorias under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #modificarCategoria:por: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #perteneceALaCategoria:a: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #nombreConFormatoCategoria: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #hijosDeLaCategoria: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #eliminarCategoria: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #buscarCategoriaPadrePorIdCategoria: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #buscarArticulosPorCategoria: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #categorias</do-it><do-it>ProyectoFinal classifySymbol: #agregarCategoria: under: #categorias</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #buscarArticuloPorId: under: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #modificarArticulo:por: under: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #listaParametrosGenerales under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #listaParametrosGeneralesDelArticulo: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #buscarParametroGeneral:delArticulo: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #buscarParametroGeneralPorId: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #buscarParametrosGeneralesDelArticulo: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #eliminarParametroGeneral: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #eliminarParametroGeneralArticuloConId:delArticulo: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #modificarParametroGeneral:delArticulo:por: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #modificarParametroGeneral:por: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #agregarParametroGeneral: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #parametros</do-it><do-it>ProyectoFinal classifySymbol: #agregarParametroGeneralArticulo: under: #parametros</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #listaUsuarios under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #listaUsuarios: under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #listaPersonas under: #personas</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>listaRoles</selector></remove-selector><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #modificarPersona:por: under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #eliminarPersona: under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #buscarPersonaPorId: under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #agregarPersona: under: #personas</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>agregarRol:</selector></remove-selector><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #buscarVentasPorVendedor: under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #buscarVentasPorCliente: under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #agregarVenta: under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #calificarAlVendedorEnLaVenta:con: under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #calificarAlClienteEnLaVenta:con: under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #listaVentas under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #archivoGuardado under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #cambiarDestinoDeGuardado under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #autoIncrementoLista:delParametro: under: #general</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>eliminarRol:</selector></remove-selector><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #abrirDesdeArchivo under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #informacionSerializada under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #guardarComo under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #guardarAlArchivo under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #cargarArchivo under: #general</do-it><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #buscarCategoriaPorId: under: #general</do-it><do-it>ProyectoFinal organization removeCategory: #controlling</do-it><do-it>ProyectoFinal organization removeCategory: #accessing</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #buscarArticulosPorCategoria: under: #articulos</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>listaUsuarios:</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="agregarUsuario:">agregarUsuario: unUsuario	listaUsuarios add: unUsuario.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="eliminarUsuario:">eliminarUsuario: unId	listaUsuarios removeAllSuchThat: [:x| unId = (x idUsuario)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="modificarUsuario:por:">modificarUsuario: unId por: unObjeto	listaPersonas:= (listaPersonas collect: [:x|		((x idUsuario) = unId)			ifTrue: [unObjeto]			ifFalse: [x].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="buscarUsuarioPorId:">buscarUsuarioPorId: unId	^(listaUsuarios detect: [:e| (e idUsuario) = unId ] ifNone: []).</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 58 0 75 0 569 0 307 0 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 58 0 75 0 569 0 307 0 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#label: 'Nombre del artículo'							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true ) 					#layout: #(#{Graphics.LayoutFrame} 58 0 75 0 569 0 307 0 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#label: 'Nombre del artículo'							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#labelIsImage: false 							#label: 'Precio'							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><do-it>RegistrarVenta new open.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 677 155 1317 635 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true #rowSize 24 ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -32 1 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#label: 'Nombre del artículo' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#label: 'Precio' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 677 155 1317 635 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true #rowSize 24 ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -32 1 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#label: 'Nombre del artículo' 							#labelIsImage: false 							#width: 256 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#label: 'Precio' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><do-it>RegistrarVenta new open.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 677 155 1317 635 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #rowLabelsAsButtons false #allowColumnReordering true #rowSize 24 ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -32 1 ) 					#name: #tablaArticulos 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#label: 'Nombre del artículo' 							#labelIsImage: false 							#width: 256 							#editorType: #InputField 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#label: 'Precio' 							#labelIsImage: false 							#width: 120 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><do-it>RegistrarVenta new open.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: listaCategorias				childAccessor: #allSubclasses				childNameAccessor: #name.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: listaCategorias				childBlock: #allSubclasses				childNameBlock: #name.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: listaCategorias				childBlock: [:a : b| ]				childNameBlock: #name.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: listaCategorias				childBlock: [:a :b| ]				childNameBlock: #name.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: listaCategorias				childBlock: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ]				childNameBlock: [:x| x value ].	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ]				childNameBlock: [:x| x value ].	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x value ].	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (SelectionInTree new treeHolder: (TreeModel on: root displayRoot: false))).	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias root theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: theList).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: theList).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: theList.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (TreeModel on: theList)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><do-it>	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 12, 2017' '6:52:41 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:52:41 on 12 de enero de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 12, 2017' '6:52:59 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:52:59 on 12 de enero de 2017."</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (SelectionInListSortAware with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (TreeModel on: theList)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (SelectionInList with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (TreeModel on: theList)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: (SelectionInList with: listaCategorias)).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (TreeModel on: theList)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].		(self widgetAt: #categoriaPadre2) model: (ValueHolder with: (TreeModel on: theList)).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="selectionInList">selectionInList	|theList|	super open.	theList := IndentedTreeSelectionInList				listObjectHierarchy: (admin listaCategorias)				childBlock: [:x| (admin hijosDeLaCategoria: x) ]				childNameBlock: [:x| x nombre ].</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="selectionInList">selectionInList	|theList|	super open.	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifFalse: [treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifFalse: [treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNone: [treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNotNil: [treeHolder]</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#model: #treeHolder 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 302 0 183 0 ) 					#name: #categoriaPadre2 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><remove-selector><class-id>ModificarCategoria</class-id> <selector>selectionInList</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := TreeSelectionInList new.	] ifNotNil: [treeHolder]</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 302 0 183 0 ) 					#name: #categoriaPadre2 					#model: #treeHolder 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNotNil: [treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList new.		"			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].		"	] ifNotNil: [treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := TreeSelectionInList new.		"			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].		"	] ifNotNil: [treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.		"			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].		"	] ifNotNil: [treeHolder]</body></methods><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><do-it>ModificarCategoria organization addCategory: #'initialize-release'</do-it><methods><class-id>ModificarCategoria</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initiaize">initiaize	super initialize.	treeHolder := nil.</body></methods><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolderIndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name."	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNotNil: [treeHolder]"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	IndentedTreeSelectionInList		listObjectHierarchy: Object		childAccessor: #allSubclasses		childNameAccessor: #name."	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNotNil: [treeHolder]"</body></methods><do-it>mc treeHolder.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="treeHolderE">treeHolderE	IndentedTreeSelectionInList		listObjectHierarchy: Object		childAccessor: #allSubclasses		childNameAccessor: #name."	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNotNil: [treeHolder]"</body></methods><do-it>mc treeHolderE.</do-it><do-it>mc := ModificarCategoria new.</do-it><do-it>mc treeHolderE.</do-it><do-it>mc treeHolderE.</do-it><remove-selector><class-id>ModificarCategoria</class-id> <selector>treeHolderE</selector></remove-selector><do-it>mc treeHolder.</do-it><class><name>ModificarItem</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id subCanvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><do-it>mc claseSeleccionar.</do-it><remove-selector><class-id>ModificarCategoria</class-id> <selector>initiaize</selector></remove-selector><do-it>ModificarCategoria organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>ModificarCategoria</class-id> <selector>treeHolder</selector></remove-selector><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	IndentedTreeSelectionInList		listObjectHierarchy: Object		childAccessor: #allSubclasses		childNameAccessor: #name."	treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.			listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	] ifNotNil: [treeHolder]"</body></methods><do-it>mc treeHolder.</do-it><do-it>mc := ModificarCategoria new.</do-it><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.	] ifNotNil: [treeHolder]	"		listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	"</body></methods><do-it>mc treeHolder.</do-it><do-it>mc := ModificarCategoria new.</do-it><do-it>mc treeHolder.</do-it><do-it>mc treeHolder.</do-it><do-it>mc := ModificarCategoria new.</do-it><do-it>mc treeHolder.</do-it><do-it>mc claseSeleccionar.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias theList|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList new.	] ifNotNil: [treeHolder]	"		listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 302 0 183 0 ) 					#name: #categoriaPadre2 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 805 305 1125 495 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 156 0 129 0 302 0 183 0 ) 					#name: #categoriaPadre2 					#model: #treeHolder 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^nil"treeHolder ifNil: [		treeHolder := IndentedTreeSelectionInList new.	] ifNotNil: [treeHolder]"	"		listObjectHierarchy: (admin listaCategorias)			childBlock: [:x| (admin hijosDeLaCategoria: x) ]			childNameBlock: [:x| x nombre ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new]		ifFalse:			[treeHolder]</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	treeHolder list: IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name.	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	treeHolder list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	"	root := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) = ((admin buscarCategoriaPorId: (a key)) idCategoria) ].	"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	treeHolder list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias rootHolder model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	rootHolder := (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	model := TreeModel on: rootHolder displayRoot: false.	self treeHolder list: model</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias rootHolder model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	rootHolder := (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	model := TreeModel on: rootHolder displayRoot: false.	self treeHolder list: rootHolder.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias rootHolder model|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	rootHolder := (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	self treeHolder list: rootHolder.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias rootHolder model|	rootHolder := (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	self treeHolder list: rootHolder.	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias rootHolder|	rootHolder := (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	self treeHolder list: rootHolder.	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias rootHolder|	treeHolder := (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).	self treeHolder list: rootHolder.	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new				treeHolder list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).			treeHolder.			]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new				treeHolder list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).				treeHolder.			]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new.				treeHolder list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).				treeHolder.			]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).				treeHolder.			]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new.				treeHolder list: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).				treeHolder.			]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new.				treeHolder listHolder: (IndentedTreeSelectionInList				listObjectHierarchy: Object				childAccessor: #allSubclasses				childNameAccessor: #name).				treeHolder.			]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new.]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="treeHolder">treeHolder	^treeHolder isNil		ifTrue:			[treeHolder := SelectionInTree new]		ifFalse:			[treeHolder]</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self folderTreeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | item subgroups]).	self folderTreeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | item subgroups])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | (admin hijosDeLaCategoria: (item key))])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | listaCategorias collect: [:x|					(admin hijosDeLaCategoria: (item key)) detect: [:h| (x key) = (h idCategoria)]				]			])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | "listaCategorias collect: [:x|					(admin hijosDeLaCategoria: (item key)) detect: [:h| (x key) = (h idCategoria)]				]"				Transcript show: (item storeString).				#()			])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | listaCategorias collect: [:x|					(admin hijosDeLaCategoria: (item value)) detect: [:h| (x key) = (h idCategoria)]				]			])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list:		(TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | listaCategorias collect: [:x|					(admin hijosDeLaCategoria: (item value)) detect: [:h| (x value) = (h idCategoria)]				]			])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list: (TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | listaCategorias collect: [:x| (admin hijosDeLaCategoria: (item value)) detect: [:h| (x value) = (h idCategoria)] ] ])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list: (TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item | listaCategorias collect: [:x| (admin hijosDeLaCategoria: (item value)) detect: [:h| (x value) = (h idCategoria)]]])."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list: (TreeModel 			on: listaCategorias			displayRoot: false 			childrenWith: [:item |				listaCategorias collect: [:x|					(admin hijosDeLaCategoria: (item value)) detect: [:h|						(x value) = (h idCategoria)					]				]			]		)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list: (TreeModel 		on: listaCategorias		displayRoot: false 		childrenWith: [:item |			listaCategorias collect: [:x|				(admin hijosDeLaCategoria: (item value)) detect: [:h|					(x value) = (h idCategoria)				]			]		]	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>ParcelFavoritesTool new open.</do-it><do-it>ParcelFavoritesTool new	manager: ParcelManager;	open.</do-it><do-it>ParcelFavoritesTool new	manager: (ParcelManager new);	open.</do-it><do-it>ParcelFavoritesTool new	manager: (ParcelManager new);	open.</do-it><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	self guardar.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	super executeAutoSave.	self guardar.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	|ui|	super executeAutoSave.	ui := (self claseSeleccionar) new.	ui := (self asignarAClaseSeleccionar: ui).	ui open.</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>closeRequest</selector></remove-selector><do-it>ModificarItem organization removeCategory: #'interface closing'</do-it><do-it>admin := ProyectoFinal auto.</do-it><remove-selector><class-id>MenuPrincipal</class-id> <selector>closeRequest</selector></remove-selector><do-it>MenuPrincipal organization removeCategory: #'interface closing'</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} nil ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>ToolbarIconLibrary new getImageAt: #abort20x20bw.</do-it><do-it>ToolbarIconLibrary new getImageAt: #abort20x20bw.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #folder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} nil ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #folder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #settings ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #folder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #settings ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #folder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} nil ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #folder ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #saveSystem ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) ) #(3 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar precios' 										#value: #administrarPrecios ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar planes de compra' 										#value: #administrarPlanesDeCompra ) ) #(5 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir base de datos...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar base de datos' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar precios' 										#value: #administrarPrecios ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar planes de compra' 										#value: #administrarPlanesDeCompra ) ) #(5 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar precios' 										#value: #administrarPrecios ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar planes de compra' 										#value: #administrarPlanesDeCompra ) ) #(5 ) nil ) ) ) #(2 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaUsuarios) texto: [:x| 'holis'] valor: [:x| 'y su id'].</body></methods><methods><class-id>SeleccionarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaUsuarios) texto: [:x| 'holis'] valor: [:x| x idUsuario].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := 'info.ipf' asFilename.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self cargarArchivo.	^self</body></methods><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos guiMenuPrincipal archivoGuardado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><comment><class-id>ProyectoFinal</class-id><body>AdminProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	guiMenuPrincipal	&lt;AdminProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(Collection of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: ParametroGeneralArticulo)&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;BundleCompilationResult | Collection | CompositePart | ExpressionGroup | FixedSizeQueue | Group | GroupLayoutManager | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | RunArrayConstructor | Struct | TimedProxyReaper | TopLevelItem | UIBuilder | VisualColumn | VisualRow | VisualStack&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: (Articulo | ParametroGeneralArticulo))&gt;	description of listaPersonas	listaRoles	&lt;Collection&gt;	description of listaRoles	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="atributosASerializar">atributosASerializar	^#('listaPersonas' 'listaUsuarios' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos')</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	archivoGuardado := 'info.ipf' asFilename.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarVentas">administrarVentas	self abrirInterfaz: RegistrarVenta.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 420 80 ) 			#max: #(#{Core.Point} 640 80 ) 			#bounds: #(#{Graphics.Rectangle} 3 26 423 106 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 28 0 ) 					#name: #botonRegistrarVenta 					#model: #agregarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -5 1 25 0.5 ) 					#name: #botonRegistrarCalificacion 					#model: #agregarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 13, 2017' '3:48:39 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 15:48:39 on 13 de enero de 2017."</do-it><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	super executeAutoSave.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><class><name>PlanDeCompra</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>PlanDeCompra</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>PlanDeCompra class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>PlanDeCompra</class-id><body>PlanDeCompra has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><class><name>PlanDeCompra</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPlan nombre cuotas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ProyectoFinal</class-id><body>ProyectoFinal has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	archivoGuardado	&lt;Filename&gt;	description of archivoGuardado	guiMenuPrincipal	&lt;ProyectoFinalUI&gt;	description of guiMenuPrincipal	listaArticulos	&lt;(List of: Articulo)&gt;	description of listaArticulos	listaCategorias	&lt;(List of: Categoria)&gt;	description of listaCategorias	listaParametrosGenerales	&lt;(List of: (ParametroGeneral | ParametroGeneralArticulo))&gt;	description of listaParametrosGenerales	listaParametrosGeneralesArticulos	&lt;&gt;	description of listaParametrosGeneralesArticulos	listaPersonas	&lt;(List of: Usuario)&gt;	description of listaPersonas	listaUsuarios	&lt;(List of: Usuario)&gt;	description of listaUsuarios	listaVentas	&lt;(Collection of: Venta)&gt;	description of listaVentasasd</body></comment><component-property><name>ProyectoFinal</name> <type>package</type><property>comment</property> <value>'Paquete del proyecto final'</value></component-property><component-property><name>ProyectoFinal</name> <type>package</type><property>comment</property> <value>'Paquete del proyecto final.'</value></component-property><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicioInstance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of tipoasd</body></comment><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicioInstance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of tipoasd</body></comment><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicioInstance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of tipoasd</body></comment><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicioInstance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	se usa para definir si el artículo es un producto o un servicio</body></comment><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicioInstance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	se usa para definir si el artículo es un producto o un servicio</body></comment><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicioInstance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo	idCategoria	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idCategoria	nombre	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of nombre	precio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of precio	tipo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	se usa para definir si el artículo es un producto o un servicio</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>precio</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>precio</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Articulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idCategoria tipo nombre </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>Articulo</class-id> <selector>precio</selector></remove-selector><remove-selector><class-id>Articulo</class-id> <selector>precio:</selector></remove-selector><comment><class-id>Articulo</class-id><body>Un artículo es un producto/servicio</body></comment><comment><class-id>Categoria</class-id><body>Cada articulo debe pertenecer a una categoria. Estas a su vez estan incluidas dentro de otra categoria.</body></comment><comment><class-id>Categoria</class-id><body>Cada articulo debe pertenecer a una categoria. Estas a su vez estan incluidas dentro de otra categoria.</body></comment><comment><class-id>Categoria</class-id><body>Cada articulo debe pertenecer a una categoria. Estas a su vez estan incluidas dentro de otra categoria.</body></comment><comment><class-id>ObjetoConRoles</class-id><body>Implementacion de roles en objetos</body></comment><comment><class-id>ObjetoConRoles</class-id><body>Implementacion de roles en objetos</body></comment><comment><class-id>ObjetoConRoles</class-id><body>Implementacion de roles en objetos</body></comment><comment><class-id>Persona</class-id><body>Contiene la informacion general que comparten los usuarios de diferentes tipos: administrador, cliente y vendedor.</body></comment><comment><class-id>Persona</class-id><body>Contiene la informacion general que comparten los usuarios de diferentes tipos: administrador, cliente y vendedor. Para acceder a los parametros especificos de cada tipo de usuario directamente se usa la implementacion de roles.</body></comment><comment><class-id>Persona</class-id><body>Contiene la informacion general que comparten los usuarios de diferentes tipos: administrador, cliente y vendedor. Para acceder a los parametros especificos de cada tipo de usuario directamente se usa la implementacion de roles.</body></comment><comment><class-id>Persona</class-id><body>Contiene la informacion general que comparten los usuarios de diferentes tipos: administrador, cliente y vendedor. Para acceder a los parametros especificos de cada tipo de usuario directamente se usa la implementacion de roles.</body></comment><comment><class-id>ParametroGeneral</class-id><body>Un parametro general es un campo al que se le puede asignar el valor correspondiente por cada articulo.</body></comment><comment><class-id>ParametroGeneral</class-id><body>Un parametro general es un campo al que se le puede asignar el valor correspondiente por cada articulo.</body></comment><comment><class-id>ParametroGeneral</class-id><body>Un parametro general es un campo al que se le puede asignar el valor correspondiente por cada articulo.</body></comment><comment><class-id>ParametroGeneralArticulo</class-id><body>Define la relacion parametro general - articulo.</body></comment><comment><class-id>ParametroGeneralArticulo</class-id><body>Define la relacion parametro general - articulo.</body></comment><comment><class-id>ParametroGeneralArticulo</class-id><body>Define la relacion parametro general - articulo.</body></comment><comment><class-id>PlanDeCompra</class-id><body>Los planes de compra son establecidos para establecer alternativas en la forma de proceder el pago a la hora de realizarlo.</body></comment><comment><class-id>Precio</class-id><body>El precio se le asigna a un articulo para poder establecer un valor para la venta.</body></comment><comment><class-id>Precio</class-id><body>El precio se le asigna a un articulo para poder establecer un valor para la venta.</body></comment><comment><class-id>Precio</class-id><body>El precio se le asigna a un articulo para poder establecer un valor para la venta.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinalUI</class-id><body>Clase general de la interfaz de la aplicación.</body></comment><comment><class-id>ProyectoFinalUI</class-id><body>Clase general de la interfaz de la aplicación.</body></comment><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		self treeHolder list: (TreeModel 		on: listaCategorias		displayRoot: false 		childrenWith: [:item | true ]	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		IndentedTreeSelectionInList		listObjectHierarchy: (admin listaCategorias)		childBlock: [:a :b| (a idCategoriaPadre) = (b idCategoria) ]		childNameBlock: [:x| x nombre].		self treeHolder list: (TreeModel 		on: listaCategorias		displayRoot: false 		childrenWith: [:item | true ]	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		IndentedTreeSelectionInList		listObjectHierarchy: (admin listaCategorias)		childBlock: [:a :b| (a idCategoriaPadre) = (b idCategoria) ]		childNameBlock: [:x| x nombre].		self treeHolder list: (TreeModel 		on: listaCategorias		displayRoot: false 		childrenWith: [:item | true ]	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		mi := IndentedTreeSelectionInList		listObjectHierarchy: (admin listaCategorias)		childBlock: [:a :b| (a idCategoriaPadre) = (b idCategoria) ]		childNameBlock: [:x| x nombre].		self treeHolder list: (TreeModel 		on: mi		displayRoot: false 		childrenWith: [:item | true ]	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		mi := IndentedTreeSelectionInList		listObjectHierarchy: (admin listaCategorias)		childBlock: [:a :b| (a idCategoriaPadre) = (b idCategoria) ]		childNameBlock: [:x| x nombre].		self treeHolder list: (TreeModel 		on: mi		displayRoot: false	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		mi := IndentedTreeSelectionInList		listObjectHierarchy: listaCategorias		childBlock: [:a :b| (a idCategoriaPadre) = (b idCategoria) ]		childNameBlock: [:x| x defaultString].		self treeHolder list: (TreeModel 		on: mi		displayRoot: false	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		mi := IndentedTreeSelectionInList		listObjectHierarchy: listaCategorias		childBlock: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre)]		childNameBlock: [:x| x defaultString].		self treeHolder list: (TreeModel 		on: mi		displayRoot: false	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		mi := IndentedTreeSelectionInList		listObjectHierarchy: listaCategorias		childBlock: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre)]		childNameBlock: [:x| x defaultString].	ArtificialTreeItemHolder hierarchicallyArranged: listaCategorias usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre) ].	self treeHolder list: (TreeModel 		on: mi		displayRoot: false	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder hierarchicallyArranged: listaCategorias usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre) ].	self treeHolder list: (TreeModel 		on: mi		displayRoot: false	)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder hierarchicallyArranged: listaCategorias usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre) ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder hierarchicallyArranged: listaCategorias usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre) ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a idCategoria)) idCategoria) = ((admin buscarCategoriaPorId: (a idCategoria)) idCategoriaPadre) ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a key)) idCategoria) = ((admin buscarCategoriaPorId: (a key)) idCategoriaPadre) ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| ((admin buscarCategoriaPorId: (a key)) idCategoria) = ((admin buscarCategoriaPorId: (a key)) idCategoriaPadre) ].	"self treeHolder list: (TreeModel on: mi displayRoot: false).""	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b| false ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: #('adasd' 'adasdsa')		usingDirectRelation: [:a :b| false ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: Usuario		usingDirectRelation: [:a :b| false ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: Usuario		usingDirectRelation: [:a :b| a includes: b ].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: Usuario		usingDirectRelation: [:a :b| false].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: Object		usingDirectRelation: [:a :b| a includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false)."	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: mi;		showRoot: false;		open"	self treeHolder list: (TreeModel on: mi displayRoot: false).	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: mi;		showRoot: false;		open"	self treeHolder list: (TreeModel on: mi displayRoot: false).	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | a subclasses includes: b].	super open."	self treeHolder list: (TreeModel on: mi displayRoot: false).	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	super open."		self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: listaCategorias		usingDirectRelation: [:a :b | ((admin buscarCategoriaPorId: (a key)) idCategoria) = ((admin buscarCategoriaPorId: (b key)) idCategoriaPadre) ].	self treeHolder list: (TreeModel on: mi displayRoot: false).	super open."		self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	super open."		self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><remove-selector><class-id>SeleccionarVenta</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarVenta organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	super open."		self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	super open.		(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		"		self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias mi|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		"		self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaCategorias).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.		"	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><do-it>admin := ProyectoFinal auto.</do-it><remove-selector><class-id>ModificarCategoria</class-id> <selector>treeHolder</selector></remove-selector><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	self guardar.	super executeAutoSave.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := self		forRequestWithSuggestions: 			listaArticulos collect: [:x| x nombre]		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Select or type your choice:';		secondLabel: 'Suggestions:';		request</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: 			listaArticulos collect: [:x| x nombre]		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Select or type your choice:';		secondLabel: 'Suggestions:';		request</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: 			(listaArticulos collect: [:x| x nombre])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Select or type your choice:';		secondLabel: 'Suggestions:';		request</body></methods><do-it>admin buscarArticulosPorNombre.</do-it><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: 			(listaArticulos collect: [:x|				(x nombre)			])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Select or type your choice:';		secondLabel: 'Suggestions:';		request</body></methods><do-it>#dasdasdas class</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>buscarArticulosPorNombre</selector></remove-selector><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: 			(admin listaArticulos collect: [:x|				(x nombre)			])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Select or type your choice:';		secondLabel: 'Suggestions:';		request</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar precios' 										#value: #administrarPrecios ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar planes de compra' 										#value: #administrarPlanesDeCompra ) ) #(5 ) nil ) ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Buscar...' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Buscar artículos por nombre...' 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Buscar artículos por categoría...' ) ) #(2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarItem</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [(self subCanvas componentAt: aComponent) widget]</body></methods><do-it>ModificarUsuario class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 748 265 1068 565 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 9 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 65 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 159 0 64 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 303 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 81 0 154 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 81 0 302 0 102 0 ) 					#name: #direccion ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#name: #mes 					#menu: #meses ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar Usuario' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 567 309 887 499 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 655 322 975 512 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarUsuario</body></methods><do-it>ModificarUsuario class organization addCategory: #resources</do-it><methods><class-id>ModificarUsuario class</class-id> <category>resources</category><body package="ProyectoFinal" selector="femeninoMasculino">femeninoMasculino	"Tools.MenuEditor new openOnClass: self andSelector: #femeninoMasculino"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Femenino' 				#value: #femenino ) 			#(#{UI.MenuItem} 				#rawLabel: 'Masculino' 				#value: #masculino ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>resources</category><body package="ProyectoFinal" selector="tiposUsuarios">tiposUsuarios	"Tools.MenuEditor new openOnClass: self andSelector: #femeninoMasculino"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Femenino' 				#value: #femenino ) 			#(#{UI.MenuItem} 				#rawLabel: 'Masculino' 				#value: #masculino ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><remove-selector><class-id>ModificarUsuario class</class-id> <selector>femeninoMasculino</selector></remove-selector><methods><class-id>ModificarUsuario class</class-id> <category>resources</category><body package="ProyectoFinal" selector="tiposUsuarios">tiposUsuarios	"Tools.MenuEditor new openOnClass: self andSelector: #tiposUsuarios"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Administrador' 				#value: #administrador ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cliente' 				#value: #cliente ) 			#(#{UI.MenuItem} 				#rawLabel: 'Vendedor' 				#value: #vendedor ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>resources</category><body package="ProyectoFinal" selector="tiposUsuarios">tiposUsuarios	"Tools.MenuEditor new openOnClass: self andSelector: #tiposUsuarios"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Administrador' 				#value: #administrador ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cliente' 				#value: #cliente ) 			#(#{UI.MenuItem} 				#rawLabel: 'Vendedor' 				#value: #vendedor ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>ModificarUsuario organization addCategory: #open</do-it><do-it>ModificarUsuario organization removeCategory: #open</do-it><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	(self widgetAt: #sexo) model: (ValueHolder with: #femenino); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #tipoUsuario) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	((self widgetAt: #usuario) model) value: 1.	(self widgetAt: #tipoUsuario) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 824 319 1144 509 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #usuario 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idUsuario: ((self widgetAt: #usuario) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	item tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	item := Articulo new.	tipo := ((self widgetAt: #tipo) currentChoice).	(tipo = #administrador) ifTrue: [Administrador].	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarArticulo: item.</body></methods><do-it>#hola</do-it><do-it>#hola</do-it><do-it>#hola asString</do-it><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	item := Articulo new.	tipo := ((self widgetAt: #tipo) currentChoice).	tipo := (tipo = #administrador) ifTrue: [Administrador] ifFalse:[(tipo = #administrador)].	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarArticulo: item.</body></methods><do-it>#hola asString asClassNameOnly</do-it><do-it>#hola asString asClassNameOnly</do-it><do-it>#hola asString asClassNameOnly</do-it><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := (		(((self widgetAt: #tipo) currentChoice) switch)		case: [#administrador] then: [Administrador];		case: [#administrador] then: [Cliente];		case: [#administrador] then: [Vendedor]	) new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := (		(((self widgetAt: #tipo) currentChoice) switch)		case: [#administrador] then: [Administrador];		case: [#cliente] then: [Cliente];		case: [#vendedor] then: [Vendedor]	) new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarArticulo: item.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaUsuarios|	super open.	listaUsuarios := List new.	admin listaUsuarios do: [:c|		listaUsuarios add: (			(UserMessage new)				key: (c idUsuario);				&gt;&gt; ( ((admin buscarPersonaPorId: (c idPersona)) nombreYApellido) , ' (' , (c class asString) , ')')		).	].	super open.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaUsuarios).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipoUsuario) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaUsuarios|	listaUsuarios := List new.	admin listaUsuarios do: [:c|		listaUsuarios add: (			(UserMessage new)				key: (c idUsuario);				&gt;&gt; ( ((admin buscarPersonaPorId: (c idPersona)) nombreYApellido) , ' (' , (c class asString) , ')')		).	].	super open.	(self widgetAt: #categoriaPadre) model: (ValueHolder with: listaUsuarios).	(self widgetAt: #categoriaPadre) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipoUsuario) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaUsuarios|	listaUsuarios := List new.	admin listaUsuarios do: [:c|		listaUsuarios add: (			(UserMessage new)				key: (c idUsuario);				&gt;&gt; ( ((admin buscarPersonaPorId: (c idPersona)) nombreYApellido) , ' (' , (c class asString) , ')')		).	].	super open.	(self widgetAt: #persona) model: (ValueHolder with: listaUsuarios).	(self widgetAt: #persona) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipoUsuario) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaUsuarios|	listaUsuarios := List new.	admin listaUsuarios do: [:c|		listaUsuarios add: (			(UserMessage new)				key: (c idUsuario);				&gt;&gt; ( ((admin buscarPersonaPorId: (c idPersona)) nombreYApellido) , ' (' , (c class asString) , ')')		).	].	super open.	(self widgetAt: #persona) model: (ValueHolder with: listaUsuarios).	(self widgetAt: #persona) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPersonas|	listaPersonas := List new.	admin listaPersonas do: [:c|		listaPersonas add: (			(UserMessage new)				key: (c idUsuario);				&gt;&gt; ( ((admin buscarPersonaPorId: (c idPersona)) nombreYApellido) , ' (' , (c class asString) , ')')		).	].	super open.	(self widgetAt: #persona) model: (ValueHolder with: listaPersonas).	(self widgetAt: #persona) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPersonas|	listaPersonas := List new.	admin listaPersonas do: [:c|		listaPersonas add: (			(UserMessage new)				key: (c idPersona);				&gt;&gt; ( ((admin buscarPersonaPorId: (c idPersona)) nombreYApellido) , ' (' , (c class asString) , ')')		).	].	super open.	(self widgetAt: #persona) model: (ValueHolder with: listaPersonas).	(self widgetAt: #persona) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPersonas|	listaPersonas := List new.	admin listaPersonas do: [:c|		listaPersonas add: (			(UserMessage new)				key: (c idPersona);				&gt;&gt; (c nombreYApellido)		).	].	super open.	(self widgetAt: #persona) model: (ValueHolder with: listaPersonas).	(self widgetAt: #persona) setSelectionIndex: 1; updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor] ifFalse:[]]]	) new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]).	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarUsuario: item.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaUsuarios) texto: [:x| (admin buscarPersonaPorId: (x idPersona)) ] valor: [:x| x idUsuario].</body></methods><methods><class-id>SeleccionarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaUsuarios) texto: [:x|		((admin buscarPersonaPorId: (x idPersona)) nombreYApellido) , ' (' ,		(x class asString lower)	] valor: [:x| x idUsuario].</body></methods><do-it>'ADAfdads' asLowercase</do-it><methods><class-id>SeleccionarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaUsuarios) texto: [:x|		((admin buscarPersonaPorId: (x idPersona)) nombreYApellido) , ' (' ,		(x class asString asLowercase) , ')'	] valor: [:x| x idUsuario].</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin class</do-it><do-it>admin class printString</do-it><methods><class-id>SeleccionarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaUsuarios) texto: [:x|		((admin buscarPersonaPorId: (x idPersona)) nombreYApellido) , ' (' ,		(x class printString asLowercase) , ')'	] valor: [:x| x idUsuario].</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item idUsuario: id.	item idPersona: ((self widgetAt: #persona) selection key asNumber).	admin modificarUsuario: id por: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	(self widgetAt: #tipo) model: (ValueHolder with: 		(item			siEsAdministrador: [#administrador]			siEsCliente: [#cliente]			siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	(self widgetAt: #usuario) setSelectionIndex: ((self widgetAt: #usuario) sequence findIndexOf: ((self widgetAt: #usuario) sequence detect: [:x| (x key) = (item idUsuario)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: 		(item			siEsAdministrador: [#administrador]			siEsCliente: [#cliente]			siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idUsuario)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: 		(item			siEsAdministrador: [#administrador]			siEsCliente: [#cliente]			siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: 		(item			siEsAdministrador: [#administrador]			siEsCliente: [#cliente]			siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: 		(item			siEsAdministrador: [#administrador]			siEsCliente: [#cliente]			siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="modificarUsuario:por:">modificarUsuario: unId por: unObjeto	listaUsuarios:= (listaUsuarios collect: [:x|		((x idUsuario) = unId)			ifTrue: [unObjeto]			ifFalse: [x].	]).</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^fechaNacimiento - (Date new)</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^(fechaNacimiento - (Date today)) years</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^(fechaNacimiento - (Date today))</body></methods><do-it>(admin buscarPersonaPorId: 2) edad</do-it><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^Date today - fechaNacimiento year</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^Date today - fechaNacimiento</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^Date today - fechaNacimiento days / 365</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^Date today - fechaNacimiento</body></methods><do-it>(admin buscarPersonaPorId: 2) edad</do-it><do-it>(admin buscarPersonaPorId: 2) edad days</do-it><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^Date today - fechaNacimiento days / 365</body></methods><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^((Date today - fechaNacimiento) days) / 365</body></methods><do-it>(admin buscarPersonaPorId: 2) edad</do-it><do-it>(admin buscarPersonaPorId: 2) edad</do-it><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^(((Date today - fechaNacimiento) days) asNumber) / 365</body></methods><do-it>(admin buscarPersonaPorId: 2) edad</do-it><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^((Date today - fechaNacimiento) days).</body></methods><do-it>(admin buscarPersonaPorId: 2) edad class</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365 asFloat</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365 asInteger</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365 floor</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365 rounded</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365 floor</do-it><do-it>(admin buscarPersonaPorId: 2) edad / 365 ceiling</do-it><do-it>floor</do-it><do-it>((admin buscarPersonaPorId: 2) edad / 365) floor</do-it><do-it>((admin buscarPersonaPorId: 2) edad / 365) rounded</do-it><do-it>((admin buscarPersonaPorId: 2) edad / 365) floor</do-it><do-it>45.6 floor</do-it><methods><class-id>Persona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="edad">edad	^(((Date today) - fechaNacimiento) days / 365) floor.</body></methods><do-it>(admin buscarPersonaPorId: 2) edad</do-it><do-it>(admin buscarPersonaPorId: 1) edad</do-it><do-it>(admin buscarPersonaPorId: 3) edad</do-it><do-it>(admin buscarPersonaPorId: 4) edad</do-it><do-it>(admin buscarPersonaPorId: 4) edad</do-it><do-it>(admin buscarPersonaPorId: 3) edad</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar precios' 										#value: #administrarPrecios ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar planes de compra' 										#value: #administrarPlanesDeCompra ) ) #(5 ) nil ) ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Buscar...' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Buscar artículos por nombre...' 							#value: #buscarArticulosPorNombre 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Buscar artículos por categoría...' ) ) #(2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: 			(admin listaArticulos collect: [:x|				(x nombre)			])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Filtra los artículos por nombre:';		secondLabel: 'Sugerencias:';		request</body></methods><methods><class-id>Articulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	tipo := nil.	nombre := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 16, 2017' '2:55:58 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 14:55:58 on 16 de enero de 2017."</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>ui := ModificarUsuario new.</do-it><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	|ui|	super executeAutoSave.	admin ifNotNil: [		ui := (self claseSeleccionar) new.		ui := (self asignarAClaseSeleccionar: ui).		ui open.	]</body></methods><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	|ui|	super executeAutoSave.	self claseSeleccionar ifNotNil: [		ui := (self claseSeleccionar) new.		ui := (self asignarAClaseSeleccionar: ui).		ui open.	]</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^nil</body></methods><do-it>ui := ModificarCategoria new.</do-it><do-it>ui := ModificarPersona new.</do-it><do-it>ui open.</do-it><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave</body></methods><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	|ui|	super executeAutoSave.	self claseSeleccionar ifNotNil: [		ui := (self claseSeleccionar) new.		ui := (self asignarAClaseSeleccionar: ui).		ui open.	]</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarInfo">cambiarInfo	</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 615 199 935 519 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 698 234 1018 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 4 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 309 0 122 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 176 0 316 0 295 0 ) 					#name: #Subcanvas1 ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 176 0 316 0 295 0 ) 					#name: #Subcanvas1 ) ) ) )</body></methods><methods><class-id>ModificarAdministrador class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 706 268 1026 488 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 316 0 115 0 ) 					#name: #categoria 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 316 0 213 0 ) 					#name: #botonEditarParametros 					#flags: 24 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 706 299 1026 489 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 713 319 1033 619 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 163 0 260 0 235 0 ) 					#label: 'Fecha de Nacimiento' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 8 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 62 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 63 0 ) 					#label: 'Dirección' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 186 0 ) 					#label: 'Día' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 76 0 186 0 ) 					#label: 'Mes' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 180 0 186 0 ) 					#label: 'Año' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 315 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 81 0 150 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 81 0 315 0 102 0 ) 					#name: #direccion ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 15 0 203 0 70 0 224 0 ) 					#name: #dia 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 31 					#interval: 1 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 203 0 175 0 224 0 ) 					#name: #mes 					#menu: #meses ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 180 0 203 0 250 0 224 0 ) 					#name: #anio 					#helpText: '1900' 					#type: #number 					#formatString: '0' 					#low: 1900 					#high: 2017 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 768 243 1088 543 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 8 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 62 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 63 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 315 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 81 0 150 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 81 0 315 0 102 0 ) 					#name: #direccion ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 255 0 72 0 ) 							#label: 'Fecha de Nacimiento' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 10 0 23 0 ) 							#label: 'Día' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 71 0 23 0 ) 							#label: 'Mes' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 175 0 23 0 ) 							#label: 'Año' ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 10 0 40 0 65 0 61 0 ) 							#name: #dia 							#helpText: '1' 							#type: #number 							#low: 1 							#high: 31 							#interval: 1 ) 						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 70 0 40 0 170 0 61 0 ) 							#name: #mes 							#menu: #meses ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 175 0 40 0 245 0 61 0 ) 							#name: #anio 							#helpText: '1900' 							#type: #number 							#formatString: '0' 							#low: 1900 							#high: 2017 							#interval: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 5 0 163 0 260 0 235 0 ) 						#name: #fechaNacimiento ) ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 604 253 924 493 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 176 0 315 0 235 0 ) 					#name: #Subcanvas1 					#flags: 0 ) ) ) )</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarAdministrador</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ModificarAdministrador</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ModificarAdministrador removeFromSystem</do-it><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="administradorSpec">administradorSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 19 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 40 0 148 0 61 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>openWindow</selector></remove-selector><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	^'asd'</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambiarSubCanvasTipo ) 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 176 0 315 0 235 0 ) 					#name: #subCanvasTipo 					#flags: 0 ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	self interfaceSpecFor: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	^'asd'</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="guiMenuPrincipal">guiMenuPrincipal	^guiMenuPrincipal</body></methods><do-it>admin guiMenuPrincipal.</do-it><do-it>admin guiMenuPrincipal interfaceSpecFor: #windowSpec.</do-it><class><name>MenuPrincipal</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subCanvasTipo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvasTipo">subCanvasTipo	^subCanvasTipo</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvasTipo:">subCanvasTipo: anObject	subCanvasTipo := anObject</body></methods><remove-selector><class-id>MenuPrincipal</class-id> <selector>subCanvasTipo:</selector></remove-selector><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	self interfaceSpecFor: #generalSpec.	subCanvas := ((self widgetAt: #subCanvasTipo) client: self spec: #clienteSpec).	^'asd'</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	subCanvas := ((self widgetAt: #subCanvasTipo) client: self spec: #clienteSpec).	^'asd'</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	subCanvas := ((self widgetAt: #subCanvasTipo) client: self spec: #clienteSpec).</body></methods><methods><class-id>ModificarItem</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(self subCanvas componentAt: aComponent) ifNotNil: [(self subCanvas componentAt: aComponent) widget]	]</body></methods><methods><class-id>ModificarUsuario</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(self subCanvas componentAt: aComponent) ifNotNil: [(self subCanvas componentAt: aComponent) widget]	]</body></methods><methods><class-id>ModificarUsuario</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(self subCanvasTipo componentAt: aComponent) ifNotNil: [(self subCanvasTipo componentAt: aComponent) widget]	]</body></methods><class><name>ModificarUsuario</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subCanvasTipo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ModificarUsuario</class-id><body>ModificarUsuario has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ModificarUsuario</class-id><body>ModificarUsuario has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><remove-selector><class-id>MenuPrincipal</class-id> <selector>subCanvasTipo</selector></remove-selector><class><name>MenuPrincipal</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	subCanvasTipo := ((self widgetAt: #subCanvasTipo) client: self spec: #clienteSpec).</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="administradorSpec">administradorSpec	"Tools.UIPainter new openOnClass: self andSelector: #administradorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 648 318 968 508 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 148 0 41 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvasTipo">subCanvasTipo	^subCanvasTipo</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="subCanvasTipo:">subCanvasTipo: anObject	subCanvasTipo := anObject</body></methods><remove-selector><class-id>ModificarUsuario</class-id> <selector>subCanvasTipo:</selector></remove-selector><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	|tipo|	subCanvasTipo := ((self widgetAt: #subCanvasTipo) client: self spec: (		(tipo = #administrador) ifTrue: [#administradorSpec] ifFalse:[		(tipo = #cliente) ifTrue: [#clienteSpec] ifFalse:[		(tipo = #vendedor) ifTrue: [#vendedorSpec]]]	)).</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	|tipo|	item := (admin buscarUsuarioPorId: id).	subCanvasTipo := ((self widgetAt: #subCanvasTipo) client: self spec: (		(tipo = #administrador) ifTrue: [#administradorSpec] ifFalse:[		(tipo = #cliente) ifTrue: [#clienteSpec] ifFalse:[		(tipo = #vendedor) ifTrue: [#vendedorSpec]]]	)).</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	|tipo|	subCanvasTipo := ((self widgetAt: #subCanvasTipo) client: self spec: (		(tipo = #administrador) ifTrue: [#administradorSpec] ifFalse:[		(tipo = #cliente) ifTrue: [#clienteSpec] ifFalse:[		(tipo = #vendedor) ifTrue: [#vendedorSpec]]]	)).</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarSubCanvasTipo">cambiarSubCanvasTipo	|tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	subCanvasTipo := ((self widgetAt: #subCanvasTipo) client: self spec: (		(tipo = #administrador) ifTrue: [#administradorSpec] ifFalse:[		(tipo = #cliente) ifTrue: [#clienteSpec] ifFalse:[		(tipo = #vendedor) ifTrue: [#vendedorSpec]]]	)).</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #administradorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 648 318 968 508 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 148 0 41 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #administradorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 648 318 968 508 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 148 0 41 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 762 315 1082 505 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 148 0 41 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><class><name>Vendedor</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>legajo telefono </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="telefono">telefono	^telefono</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="telefono:">telefono: anObject	telefono := anObject</body></methods><class><name>Vendedor</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>legajo telefono direccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>Persona</class-id> <selector>direccion</selector></remove-selector><remove-selector><class-id>Persona</class-id> <selector>direccion:</selector></remove-selector><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>direccion</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>direccion</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Persona</name><environment>Smalltalk</environment><super>ObjetoConRoles</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPersona nombre apellido fechaNacimiento sexo dni </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #dni) model value) asNumber).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	item apellido: (((self widgetAt: #apellido) model value) asString).	item dni: (((self widgetAt: #dni) model value) asNumber).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin modificarPersona: id por: item.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item		nombre: (((self widgetAt: #nombre) model value) asString);		apellido: (((self widgetAt: #apellido) model value) asString);		dni: (((self widgetAt: #dni) model value) asNumber).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	item sexo: ((self widgetAt: #sexo) currentChoice).	item fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	admin modificarPersona: id por: item.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPersonaPorId: id).	item		nombre: (((self widgetAt: #nombre) model value) asString);		apellido: (((self widgetAt: #apellido) model value) asString);		dni: (((self widgetAt: #dni) model value) asNumber);		sexo: ((self widgetAt: #sexo) currentChoice);		fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin modificarPersona: id por: item.</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Persona new.	item		idPersona: (admin autoIncrementoLista: (admin listaPersonas) delParametro: [:x| x idPersona]);		nombre: (((self widgetAt: #nombre) model value) asString);		apellido: (((self widgetAt: #apellido) model value) asString);		dni: (((self widgetAt: #dni) model value) asNumber);		sexo: ((self widgetAt: #sexo) currentChoice);		fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 234 843 534 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 8 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 62 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 63 0 ) 					#flags: 16 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 315 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 81 0 150 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 81 0 315 0 102 0 ) 					#name: #direccion 					#flags: 24 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 255 0 72 0 ) 							#label: 'Fecha de Nacimiento' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 10 0 23 0 ) 							#label: 'Día' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 71 0 23 0 ) 							#label: 'Mes' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 175 0 23 0 ) 							#label: 'Año' ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 10 0 40 0 65 0 61 0 ) 							#name: #dia 							#helpText: '1' 							#type: #number 							#low: 1 							#high: 31 							#interval: 1 ) 						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 70 0 40 0 170 0 61 0 ) 							#name: #mes 							#menu: #meses ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 175 0 40 0 245 0 61 0 ) 							#name: #anio 							#helpText: '1900' 							#type: #number 							#formatString: '0' 							#low: 1900 							#high: 2017 							#interval: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 5 0 163 0 260 0 235 0 ) 						#name: #fechaNacimiento ) ) ) ) )</body></methods><remove-selector><class-id>ModificarItem</class-id> <selector>subCanvas</selector></remove-selector><methods><class-id>ModificarItem</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(subCanvas componentAt: aComponent) ifNotNil: [(subCanvas componentAt: aComponent) widget]	]</body></methods><remove-selector><class-id>ModificarUsuario</class-id> <selector>subCanvasTipo</selector></remove-selector><methods><class-id>ModificarUsuario</class-id> <category>view accessing</category><body package="ProyectoFinal" selector="widgetAt:">widgetAt: aComponent	^(super widgetAt: aComponent) ifNil: [		(subCanvasTipo componentAt: aComponent) ifNotNil: [(subCanvasTipo componentAt: aComponent) widget]	]</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPersonas|	listaPersonas := List new.	admin listaPersonas do: [:c|		listaPersonas add: (			(UserMessage new)				key: (c idPersona);				&gt;&gt; (c nombreYApellido)		).	].	super open.	(self widgetAt: #persona)		model: (ValueHolder with: listaPersonas);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]);		idPersona: ((self widgetAt: #persona) selection key asNumber).	admin agregarUsuario: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: id;		idPersona: ((self widgetAt: #persona) selection key asNumber).	admin modificarUsuario: id por: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneralArticulo new.	item		idParametro: ((self widgetAt: #parametro) selection key asNumber);		idArticulo: idArticulo;		valor: (((self widgetAt: #valor) model value) asString).	admin agregarParametroGeneralArticulo: item.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi		admin: admin;		idArticulo: idArticulo.	^unUi</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaParametros|	super open.	listaParametros := List new.	admin listaParametrosGenerales do: [:c|		((admin buscarParametroGeneral: (c idParametro) delArticulo: idArticulo) = nil) ifTrue: [			listaParametros add: (				(UserMessage new)					key: (c idParametro);					&gt;&gt; (c nombre)			).		]	].	(self widgetAt: #parametro)		model: (ValueHolder with: listaParametros);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := ParametroGeneral new.	item		idParametro: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]);		nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarCategoriaPorId: id).	item		idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarCategoria: id por: item.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item		idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]);		idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item		idCategoria: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]);		idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarCategoria: item.</body></methods><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #categoriaPadre)		model: (ValueHolder with: listaCategorias);		setSelectionIndex: 1;		updateModel.		"	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarArticuloPorId: id).	item		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString);		tipo: ((self widgetAt: #tipo) currentChoice).	admin modificarArticulo: id por: item.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Articulo new.	item		idArticulo: (admin autoIncrementoLista: (admin listaArticulos) delParametro: [:x| x idArticulo]);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString);		tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	(self widgetAt: #categoria)		model: (ValueHolder with: listaCategorias);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 638 321 958 511 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 150 0 41 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 49 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 66 0 150 0 87 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 638 321 958 511 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 150 0 41 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 49 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 66 0 150 0 87 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 638 321 958 511 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 150 0 41 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 49 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 66 0 150 0 87 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 19 0 150 0 40 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 48 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 65 0 150 0 86 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 19 0 150 0 40 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 48 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 65 0 150 0 86 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 289 843 479 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 64 0 150 0 85 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><class><name>Cliente</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>direccion telefono </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>Cliente</class-id><body>Cliente has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idCliente	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idClienteasd</body></comment><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="direccion">direccion	^direccion</body></methods><methods><class-id>Vendedor</class-id> <category>accessing</category><body package="ProyectoFinal" selector="direccion:">direccion: anObject	direccion := anObject</body></methods><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="direccion">direccion	^direccion</body></methods><methods><class-id>Cliente</class-id> <category>accessing</category><body package="ProyectoFinal" selector="direccion:">direccion: anObject	direccion := anObject</body></methods><class><name>Cliente</name><environment>Smalltalk</environment><super>Usuario</super><private>false</private><indexed-type>none</indexed-type><inst-vars>telefono direccion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	id		ifNil: [self agregar]		ifNotNil: [self actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="aceptar">aceptar	id ifNil: [self agregar] ifNotNil: [self actualizar].	self closeRequest.</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 719 188 1039 508 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambiarSubCanvasTipo ) 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 177 0 315 0 315 0 ) 					#name: #subCanvasTipo 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow width: 420.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow moveTo: 240.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow		moveTo: (self mainWindow displayBox).</body></methods><do-it>SimpleDialog new.</do-it><do-it>SimpleDialog new.</do-it><do-it>sd := SimpleDialog new.</do-it><do-it>sd := Dialog new.</do-it><do-it>sd := SimpleDialog new.</do-it><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	self closeRequest.	self class		new;		admin: admin;		open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	self new		bloqueAceptar: unBloque;		bloqueCancelar: otroBloque;		texto: unTexto;		open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	^self new		bloqueAceptar: unBloque;		bloqueCancelar: otroBloque;		texto: unTexto;		open.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	|obj|	obj := self new.	obj		bloqueAceptar: unBloque;		bloqueCancelar: otroBloque;		texto: unTexto;		open.	^obj.</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:oSino:">esperarPeticion: unTexto yRealizar: unBloque oSino: otroBloque	|obj|	obj := self new.	obj		bloqueAceptar: unBloque;		bloqueCancelar: otroBloque;		texto: unTexto;		open.	^obj</body></methods><methods><class-id>VentanaConfirmar class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="esperarPeticion:yRealizar:">esperarPeticion: unTexto yRealizar: unBloque	|obj|	obj := self new.	obj		bloqueAceptar: unBloque;		texto: unTexto;		open.	^obj</body></methods><do-it>sd := VentanaConfirmar new.</do-it><do-it>sd := VentanaConfirmar esperarPeticion: 'hola' yRealizar: [].</do-it><do-it>sd := ApplicationModel new.</do-it><do-it>sd := Table1Example new.</do-it><do-it>sd open.</do-it><do-it>sd mainWindow displayBox.</do-it><do-it>box := sd mainWindow displayBox.</do-it><do-it>box width: 3000.</do-it><do-it>box width: 3000.</do-it><do-it>box width: 3000.</do-it><do-it>box := sd mainWindow displayBox.</do-it><do-it>sd mainWindow displayBox: box.</do-it><do-it>sd mainWindow displayBox: box.</do-it><do-it>sd mainWindow displayBox: box.</do-it><do-it>sd mainWindow displayBox: box.</do-it><do-it>sd mainWindow displayBox: box.</do-it><do-it>box width: 640.</do-it><do-it>sd mainWindow displayBox: box.</do-it><do-it>sd mainWindow displayBox width: 500.</do-it><do-it>sd mainWindow displayBox width: 200.</do-it><do-it>sd mainWindow displayBox width: 200.</do-it><class><name>Usuario</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idUsuario idPersona email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>Usuario</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idUsuario idPersona email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Usuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="email">email	^email</body></methods><methods><class-id>Usuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="email:">email: anObject	email := anObject</body></methods><class><name>Usuario</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idUsuario idPersona email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow		displayBox: (self mainWindow displayBox).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow		displayBox: (self mainWindow displayBox height: 640).</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 640 280 ) 			#bounds: #(#{Graphics.Rectangle} 779 295 1099 575 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := self mainWindow displayBox.	box height: 640.	self mainWindow displayBox: box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := self mainWindow displayBox.	box height: 500.	self mainWindow displayBox: box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow label: 'perro'.	box := self mainWindow displayBox.	box height: 500.	self mainWindow displayBox:  box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box inter|	inter := self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := self mainWindow displayBox.	box height: 500.	self mainWindow displayBox:  box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box inter|	inter := self openInterface: #generalSpec.	inter perro.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := self mainWindow displayBox.	box height: 500.	self mainWindow displayBox:  box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box inter|	inter := self openInterface: #generalSpec.	inter window.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := self mainWindow displayBox.	box height: 500.	self mainWindow displayBox:  box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box inter|	inter := self openInterface: #generalSpec.	inter window.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := self mainWindow displayBox.	box height: 500.	inter window displayBox:  box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box inter|	inter := self openInterface: #generalSpec.	inter window.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := inter mainWindow displayBox.	box height: 500.	inter window displayBox:  box.</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|box inter|	inter := self openInterface: #generalSpec.	inter window.	subCanvas := ((self widgetAt: #subCanvas) client: self).	box := inter window displayBox.	box height: 500.	inter window displayBox:  box.</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 320 640 ) 			#bounds: #(#{Graphics.Rectangle} 523 244 843 524 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 207 0 254 0 259 0 275 0 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 265 0 253 0 316 0 274 0 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 320 0 240 0 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 280 ) 			#max: #(#{Core.Point} 320 640 ) 			#bounds: #(#{Graphics.Rectangle} 642 238 962 518 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -125 1 -60 1 -65 1 -5 1 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -60 1 -20 1 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -34 1 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (self mainWindow displayBox height: 500).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (self subCanvas displayBox height: 500).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (subCanvas window displayBox height: 500).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (subCanvas window displayBox height + 34).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (self mainWindow displayBox height: (subCanvas window displayBox height + 34)).</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 34 ) 			#max: #(#{Core.Point} 320 640 ) 			#bounds: #(#{Graphics.Rectangle} 523 244 843 564 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -125 1 -60 1 -65 1 -5 1 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -60 1 -20 1 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -34 1 ) 					#name: #subCanvas 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 34 ) 			#max: #(#{Core.Point} 320 640 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -34 1 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -125 1 -60 1 -65 1 -5 1 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -60 1 -20 1 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>categorias</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)		ifTrue: [^true]		ifFalse: [			categoria := (self buscarCategoriaPorId: unIdCategoria).			categoria isNil				ifTrue: [^false]				ifFalse: [					categoriaPadre := (categoria idCategoriaPadre).						respuesta := (							(categoriaPadre isNil not) &amp;				(self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>categorias</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)		ifTrue: [^true]		ifFalse: [			categoria := (self buscarCategoriaPorId: unIdCategoria).			categoria isNil				ifTrue: [^false]				ifFalse: [					categoriaPadre := (categoria idCategoriaPadre).						respuesta := (							(categoriaPadre isNil not) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)			).		].	].	^respuesta.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>categorias</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)		ifTrue: [^true]		ifFalse: [			categoria := (self buscarCategoriaPorId: unIdCategoria).			categoria isNil				ifTrue: [^false]				ifFalse: [					categoriaPadre := (categoria idCategoriaPadre).					^((categoriaPadre isNil not) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)).		].	].	^respuesta.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>categorias</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre respuesta|	(unIdCategoria = otroIdCategoria)		ifTrue: [^true]		ifFalse: [			categoria := (self buscarCategoriaPorId: unIdCategoria).			categoria isNil				ifTrue: [^false]				ifFalse: [					categoriaPadre := (categoria idCategoriaPadre).					^((categoriaPadre isNil not) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)).				].		].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>categorias</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre|	(unIdCategoria = otroIdCategoria)		ifTrue: [^true]		ifFalse: [			categoria := (self buscarCategoriaPorId: unIdCategoria).			categoria isNil				ifTrue: [^false]				ifFalse: [					categoriaPadre := (categoria idCategoriaPadre).					^((categoriaPadre isNil not) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)).				].		].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>categorias</category><body package="ProyectoFinal" selector="perteneceALaCategoria:a:">perteneceALaCategoria: unIdCategoria a: otroIdCategoria	|categoria categoriaPadre|	(unIdCategoria = otroIdCategoria)		ifTrue: [^true]		ifFalse: [			categoria := (self buscarCategoriaPorId: unIdCategoria).			categoria				ifNil: [^false]				ifNotNil: [					categoriaPadre := (categoria idCategoriaPadre).					^((categoriaPadre isNil not) &amp; (self perteneceALaCategoria: categoriaPadre  a: otroIdCategoria)).				].		].</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self interfaceSpecFor: #windowSpec.	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	(self interfaceSpecFor: #windowSpec) cch.	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	(self interfaceSpecFor: #windowSpec) cc.	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|test|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	(self interfaceSpecFor: #windowSpec) cc.	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|test|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	test := (self interfaceSpecFor: #windowSpec).	test cc.	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|test he|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	test := (self interfaceSpecFor: #windowSpec).	test 	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|test he|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	test := (self interfaceSpecFor: #windowSpec).	he := test window bounds height. 	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|test he|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	test := (self interfaceSpecFor: #windowSpec).	he := test window bounds height.	he e.	self mainWindow displayBox: (self mainWindow displayBox height: ((subCanvas window displayBox height) + 34)).</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 929 196 1249 436 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 8 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 62 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 63 0 ) 					#flags: 16 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 315 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 81 0 150 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 81 0 315 0 102 0 ) 					#name: #direccion 					#flags: 24 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 255 0 72 0 ) 							#label: 'Fecha de Nacimiento' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 10 0 23 0 ) 							#label: 'Día' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 71 0 23 0 ) 							#label: 'Mes' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 175 0 23 0 ) 							#label: 'Año' ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 10 0 40 0 65 0 61 0 ) 							#name: #dia 							#helpText: '1' 							#type: #number 							#low: 1 							#high: 31 							#interval: 1 ) 						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 70 0 40 0 170 0 61 0 ) 							#name: #mes 							#menu: #meses ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 175 0 40 0 245 0 61 0 ) 							#name: #anio 							#helpText: '1900' 							#type: #number 							#formatString: '0' 							#low: 1900 							#high: 2017 							#interval: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 5 0 163 0 260 0 235 0 ) 						#name: #fechaNacimiento ) ) ) ) )</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|test he|	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (self mainWindow displayBox height: (((self interfaceSpecFor: #windowSpec) window bounds height) + 34)).</body></methods><methods><class-id>ModificarItem</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self openInterface: #generalSpec.	subCanvas := ((self widgetAt: #subCanvas) client: self).	self mainWindow displayBox: (self mainWindow displayBox height: (((self interfaceSpecFor: #windowSpec) window bounds height) + 34)).</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 683 237 1003 409 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 692 229 1012 279 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 24 0 148 0 45 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 753 230 1073 404 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 298 843 472 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 298 843 472 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 298 843 472 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 606 304 926 478 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 148 0 165 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 734 257 1054 577 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #cambiarSubCanvasTipo 						#valueChangeSelector: #cambiarSubCanvasTipo ) 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 177 0 315 0 315 0 ) 					#name: #subCanvasTipo 					#flags: 0 ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambiarSubCanvasTipo ) 					#menu: #tiposUsuarios ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 177 0 315 0 315 0 ) 					#name: #subCanvasTipo 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPersonas|	listaPersonas := List new.	admin listaPersonas do: [:c|		listaPersonas add: (			(UserMessage new)				key: (c idPersona);				&gt;&gt; (c nombreYApellido)		).	].	super open.	(self widgetAt: #persona)		model: (ValueHolder with: listaPersonas);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.	self cambiarSubCanvasTipo.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 17, 2017' '6:54:17 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:54:17 on 17 de enero de 2017."</do-it><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [					]		siEsVendedor: [].</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [			((self widgetAt: #telefono) model) value: (item direccion).			((self widgetAt: #direccion) model) value: (item direccion).		]		siEsVendedor: [].</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).		]		siEsVendedor: [].</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 685 210 1005 340 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 64 0 150 0 85 0 ) 					#name: #telefono 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 110 0 150 0 131 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 319 843 457 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 64 0 150 0 85 0 ) 					#name: #telefono 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 110 0 150 0 131 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 319 843 457 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 64 0 150 0 85 0 ) 					#name: #telefono 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 110 0 150 0 131 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="administradorSpec">administradorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 319 843 457 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 64 0 150 0 85 0 ) 					#name: #telefono 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 110 0 150 0 131 0 ) 					#name: #legajo 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #clienteSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 315 843 453 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 64 0 150 0 85 0 ) 					#name: #telefono 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#flags: 16 					#label: 'Legajo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 110 0 150 0 131 0 ) 					#name: #legajo 					#flags: 24 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).			((self widgetAt: #legajo) model) value: (item legajo).		]		siEsVendedor: [].</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).		]		siEsVendedor: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).			((self widgetAt: #legajo) model) value: (item legajo).		].</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]);		idPersona: ((self widgetAt: #persona) selection key asNumber).	item		siEsAdministrador: []		siEsCliente: [			item				telefono: ((self widgetAt: #persona) selection key asNumber);				direccion: ((self widgetAt: #direccion) selection key asNumber).		]		siEsVendedor: [		].	admin agregarUsuario: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]);		idPersona: ((self widgetAt: #persona) selection key asNumber).	item		siEsAdministrador: []		siEsCliente: [			item				telefono: ((self widgetAt: #persona) selection key asNumber);				direccion: ((self widgetAt: #direccion) selection key asNumber).		]		siEsVendedor: [			item				telefono: ((self widgetAt: #persona) selection key asNumber);				direccion: ((self widgetAt: #direccion) selection key asNumber);				legajo: ((self widgetAt: #legajo) selection key asNumber)		].	admin agregarUsuario: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]);		idPersona: ((self widgetAt: #persona) selection key asNumber).	item		siEsAdministrador: []		siEsCliente: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString).		]		siEsVendedor: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString);				legajo: (((self widgetAt: #legajo) model value) asNumber).		].	admin agregarUsuario: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: id;		idPersona: ((self widgetAt: #persona) selection key asNumber).	item		siEsAdministrador: []		siEsCliente: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString).		]		siEsVendedor: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString);				legajo: (((self widgetAt: #legajo) model value) asNumber).		].	admin modificarUsuario: id por: item.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 713 339 1033 477 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 63 0 150 0 84 0 ) 					#name: #InputField1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 109 0 150 0 130 0 ) 					#name: #InputField2 ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="vendedorSpec">vendedorSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 524 315 844 453 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 63 0 150 0 84 0 ) 					#name: #telefono 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 109 0 150 0 130 0 ) 					#name: #legajo 					#type: #number ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #vendedorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 524 315 844 453 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 63 0 150 0 84 0 ) 					#name: #telefono 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 93 0 ) 					#label: 'Legajo' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 109 0 150 0 130 0 ) 					#name: #legajo 					#type: #number ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="clienteSpec">clienteSpec	"Tools.UIPainter new openOnClass: self andSelector: #clienteSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 315 843 453 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 18 0 150 0 39 0 ) 					#name: #direccion 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 47 0 ) 					#label: 'Teléfono' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 63 0 150 0 84 0 ) 					#name: #telefono 					#type: #number ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="administradorSpec">administradorSpec	"Tools.UIPainter new openOnClass: self andSelector: #administradorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 315 843 453 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="administradorSpec">administradorSpec	"Tools.UIPainter new openOnClass: self andSelector: #administradorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 315 843 453 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 788 136 1108 456 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambiarSubCanvasTipo ) 					#menu: #tiposUsuarios ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 146 0 129 0 ) 					#label: 'E-mail' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 146 0 148 0 315 0 169 0 ) 					#name: #email ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 177 0 315 0 315 0 ) 					#name: #subCanvasTipo 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	((self widgetAt: #email) model) value: (item email).	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).		]		siEsVendedor: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).			((self widgetAt: #legajo) model) value: (item legajo).		].</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: id;		idPersona: ((self widgetAt: #persona) selection key asNumber);		email: (((self widgetAt: #email) model value) asString).	item		siEsAdministrador: []		siEsCliente: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString).		]		siEsVendedor: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString);				legajo: (((self widgetAt: #legajo) model value) asNumber).		].	admin modificarUsuario: id por: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item tipo|	tipo := ((self widgetAt: #tipo) currentChoice).	item := (		(tipo = #administrador) ifTrue: [Administrador] ifFalse:[		(tipo = #cliente) ifTrue: [Cliente] ifFalse:[		(tipo = #vendedor) ifTrue: [Vendedor]]]	) new.	item		idUsuario: (admin autoIncrementoLista: (admin listaUsuarios) delParametro: [:x| x idUsuario]);		idPersona: ((self widgetAt: #persona) selection key asNumber);		email: (((self widgetAt: #email) model value) asString).	item		siEsAdministrador: []		siEsCliente: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString).		]		siEsVendedor: [			item				telefono: (((self widgetAt: #telefono) model value) asNumber);				direccion: (((self widgetAt: #direccion) model value) asString);				legajo: (((self widgetAt: #legajo) model value) asNumber).		].	admin agregarUsuario: item.</body></methods><methods><class-id>ModificarUsuario</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPersonas|	listaPersonas := List new.	admin listaPersonas do: [:c|		listaPersonas add: (			(UserMessage new)				key: (c idPersona);				&gt;&gt; (c nombreYApellido)		).	].	super open.	(self widgetAt: #persona)		model: (ValueHolder with: listaPersonas);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #email) model value: 'ejemplo@mail.com'.	(self widgetAt: #tipo) model: (ValueHolder with: #cliente); resetCurrent.	self cambiarSubCanvasTipo.</body></methods><methods><class-id>Persona</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idPersona := nil.	nombre := nil.	apellido := nil.	fechaNacimiento := nil.	sexo := nil.	dni := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Cliente</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idUsuario := nil.	idPersona := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Cliente</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	telefono := nil.	direccion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Vendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	telefono := nil.	direccion := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Vendedor</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	telefono := nil.	direccion := nil.	legajo := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 17, 2017' '8:55:21 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:55:21 on 17 de enero de 2017."</do-it><comment><class-id>SeleccionarVenta</class-id><body>SeleccionarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarVenta</class-id><body>SeleccionarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarVenta</class-id><body>SeleccionarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarVenta</class-id><body>SeleccionarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarUsuario</class-id><body>SeleccionarRoles has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarPersona</class-id><body>SeleccionarPersonas has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarParametrosGeneralesArticulo</class-id><body>SeleccionarParametrosGeneralesArticulo has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idArticulo	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idArticulo</body></comment><comment><class-id>SeleccionarParametroGeneral</class-id><body>SeleccionarParametroGeneral has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarCategoria</class-id><body>SeleccionarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>SeleccionarCategoria</class-id><body>SeleccionarCategoria has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.a</body></comment><class><name>PlanDeCompra</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPlan nombre cuotas interes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>PlanDeCompra</class-id> <selector>initialize</selector></remove-selector><do-it>PlanDeCompra organization removeCategory: #'initialize-release'</do-it><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlan">idPlan	^idPlan</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlan:">idPlan: anObject	idPlan := anObject</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre">nombre	^nombre</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombre:">nombre: anObject	nombre := anObject</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cuotas">cuotas	^cuotas</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cuotas:">cuotas: anObject	cuotas := anObject</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="interes">interes	^interes</body></methods><methods><class-id>PlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="interes:">interes: anObject	interes := anObject</body></methods><do-it>rv := RegistrarVenta new.</do-it><do-it>rv open.</do-it><do-it>la := (rv widgetAt: #listaArticulos).</do-it><do-it>la := (rv widgetAt: #listaArticulos).</do-it><do-it>la := (rv widgetAt: #tablaArticulos).</do-it><do-it>la columnDescriptors.</do-it><do-it>la columnDescriptors asOrderedCollection.</do-it><do-it>la := (rv widgetAt: #tablaArticulos).aString := 'dasd'.aNumber := 80.	dataset := (rv widgetAt: #tablaArticulos).	columnCollection := dataset columnDescriptors asOrderedCollection.	columnSpec := columnCollection first description copy.	newColumnNumber := columnCollection size + 1.	aspectSymbol := ('selectedRow ', newColumnNumber printString) asSymbol.	columnSpec				label: aString;				model: aspectSymbol;				width: aNumber.	newColumn := columnSpec columnWithBuilder: rv builder.	columnCollection add: newColumn.	dataset columnDescriptors: columnCollection.</do-it><do-it>la := (rv widgetAt: #tablaArticulos).aString := 'dasd'.aNumber := 80.	dataset := (rv widgetAt: #tablaArticulos).	columnCollection := dataset columnDescriptors asOrderedCollection.	columnSpec := columnCollection first description copy.	newColumnNumber := columnCollection size + 1.	aspectSymbol := ('selectedRow ', newColumnNumber printString) asSymbol.	columnSpec				label: aString;				model: aspectSymbol;				width: aNumber.	newColumn := columnSpec columnWithBuilder: rv builder.	columnCollection add: newColumn.	dataset columnDescriptors: columnCollection.</do-it><do-it>	dataset := (rv widgetAt: #tablaArticulos).</do-it><do-it>dataset sequence add: #('asda' 'dad' 'dasda').</do-it><do-it>dataset sequence atIndex: 1.</do-it><do-it>dataset sequence add: #('asda' 'dad' 'dasda').</do-it><do-it>dataset sequence add: #('asda' 'dad' 'dasda' 'dasdsa').</do-it><do-it>dataset sequence add: ( List new	add: 'dasdasd';	add: 'dasdasd';	add: 'dasdasd';	add: 'dasdasd').</do-it><do-it>dataset sequence add: ( List new	add: (#asdas &gt;&gt; 324);	add: 'dasdasd';	add: 'dasdasd';	add: 'dasdasd'). 'dasdasd'</do-it><do-it>dataset sequence add: ( List new	add: (#asdas &gt;&gt; 324);	add: (#asdas &gt;&gt; 324);	add: (#asdas &gt;&gt; 324);	add: (#asdas &gt;&gt; 324)).</do-it><do-it>rv := RegistrarVenta new.rv open.la := (rv widgetAt: #tablaArticulos).aString := 'dasd'.aNumber := 80.	dataset := (rv widgetAt: #tablaArticulos).	columnCollection := dataset columnDescriptors asOrderedCollection.	columnSpec := columnCollection first description copy.	newColumnNumber := columnCollection size + 1.	aspectSymbol := ('selectedRow ', newColumnNumber printString) asSymbol.	columnSpec				label: aString;				model: aspectSymbol;				width: aNumber.	newColumn := columnSpec columnWithBuilder: rv builder.	columnCollection add: newColumn.	dataset columnDescriptors: columnCollection.</do-it><do-it>dataset sequence add: newColumn.</do-it><do-it>dataset columnDescriptors</do-it><do-it>dataset columnDescriptors</do-it><do-it>dataset sequence add: dataset columnDescriptors.</do-it><do-it>dataset sequence add: (dataset columnDescriptors copy).</do-it><do-it>rv := RegistrarVenta new.rv open.la := (rv widgetAt: #tablaArticulos).aString := 'dasd'.aNumber := 80.	dataset := (rv widgetAt: #tablaArticulos).	columnCollection := dataset columnDescriptors asOrderedCollection.	columnSpec := columnCollection first description copy.	newColumnNumber := columnCollection size + 1.	aspectSymbol := ('selectedRow ', newColumnNumber printString) asSymbol.	columnSpec				label: aString;				model: aspectSymbol;				width: aNumber.	newColumn := columnSpec columnWithBuilder: rv builder.	columnCollection add: newColumn.	dataset columnDescriptors: columnCollection.</do-it><do-it>dataset sequence add: ( Array	with: (#asdas &gt;&gt; 324)	with: (#asdas &gt;&gt; 324)	with: (#asdas &gt;&gt; 324)	with: (#asdas &gt;&gt; 324)).</do-it><do-it>dataset sequence add: #(dasd dasda dsadas dasd).</do-it><do-it>dataset sequence add: #(dasd dasda dsadas dasd).</do-it><do-it>dataset sequence add: #(dasd dasda dsadas dasd).</do-it><do-it>dataset sequence add: (OrderedCollection new	add: (ProtocolAdaptor subject: 'dasdas');	add: (ProtocolAdaptor subject: 'dasdas');	add: (ProtocolAdaptor subject: 'dasdas');	add: (ProtocolAdaptor subject: 'dasdas')).</do-it><do-it>dataset sequence add: (OrderedCollection new	add: (ProtocolAdaptor subject: 'dasdas');	add: (ProtocolAdaptor subject: 'dasdas');	add: (ProtocolAdaptor subject: 'dasdas');	add: (ProtocolAdaptor subject: 'dasdas')).</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 17, 2017' '11:59:35 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:59:35 on 17 de enero de 2017."</do-it><do-it>'dasda' asValue</do-it><do-it>dataset sequence add: (OrderedCollection new	add: ('dasd' asValue);add: ('dasd' asValue);add: ('dasd' asValue);add: ('dasd' asValue)).</do-it><do-it>dataset sequence add: (OrderedCollection new	add: ('dasd' asValue);add: ('dasd' asValue);add: ('dasd' asValue);add: ('dasd' asValue)).</do-it><do-it>dataset sequence add: (OrderedCollection new	add: ('dasd' asValue);	add: ('dasd' asValue);	add: ('dasd' asValue);	add: ('dasd' asValue)).</do-it><do-it>dataset sequence add: #hola &gt;&gt; #('dasd' 'asdasd' 'dsad' 'dasdasd').</do-it><do-it>dataset sequence add: #hola &gt;&gt; #('dasd' 'asdasd' 'dsad' 'dasdasd').</do-it><do-it>rv := RegistrarVenta new.rv open.la := (rv widgetAt: #tablaArticulos).aString := 'dasd'.aNumber := 80.	dataset := (rv widgetAt: #tablaArticulos).	columnCollection := dataset columnDescriptors asOrderedCollection.	columnSpec := columnCollection first description copy.	newColumnNumber := columnCollection size + 1.	aspectSymbol := ('selectedRow ', newColumnNumber printString) asSymbol.	columnSpec				label: aString;				model: aspectSymbol;				width: aNumber.	newColumn := columnSpec columnWithBuilder: rv builder.	columnCollection add: newColumn.	dataset columnDescriptors: columnCollection.</do-it><do-it>cc := columnCollection copy.</do-it><do-it>cc := columnCollection copy.</do-it><do-it>dataset sequence asOrderedCollection add: cc.</do-it><do-it>dataset sequence asOrderedCollection.</do-it><do-it>dataset sequence asOrderedCollection.</do-it><do-it>dataset sequence asOrderedCollection add: cc.</do-it><do-it>dataset sequence asOrderedCollection.</do-it><do-it>dataset sequence.</do-it><do-it>dataset sequence add: cc.</do-it><do-it>adhoc := AdHocQueryTool new.</do-it><do-it>adhoc open.</do-it><do-it>adhoc := AdHocQueryTool new.</do-it><do-it>adhoc open.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 609 136 1249 616 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #Table1 ) ) ) )</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.</body></methods><do-it>RegistrarVenta organization addCategory: #accessing</do-it><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaArticulos">listaArticulos	|rowMap|	rowMap := RowAdaptor adaptForAspects: #( #nombre #idCategoria).   	^TableAdaptor       		on: (admin listaArticulos)      		adaptors: rowMap.</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 627 206 1267 686 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #listaArticulos ) ) ) )</body></methods><do-it>rv := RegistrarVenta new.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list |	super initialize.	"Create a collection of sightings data."	"	list := TwoDList		on: #('Vulcans' 188 173 192 'Romulans' 26 26 452) copy		columns: 4		rows: 2.	sightingsTable := SelectionInTable with: list."	"Create a table interface and load it with the sightings."	"tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right."</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"| list |	super initialize.	Create a collection of sightings data."	"	list := TwoDList		on: #('Vulcans' 188 173 192 'Romulans' 26 26 452) copy		columns: 4		rows: 2.	sightingsTable := SelectionInTable with: list."	"Create a table interface and load it with the sightings."	"tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right."</body></methods><class><name>RegistrarVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>RegistrarVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>RegistrarVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface cellContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list |	super initialize.	"Create a collection of sightings data."		list := TwoDList		on: #('Vulcans' 188 173 192 'Romulans' 26 26 452) copy		columns: 4		rows: 2.	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sightingsTable">sightingsTable	^sightingsTable</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sightingsTable:">sightingsTable: anObject	sightingsTable := anObject</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface:">tableInterface: anObject	tableInterface := anObject</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cellContents">cellContents	^cellContents</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cellContents:">cellContents: anObject	cellContents := anObject</body></methods><remove-selector><class-id>RegistrarVenta</class-id> <selector>sightingsTable:</selector></remove-selector><remove-selector><class-id>RegistrarVenta</class-id> <selector>tableInterface:</selector></remove-selector><remove-selector><class-id>RegistrarVenta</class-id> <selector>cellContents:</selector></remove-selector><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface ) ) ) )</body></methods><do-it>rv := RegistrarVenta new.</do-it><do-it>rv open.</do-it><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos :=(admin listaArticulos collect: [:x| (Array		with: (x nombre)		with: (x idCategoria)	)]).		list := TwoDList		on: #('Vulcans' 188 173 192 'Romulans' 26 26 452) copy		columns: 4		rows: 2.	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos :=(admin listaArticulos collect: [:x| (Array		with: (x nombre)		with: (x idCategoria)	)]).		list := TwoDList		on: listaArticulos		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos :=(admin listaArticulos collect: [:x| (Array		with: (x nombre)		with: (x idCategoria)	)]).		list := TwoDList		on: listaArticulos copy		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := Array new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria).	]).		list := TwoDList		on: listaArticulos copy		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := Array new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := listaArticulos new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('Visiting Race' '1992' '1993' '1994');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><do-it>rv initialize.</do-it><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('NombreArticulo' 'idCategoria');	rowLabelsArray: #(1 2);	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('NombreArticulo' 'idCategoria');	rowLabelsArray: nil;	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos |	super initialize.	"Create a collection of sightings data."		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #('NombreArticulo' 'idCategoria');	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><do-it>rv initialize.</do-it><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size) / 2.	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #();	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size) / 2.	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #();	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: (listaArticulos size) / (labels size).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #();	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: #();	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface columnWidths: #(100 40).	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right #right #right);	columnLabelsFormats: #(#left #right #right #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><do-it>rv initialize.</do-it><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	"Create a table interface and load it with the sightings."	tableInterface := TableInterface new		selectionInTable: sightingsTable.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20.	tableInterface	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').	listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.</body></methods><do-it>rv admin: admin.</do-it><do-it>rv initialize.</do-it><do-it>rv open.</do-it><remove-selector><class-id>RegistrarVenta</class-id> <selector>initialize</selector></remove-selector><do-it>RegistrarVenta organization removeCategory: #'initialize-release'</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|	super initialize.	"Create a collection of sightings data."		labels :=#('NombreArticulo' 'idCategoria').		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels :=#('NombreArticulo' 'idCategoria').		listaArticulos := List new.	(admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	]).		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels :=#('NombreArticulo' 'idCategoria').	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><do-it>rv := RegistrarVenta new.</do-it><do-it>rv admin: admin.</do-it><do-it>rv initialize.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	labels := labels asArray.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	labels := labels asArray.	listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 40);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(100 100);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(128 100);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(256 100);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 20;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(256 100);	columnLabelsArray: labels;	"rowLabelsArray: nil;"	rowLabelsWidth: 24;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(256 100);	columnLabelsArray: labels asArray;	"rowLabelsArray: nil;"	rowLabelsWidth: 24;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: 2		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(256 100);	columnLabelsArray: labels copy asArray;	"rowLabelsArray: nil;"	rowLabelsWidth: 24;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: (labels size)		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface	columnWidths: #(256 100);	columnLabelsArray: labels copy asArray;	"rowLabelsArray: nil;"	rowLabelsWidth: 24;	elementFormats: #(#left #right);	columnLabelsFormats: #(#left #right);	rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|		labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].		list := TwoDList		on: listaArticulos copy asArray		columns: (labels size)		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].	list := TwoDList		on: listaArticulos copy asArray		columns: (labels size)		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].	list := TwoDList		on: listaArticulos copy asArray		columns: (labels size)		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	"admin listaParametrosGenerales do: [:x| labels add: (x nombre)]."	listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].	list := TwoDList		on: listaArticulos copy asArray		columns: (labels size)		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list listaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	listaArticulos := List new.	admin listaArticulos do: [:x|		listaArticulos			add: (x nombre);			add: (x idCategoria)	].	list := TwoDList		on: listaArticulos copy asArray		columns: (labels size)		rows: ((listaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:x|		tablaArticulos			add: (x nombre);			add: (x idCategoria)		admin listaParametrosGenerales do: [:p| admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:x|		tablaArticulos			add: (x nombre);			add: (x idCategoria)		admin listaParametrosGenerales do: [:p| tablaArticulos add: ((admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)) nombre)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:x|		tablaArticulos			add: (x nombre);			add: (x idCategoria).		admin listaParametrosGenerales do: [:p| tablaArticulos add: ((admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)) nombre)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:x|		tablaArticulos			add: (x nombre);			add: (x idCategoria).		admin listaParametrosGenerales do: [:p| tablaArticulos add: ((admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)) valor)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p| tablaArticulos add: ((admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)) valor)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p| tablaArticulos add: (			(admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)) valor)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p| tablaArticulos add: (			(admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)) valor)].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		elementFormat: #left;		columnLabelsFormat: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);		columnLabelsFormats: #(#left #right);"		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><do-it>rv open.</do-it><do-it>rv open.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 18, 2017' '11:03:00 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:03:00 on 18 de enero de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '1:41:50 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 1:41:50 on 19 de enero de 2017."</do-it><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormat: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'NombreArticulo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'idCategoria'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: (a idCategoria).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre)		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 100);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>rv open.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar item' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 0.5 -5 1 ) 					#model: #closeRequest 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><do-it>rv open.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 420 80 ) 			#max: #(#{Core.Point} 640 80 ) 			#bounds: #(#{Graphics.Rectangle} 473 344 893 424 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 28 0 ) 					#name: #botonRegistrarVenta 					#model: #registarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -5 1 25 0.5 ) 					#name: #botonRegistrarCalificacion 					#model: #registrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="registrarCalificaciones">registrarCalificaciones</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="registrarVenta">registrarVenta</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="registrarCalificacion">registrarCalificacion</body></methods><remove-selector><class-id>MenuPrincipal</class-id> <selector>registrarCalificaciones</selector></remove-selector><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 420 80 ) 			#max: #(#{Core.Point} 640 80 ) 			#bounds: #(#{Graphics.Rectangle} 473 344 893 424 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 28 0 ) 					#name: #botonRegistrarVenta 					#model: #registrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -5 1 25 0.5 ) 					#name: #botonRegistrarCalificacion 					#model: #registrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="registrarVenta">registrarVenta	self abrirInterfaz: RegistrarVenta.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 640 480 ) 			#bounds: #(#{Graphics.Rectangle} 585 136 1225 616 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #closeRequest 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #aceptar 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #closeRequest 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 256);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 128);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaArticulos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><class><name>ModificarPrecio</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarPrecio</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ModificarPlanDeCompra</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarPlanDeCompra</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>ModificarPlanDeCompra</class-id><body>ModificarPlanDeCompra has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ModificarPrecio</class-id><body>ModificarPrecio has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar</body></methods><remove-selector><class-id>RegistrarVenta</class-id> <selector>listaArticulos</selector></remove-selector><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	(sightingsTable) d.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|test|	test := (sightingsTable).	test d.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|test|	test := sightingsTable selectionIndexHolder.	test .</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|test|	test := sightingsTable selectionIndexHolder.	test c.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|test|	test := sightingsTable selectionIndexHolder value.	test c.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|test|	test := sightingsTable selectionIndexHolder value y.	test c.</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 606 304 926 478 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 148 0 165 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><remove-selector><class-id>ModificarPrecio class</class-id> <selector>windowSpec</selector></remove-selector><do-it>ModificarPrecio class organization removeCategory: #'instance creation'</do-it><do-it>ModificarPrecio class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 606 304 926 478 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 148 0 165 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 891 342 1211 516 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 145 0 105 0 166 0 ) 					#name: #InputField1 ) ) ) )</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Modificar parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 727 319 1047 493 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 316 0 117 0 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 105 0 165 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) ) ) )</body></methods><do-it>ModificarPlanDeCompra class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 929 196 1249 436 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 8 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 62 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 63 0 ) 					#flags: 16 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 315 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 81 0 150 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 81 0 315 0 102 0 ) 					#name: #direccion 					#flags: 24 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 255 0 72 0 ) 							#label: 'Fecha de Nacimiento' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 10 0 23 0 ) 							#label: 'Día' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 71 0 23 0 ) 							#label: 'Mes' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 175 0 23 0 ) 							#label: 'Año' ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 10 0 40 0 65 0 61 0 ) 							#name: #dia 							#helpText: '1' 							#type: #number 							#low: 1 							#high: 31 							#interval: 1 ) 						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 70 0 40 0 170 0 61 0 ) 							#name: #mes 							#menu: #meses ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 175 0 40 0 245 0 61 0 ) 							#name: #anio 							#helpText: '1900' 							#type: #number 							#formatString: '0' 							#low: 1900 							#high: 2017 							#interval: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 5 0 163 0 260 0 235 0 ) 						#name: #fechaNacimiento ) ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Agregar plan de compra' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 842 418 1162 472 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 6 0 ) 					#label: 'Cuotas' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 94 0 6 0 ) 					#label: 'Interés' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 70 0 46 0 ) 					#name: #cuotas 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 48 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 24 0 164 0 45 0 ) 					#name: #interes 					#helpText: '1900' 					#type: #number 					#formatString: '0%' 					#low: 0 					#high: 100 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="listaClientes">listaClientes	^listaUsuarios select: [:x| x esCliente].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="listaAdministradores">listaAdministradores	^listaUsuarios select: [:x| x esAdministrador].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="listaVendedores">listaVendedores	^listaUsuarios select: [:x| x esVendedor].</body></methods><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #listaAdministradores under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #listaClientes under: #personas</do-it><do-it>ProyectoFinal organization addCategory: #personas</do-it><do-it>ProyectoFinal classifySymbol: #listaVendedores under: #personas</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '5:20:47 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 5:20:47 on 19 de enero de 2017."</do-it><do-it> 'Hello how are you? I am fine. Thank you and you?' matchesPattern: 'h' ignoreCase: true do: [:x|x].</do-it><do-it> 'Hello how are you? I am fine. Thank you and you?' matchesPattern: 'h' ignoreCase: true do: [:x|x]. </do-it><do-it>ISO8859L1String new.</do-it><do-it>ISO8859L1String fromBytes: 'dasdads'.</do-it><do-it> 'dasdads' class</do-it><do-it>(ISO8859L1String fromBytes: 'dasdads') copyReplaceAll: 'das' with: 'a'.</do-it><do-it>(ISO8859L1String fromBytes: 'dasdads') copyReplaceAll: 'das' with: 'a' asString.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	self mainWindow label: ((ISO8859L1String fromBytes: (self mainWindow label)) copyReplaceAll: 'Nuevo' with: 'Editar' asString).	self mainWindow label: ((ISO8859L1String fromBytes: (self mainWindow label)) copyReplaceAll: 'Nueva' with: 'Editar' asString).	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) isVisible: true.	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) isVisible: true.	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	self mainWindow label: ((ISO8859L1String fromBytes: (self mainWindow label)) copyReplaceAll: 'Nuevo' with: 'Editar' asString).	self mainWindow label: ((ISO8859L1String fromBytes: (self mainWindow label)) copyReplaceAll: 'Nueva' with: 'Editar' asString).</body></methods><methods><class-id>ModificarArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo item' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 274 843 494 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Categoria del artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 23 0 316 0 115 0 ) 					#name: #categoria 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 122 0 ) 					#label: 'Nombre del artículo' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 142 0 148 0 163 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 173 0 ) 					#label: 'Tipo del artículo' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 192 0 103 0 213 0 ) 					#name: #tipo 					#helpText: '' 					#menu: #productoServicio ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 316 0 213 0 ) 					#name: #botonEditarParametros 					#flags: 24 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarCategoria class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 297 843 471 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneral class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 359 843 409 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Nombre parametro general' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 24 0 148 0 45 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarParametroGeneralArticulo class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 297 843 471 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 148 0 165 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarPersona class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva persona' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 8 0 ) 					#label: 'Nombre' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 8 0 ) 					#label: 'Apellido' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 117 0 ) 					#label: 'Sexo' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 62 0 ) 					#label: 'DNI' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 160 0 63 0 ) 					#flags: 16 					#label: 'Dirección' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 27 0 150 0 48 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 159 0 27 0 315 0 48 0 ) 					#name: #apellido ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 81 0 150 0 102 0 ) 					#name: #dni 					#helpText: '' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 81 0 315 0 102 0 ) 					#name: #direccion 					#flags: 24 ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 134 0 106 0 155 0 ) 					#name: #sexo 					#menu: #femeninoMasculino ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 255 0 72 0 ) 							#label: 'Fecha de Nacimiento' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 10 0 23 0 ) 							#label: 'Día' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 71 0 23 0 ) 							#label: 'Mes' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 175 0 23 0 ) 							#label: 'Año' ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 10 0 40 0 65 0 61 0 ) 							#name: #dia 							#helpText: '1' 							#type: #number 							#low: 1 							#high: 31 							#interval: 1 ) 						#(#{UI.MenuButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 70 0 40 0 170 0 61 0 ) 							#name: #mes 							#menu: #meses ) 						#(#{UI.SpinButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 175 0 40 0 245 0 61 0 ) 							#name: #anio 							#helpText: '1900' 							#type: #number 							#formatString: '0' 							#low: 1900 							#high: 2017 							#interval: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 5 0 163 0 260 0 235 0 ) 						#name: #fechaNacimiento ) ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo plan de compra' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 357 843 411 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 6 0 ) 					#label: 'Cuotas' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 94 0 6 0 ) 					#label: 'Interés' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 70 0 46 0 ) 					#name: #cuotas 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 48 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 24 0 164 0 45 0 ) 					#name: #interes 					#helpText: '1900' 					#type: #number 					#formatString: '0%' 					#low: 0 					#high: 100 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 297 843 471 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 316 0 117 0 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 105 0 165 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) ) ) )</body></methods><methods><class-id>ModificarUsuario class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 224 843 544 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 9 0 ) 					#label: 'Persona' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 29 0 316 0 119 0 ) 					#name: #persona 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 129 0 ) 					#label: 'Tipo:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 148 0 135 0 169 0 ) 					#name: #tipo 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambiarSubCanvasTipo ) 					#menu: #tiposUsuarios ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 146 0 129 0 ) 					#label: 'E-mail' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 146 0 148 0 315 0 169 0 ) 					#name: #email ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 177 0 315 0 315 0 ) 					#name: #subCanvasTipo 					#flags: 0 ) ) ) )</body></methods><methods><class-id>ModificarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'Nueva Venta' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 473 284 893 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo artículo'</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nueva categoría'</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo parámetro general'</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo parámetro general del artículo'</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nueva persona'</body></methods><remove-selector><class-id>ModificarPlanDeCompra</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarPlanDeCompra organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo usuario'</body></methods><methods><class-id>ModificarUsuario</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarUsuarioPorId: id).	(self widgetAt: #persona) setSelectionIndex: ((self widgetAt: #persona) sequence findIndexOf: ((self widgetAt: #persona) sequence detect: [:x| (x key) = (item idPersona)])); updateModel.	((self widgetAt: #email) model) value: (item email).	(self widgetAt: #tipo) model: (ValueHolder with: (item		siEsAdministrador: [#administrador]		siEsCliente: [#cliente]		siEsVendedor: [#vendedor])	); resetCurrent.	self cambiarSubCanvasTipo.	item		siEsAdministrador: []		siEsCliente: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).		]		siEsVendedor: [			((self widgetAt: #telefono) model) value: (item telefono).			((self widgetAt: #direccion) model) value: (item direccion).			((self widgetAt: #legajo) model) value: (item legajo).		].</body></methods><methods><class-id>ModificarPersona</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarParametroGeneralArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item parametro|	super cargar.	item := (admin buscarParametroGeneral: id delArticulo: idArticulo).	parametro := (admin buscarParametroGeneralPorId: (item idParametro)).	(self widgetAt: #parametro) sequence add: ( (UserMessage new)		key: (parametro idParametro);		&gt;&gt; (parametro nombre)	).	(self widgetAt: #parametro) setSelectionIndex: ((self widgetAt: #parametro) sequence findIndexOf: ((self widgetAt: #parametro) sequence detect: [:x| (x key) = (item idParametro)])); updateModel.	(self widgetAt: #valor) model value: (item valor).</body></methods><methods><class-id>ModificarParametroGeneral</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarParametroGeneralPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).</body></methods><methods><class-id>ModificarCategoria</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarCategoriaPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x key) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #botonEditarParametros) isVisible: true.	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.</body></methods><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios lista guiMenuPrincipal archivoGuardado rutaArhivoGuardado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra guiMenuPrincipal archivoGuardado rutaArhivoGuardado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPrecios">listaPrecios	^listaPrecios</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPrecios:">listaPrecios: anObject	listaPrecios := anObject</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPlanesDeCompra">listaPlanesDeCompra	^listaPlanesDeCompra</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listaPlanesDeCompra:">listaPlanesDeCompra: anObject	listaPlanesDeCompra := anObject</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="rutaArhivoGuardado">rutaArhivoGuardado	^rutaArhivoGuardado</body></methods><methods><class-id>ProyectoFinal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="rutaArhivoGuardado:">rutaArhivoGuardado: anObject	rutaArhivoGuardado := anObject</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>listaPlanesDeCompra:</selector></remove-selector><remove-selector><class-id>ProyectoFinal</class-id> <selector>listaPrecios:</selector></remove-selector><remove-selector><class-id>ProyectoFinal</class-id> <selector>rutaArhivoGuardado:</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	'ultimo_guardado' asFilename exists	ifTrue: [self cargarArchivo]	ifFalse: [rutaArhivoGuardado := 'info.ipf'].	archivoGuardado := rutaArhivoGuardado asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado :=  ('ultimo_guardado' asFilename exists		ifTrue: ['otro.ipf']		ifFalse: ['info.ipf']) asFilename.	rutaArhivoGuardado asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['otro.ipf']		ifFalse: ['info.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado writeStream nextPutAll: (self informacionSerializada); flush.	'ultimo_guardado' asFilename writeStream nextPutAll: (archivoGuardado asString); flush.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: [archivoGuardado contentsOfEntireFile]		ifFalse: ['info.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['info.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ObjetoConRoles</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	rol := nil.	roles := Set new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="buscarUsuarioPorId:">buscarUsuarioPorId: unId	|usuario|	usuario := (listaUsuarios detect: [:e| (e idUsuario) = unId ] ifNone: []).	usuario ifNotNil: [		^(self buscarPersonaPorId: (usuario idPersona)).	]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="buscarUsuarioPorId:">buscarUsuarioPorId: unId	|usuario persona|	usuario := (listaUsuarios detect: [:e| (e idUsuario) = unId ] ifNone: []).	usuario ifNotNil: [		^((self buscarPersonaPorId: (usuario idPersona))).	]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="buscarUsuarioPorId:">buscarUsuarioPorId: unId	|usuario persona|	usuario := (listaUsuarios detect: [:e| (e idUsuario) = unId ] ifNone: []).	usuario ifNotNil: [		persona := self buscarPersonaPorId: (usuario idPersona).		persona			agregarRol: usuario;			asumirRol: [:x| x = usuario].		^persona	]</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarUsuario</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarUsuario: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarItem</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	self closeRequest.	self class new		admin: admin;		open.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '7:45:50 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 7:45:50 on 19 de enero de 2017."</do-it><class><name>Precio</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idVendedor precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '8:52:08 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 8:52:08 on 19 de enero de 2017."</do-it><class><name>Precio</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idVendedor activo precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor">idVendedor	^idVendedor</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idVendedor:">idVendedor: anObject	idVendedor := anObject</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="activo">activo	^activo</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="activo:">activo: anObject	activo := anObject</body></methods><do-it>Smalltalk</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #listaPrecios under: #articulos</do-it><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #listaPlanesDeCompra under: #articulos</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="listaPreciosActivos">listaPreciosActivos	^listaUsuarios select: [:x| x activo].</body></methods><methods><class-id>Precio</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	precio := nil.		activo := true.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Precio</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	idVendedor := nil.	precio := nil.	activo := true.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="agregarPrecio:">agregarPrecio: unPrecio	listaPrecios add: unPrecio.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="agregarPlanDeCompra:">agregarPlanDeCompra: unPlan	listaPlanesDeCompra add: unPlan.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPrecioPorId:">buscarPrecioPorId: unId	^(listaPrecios detect: [:e| (e idPrecio) = unId ] ifNone: []).</body></methods><class><name>Precio</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPrecio idArticulo idVendedor activo precio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>Precio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPlanDeCompraPorId:">buscarPlanDeCompraPorId: unId	^(listaPrecios detect: [:e| (e idPlan) = unId ] ifNone: []).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="eliminarPrecio:">eliminarPrecio: unId	listaPrecios removeAllSuchThat: [:x| unId = (x idPrecio)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="eliminarPlanDeCompra:">eliminarPlanDeCompra: unId	listaPrecios removeAllSuchThat: [:x| unId = (x idPlan)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="eliminarPlanDeCompra:">eliminarPlanDeCompra: unId	listaPlanesDeCompra removeAllSuchThat: [:x| unId = (x idPlan)].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaPrecios := List new.	listaPlanesDeCompra := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>rutaArhivoGuardado</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>rutaArhivoGuardado</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra guiMenuPrincipal archivoGuardado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>ProyectoFinal</class-id> <selector>rutaArhivoGuardado</selector></remove-selector><do-it>ProyectoFinal organization removeCategory: #accessing</do-it><do-it>admin := ProyectoFinal auto.</do-it><class><name>SeleccionarPrecios</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarPrecios</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>SeleccionarPlanesDeCompra</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPersonas) texto: [:x| x nombreYApellido] valor: [:x| x idPersona].</body></methods><remove-selector><class-id>SeleccionarPrecios</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarPrecios organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': $' ,		(x precio)	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarPersonaPorId: (x idVendedor)) nombreYApellido) , '($' ,		(x precio) , ')'	] valor: [:x| x idPrecio].</body></methods><do-it>SeleccionarPrecios organization addCategory: #accessing</do-it><methods><class-id>SeleccionarPrecios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarPrecio</body></methods><do-it>SeleccionarPlanesDeCompra organization addCategory: #accessing</do-it><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarPlanDeCompra</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarPersonaPorId: (x idVendedor)) nombreYApellido) , '($' ,		(x precio) , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x| 'Cuotas: ' , (x cuotas) , '. Interés: ' , (x interes) ] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x| 'Cuotas: ' , (x cuotas) , '| Interés: ' , (x interes) ] valor: [:x| x idPrecio].</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPrecios">administrarPrecios	self abrirInterfaz: SeleccionarPrecios.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarPlanesDeCompra">administrarPlanesDeCompra	self abrirInterfaz: SeleccionarPlanesDeCompra.</body></methods><remove-selector><class-id>ModificarPrecio</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarPrecio organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarPrecios</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarPlanesDeCompra</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar planes de compra'</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar precios'</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo plan de compra'</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo precio'</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 731 316 1051 606 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 244 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 261 0 105 0 282 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) ) ) )</body></methods><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idPrecio calificacionVendedor calificacionCliente comentario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><remove-selector><class-id>Venta</class-id> <selector>idVendedor</selector></remove-selector><remove-selector><class-id>Venta</class-id> <selector>idVendedor:</selector></remove-selector><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '11:08:43 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 11:08:43 on 19 de enero de 2017."</do-it><do-it>ModificarPrecio organization addCategory: #'interface opening'</do-it><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias um|	super open.	listaCategorias := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaCategorias add: um.	].	(self widgetAt: #categoria)		model: (ValueHolder with: listaCategorias);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	"(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent."</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:c|		um := UserMessage new.		um key: (c idCategoria).		um &gt;&gt; (c nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idVendedor)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	"(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent."</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaCategorias do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idVendedor)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	"(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent."</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaArticulos do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idVendedor)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	"(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent."</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaArticulos do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	"(self widgetAt: #tipo) model: (ValueHolder with: #producto); resetCurrent."</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '11:26:01 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 11:26:01 on 19 de enero de 2017."</do-it><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString);		tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString);		tipo: ((self widgetAt: #tipo) currentChoice).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarArticulo: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarPrecio: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPrecioPorId: id).	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarPrecio: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPrecioPorId: id).	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin modificarPrecio: id por:item.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPrecio:por:">modificarPrecio: unIdPrecio por: unPrecio	listaPrecios := (listaArticulos collect: [:a|		((a idPrecio) = unIdPrecio)			ifTrue: [unPrecio]			ifFalse: [a].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPrecio:por:">modificarPrecio: unIdPrecio por: unPrecio	listaPrecios := (listaPrecios collect: [:a|		((a idPrecio) = unIdPrecio)			ifTrue: [unPrecio]			ifFalse: [a].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPlanDeCompra:por:">modificarPlanDeCompra: unId por: unObjeto	listaPrecios := (listaPrecios collect: [:a|		((a idPlan) = unId)			ifTrue: [unObjeto]			ifFalse: [a].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPlanDeCompra:por:">modificarPlanDeCompra: unId por: unObjeto	listaPlanesDeCompra := (listaPrecios collect: [:a|		((a idPlan) = unId)			ifTrue: [unObjeto]			ifFalse: [a].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPlanDeCompra:por:">modificarPlanDeCompra: unId por: unObjeto	listaPlanesDeCompra := (listaPlanesDeCompra collect: [:a|		((a idPlan) = unId)			ifTrue: [unObjeto]			ifFalse: [a].	]).</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarArticuloPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #precio) model value: (item precio).</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarArticuloPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #precio) model value: (item precio).</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idVendedor: ((self widgetAt: #vendedor) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarPrecio: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPrecioPorId: id).	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idVendedor: ((self widgetAt: #vendedor) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin modificarPrecio: id por:item.</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		(x precio) , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		(x precio) asString , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		((x precio) asString) , ')'	] valor: [:x| x idPrecio].</body></methods><do-it>10 displayString</do-it><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		((x precio) displayString) , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #precio) model value: (item precio).</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Vendedor';		add: 'Precio';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: (x precio);			add: (x precio);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: (x precio);			add: (x nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: (x precio);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: '$' , (x precio);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: ('$' , (x precio));			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPrecios do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: ('$' , (x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index|	index := sightingsTable selectionIndexHolder value y.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index id|	index := sightingsTable selectionIndexHolder value y.	</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index id|	index := sightingsTable selectionIndexHolder value y.	admin listaPrecios at: index.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	((self widgetAt: #cuotas) model) value: 1.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item nombre).	((self widgetAt: #apellido) model) value: (item apellido).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item cuotas).	((self widgetAt: #apellido) model) value: (item apellido).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item cuotas).	((self widgetAt: #apellido) model) value: (item interes).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #nombre) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPlanDeCompraPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).	"((self widgetAt: #direccion) model) value: (item direccion)."	((self widgetAt: #dni) model) value: (item dni).	((self widgetAt: #dia) model) value: (item fechaNacimiento dayOfMonth).	(self widgetAt: #mes) model: (ValueHolder with: (item fechaNacimiento monthIndex)); resetCurrent.	((self widgetAt: #anio) model) value: (item fechaNacimiento year).	(self widgetAt: #sexo) model: (ValueHolder with: (item sexo)); resetCurrent.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPlanDeCompraPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarParametroGeneralPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPlanDeCompraPorId: id).	item nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPlanDeCompraPorId: id).	item cuotas: ((self widgetAt: #cuotas) model value).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPlanDeCompraPorId: id).	item cuotas: ((self widgetAt: #cuotas) model value).	item interes: ((self widgetAt: #interes) model value).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPlanDeCompraPorId: id).	item		cuotas: ((self widgetAt: #cuotas) model value);		interes: ((self widgetAt: #interes) model value).	admin modificarParametroGeneral: id por: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]);		nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarParametroGeneral: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]);		nombre: (((self widgetAt: #nombre) model value) asString).	admin agregarPlanDeCompra: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaParametrosGenerales) delParametro: [:x| x idParametro]);		cuotas: ((self widgetAt: #cuotas) model value);		interes: ((self widgetAt: #interes) model value).	admin agregarPlanDeCompra: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaPlanesDeCompra) delParametro: [:x| x idPlan]);		cuotas: ((self widgetAt: #cuotas) model value);		interes: ((self widgetAt: #interes) model value).	admin agregarPlanDeCompra: item.</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas) , '| Interés: ' , (x interes) ] valor: [:x| x idPrecio].</body></methods><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo plan de compra' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 680 364 1000 418 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 6 0 ) 					#label: 'Cuotas' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 70 0 46 0 ) 					#name: #cuotas 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 48 					#interval: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 94 0 6 0 ) 					#label: 'Interés' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 24 0 164 0 45 0 ) 					#name: #interes 					#helpText: '1900' 					#type: #number 					#formatString: '0%' 					#low: 0 					#high: 100 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	((self widgetAt: #cuotas) model) value: 1.</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas) , '| Interés: ' , (x interes) ] valor: [:x| x idPlan].</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nombre</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>nombre</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>PlanDeCompra</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPlan cuotas interes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos articulo vendedor param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		vendedor := admin buscarUsuarioPorId: (x idVendedor).		tablaArticulos			add: (articulo nombre);			add: ('$' , (x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (x idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , ((x cuotas) displayString) , '| Interés: ' , (x interes) ] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , ((x cuotas) displayString) , '| Interés: ' , ((x interes) displayString) ] valor: [:x| x idPlan].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPlanDeCompraPorId:">buscarPlanDeCompraPorId: unId	^(listaPlanesDeCompra detect: [:e| (e idPlan) = unId ] ifNone: []).</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaArticulos do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		nombre: (((self widgetAt: #nombre) model value) asString);		apellido: (((self widgetAt: #apellido) model value) asString);		dni: (((self widgetAt: #dni) model value) asNumber);		sexo: ((self widgetAt: #sexo) currentChoice);		fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		idCategoria: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #categoria) selection key asNumber);		idVendedor: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #categoria) selection key asNumber);		idVendedor: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarPersona: item.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPrecio:por:">modificarPrecio: unId por: unObjeto	listaPrecios := (listaPrecios collect: [:a|		((a idPrecio) = unId)			ifTrue: [unObjeto]			ifFalse: [a].	]).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="modificarPlanDeCompra:por:">modificarPlanDeCompra: unId por: unObjeto	listaPlanesDeCompra := (listaPlanesDeCompra collect: [:a|		((a idPlan) = unId)			ifTrue: [unObjeto]			ifFalse: [a].	]).</body></methods><do-it>ProyectoFinal organization addCategory: #articulos</do-it><do-it>ProyectoFinal classifySymbol: #listaPreciosActivos under: #articulos</do-it><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:a|		tablaArticulos			add: (a nombre);			add: ((admin buscarCategoriaPorId: (a idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (a idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idUsuario).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idUsuario).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idUsuario).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '6:12:17 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:12:17 on 19 de enero de 2017."</do-it><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="listaPreciosActivos">listaPreciosActivos	^listaPrecios select: [:x| x activo].</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #categoria) selection key asNumber);		idVendedor: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarPrecio: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPrecioPorId: id).	item		idArticulo: ((self widgetAt: #categoria) selection key asNumber);		idVendedor: ((self widgetAt: #categoria) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin modificarPrecio: id por: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPrecioPorId: id).	item		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idVendedor: ((self widgetAt: #vendedor) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin modificarPrecio: id por: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #categoriaPadre) setSelectionIndex: ((self widgetAt: #categoriaPadre) sequence findIndexOf: ((self widgetAt: #categoriaPadre) sequence detect: [:x| (x key) = (item idCategoriaPadre)])); updateModel.	(self widgetAt: #categoriaPadre) sequence removeAllSuchThat: [:x| (admin perteneceALaCategoria: (x key) a: id) ].	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #precio) model value: (item precio).</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '6:27:10 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:27:10 on 19 de enero de 2017."</do-it><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idVendedor: ((self widgetAt: #vendedor) selection key asNumber);		precio: ((self widgetAt: #precio) model value).	admin agregarPrecio: item.</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		(x precio) , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , '($' ,		((x precio) displayString) , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>SeleccionarPrecios</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPrecios) texto: [:x|		((admin buscarArticuloPorId: (x idArticulo)) nombre) , ': ' ,		((admin buscarUsuarioPorId: (x idVendedor)) nombreYApellido) , ' ($' ,		((x precio) displayString) , ')'	] valor: [:x| x idPrecio].</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '6:30:21 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:30:21 on 19 de enero de 2017."</do-it><methods><class-id>ModificarPlanDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	(self widgetAt: #sexo) model: (ValueHolder with: #femenino); resetCurrent.	((self widgetAt: #dia) model) value: 1.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	((self widgetAt: #cuotas) model) value: 1.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPersonaPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPlanDeCompraPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaPlanesDeCompra) delParametro: [:x| x idPlan]);		nombre: (((self widgetAt: #nombre) model value) asString);		apellido: (((self widgetAt: #apellido) model value) asString);		dni: (((self widgetAt: #dni) model value) asNumber);		sexo: ((self widgetAt: #sexo) currentChoice);		fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaPlanesDeCompra) delParametro: [:x| x idPlan]);		cuotas: (((self widgetAt: #cuotas) model value) asString);		interes: (((self widgetAt: #interes) model value) asString);		fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaPlanesDeCompra) delParametro: [:x| x idPlan]);		cuotas: (((self widgetAt: #cuotas) model value) asString);		interes: (((self widgetAt: #interes) model value) asString).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin agregarPersona: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaPlanesDeCompra) delParametro: [:x| x idPlan]);		cuotas: (((self widgetAt: #cuotas) model value) asString);		interes: (((self widgetAt: #interes) model value) asString).	admin agregarPlanDeCompra: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPlanDeCompraPorId: id).	item		nombre: (((self widgetAt: #nombre) model value) asString);		apellido: (((self widgetAt: #apellido) model value) asString);		dni: (((self widgetAt: #dni) model value) asNumber);		sexo: ((self widgetAt: #sexo) currentChoice);		fechaNacimiento: (Date newDay: (((self widgetAt: #dia) model value) asNumber) monthNumber: ((self widgetAt: #mes) currentChoice) year: (((self widgetAt: #anio) model value) asNumber)).	"item direccion: (((self widgetAt: #direccion) model value) asString)."	admin modificarPersona: id por: item.</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPlanDeCompraPorId: id).	item		cuotas: ((self widgetAt: #cuotas) model value);		interes: ((self widgetAt: #interes) model value).	admin modificarPlanDeCompra: id por: item.</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (x interes displayString) ] valor: [:x| x idPrecio].</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompra new.	item		idPlan: (admin autoIncrementoLista: (admin listaPlanesDeCompra) delParametro: [:x| x idPlan]);		cuotas: ((self widgetAt: #cuotas) model value);		interes: ((self widgetAt: #interes) model value).	admin agregarPlanDeCompra: item.</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (x interes displayString) ] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (x interes displayString) , '%' ] valor: [:x| x idPlan].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPlanDeCompraPorId:">buscarPlanDeCompraPorId: unId	^(listaPlanesDeCompra detect: [:e| (e idPlan) = unId ] ifNone: []).</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPlanDeCompraPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes / 100).</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPlanDeCompraPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes / 100 floor).</body></methods><methods><class-id>ModificarPlanDeCompra</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPlanDeCompraPorId: id).	((self widgetAt: #cuotas) model) value: (item cuotas).	((self widgetAt: #interes) model) value: (item interes).</body></methods><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo plan de compra' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 357 843 411 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 6 0 ) 					#label: 'Cuotas' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 94 0 6 0 ) 					#label: 'Interés' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 70 0 46 0 ) 					#name: #cuotas 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 48 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 24 0 164 0 45 0 ) 					#name: #interes 					#helpText: '1900' 					#type: #number 					#formatString: '0%' 					#low: 0 					#high: 1 					#interval: 1 ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo plan de compra' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 357 843 411 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 6 0 ) 					#label: 'Cuotas' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 94 0 6 0 ) 					#label: 'Interés' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 70 0 46 0 ) 					#name: #cuotas 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 48 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 24 0 164 0 45 0 ) 					#name: #interes 					#helpText: '1900' 					#type: #number 					#formatString: '0%' 					#low: 0 					#high: 1 					#interval: 0.1 ) ) ) )</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (x interes * 100 displayString) , '%' ] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (((x interes) * 100) displayString) , '%' ] valor: [:x| x idPlan].</body></methods><methods><class-id>ModificarPlanDeCompra class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo plan de compra' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 357 843 411 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 6 0 ) 					#label: 'Cuotas' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 94 0 6 0 ) 					#label: 'Interés' ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 70 0 46 0 ) 					#name: #cuotas 					#helpText: '1' 					#type: #number 					#low: 1 					#high: 48 					#interval: 1 ) 				#(#{UI.SpinButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 24 0 164 0 45 0 ) 					#name: #interes 					#helpText: '1900' 					#type: #number 					#formatString: '0%' 					#low: 0 					#high: 1 					#interval: 0.01 ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '6:56:38 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 18:56:38 on 19 de enero de 2017."</do-it><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|test|	test := sightingsTable selectionIndexHolder value y.	</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|id|	id := sightingsTable selectionIndexHolder value y.	</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index precio|	index := sightingsTable selectionIndexHolder value y.	precio := (admin listaPrecios at: index).</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index precio|	index := sightingsTable selectionIndexHolder value y.	precio := (admin listaPrecios at: index).	precio d.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '8:15:46 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:15:46 on 19 de enero de 2017."</do-it><class><name>PlanDeCompraArticulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idArticulo idPlan </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo">idArticulo	^idArticulo</body></methods><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idArticulo:">idArticulo: anObject	idArticulo := anObject</body></methods><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlan">idPlan	^idPlan</body></methods><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlan:">idPlan: anObject	idPlan := anObject</body></methods><methods><class-id>PlanDeCompraArticulo</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idArticulo := nil.	idPlan := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>PlanDeCompraArticulo class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface cellContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>RegistrarVenta</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>RegistrarVenta</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>RegistrarVenta removeFromSystem</do-it><class><name>RegistrarVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface cellContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>RegistrarVenta</class-id><body>RegistrarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index precio|	index := sightingsTable selectionIndexHolder value y.	precio := (admin listaPrecios at: index).	precio d.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sightingsTable">sightingsTable	^sightingsTable</body></methods><methods><class-id>RegistrarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cellContents">cellContents	^cellContents</body></methods><methods><class-id>RegistrarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface</body></methods><methods><class-id>RegistrarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarArticuloVenta</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>SeleccionarArticuloVenta</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>SeleccionarArticuloVenta removeFromSystem</do-it><do-it>RegistrarVenta renameTo: #SeleccionarArticuloVenta</do-it><comment><class-id>SeleccionarArticuloVenta</class-id><body>RegistrarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarVentas">administrarVentas	self abrirInterfaz: SeleccionarArticuloVenta.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="registrarVenta">registrarVenta	self abrirInterfaz: SeleccionarArticuloVenta.</body></methods><class><name>RegistrarVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>RegistrarVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>RegistrarVenta removeFromSystem</do-it><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="agregarVenta:">agregarVenta: unaVenta	(self buscarPrecioPorId: (unaVenta idPrecio)) activo: false.	unaVenta 	listaVentas add: unaVenta.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="agregarVenta:">agregarVenta: unaVenta	(self buscarPrecioPorId: (unaVenta idPrecio)) activo: false.	listaVentas add: unaVenta.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '8:30:00 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:30:00 on 19 de enero de 2017."</do-it><methods><class-id>ModificarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 731 316 1051 606 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 244 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 261 0 105 0 282 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) ) ) )</body></methods><methods><class-id>ModificarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 738 328 1058 568 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Precio' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #precio 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Cliente' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #cliente 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idArticulo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idArticulo</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>PlanDeCompraArticulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPrecio idPlan </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>PlanDeCompraArticulo</class-id> <selector>idArticulo:</selector></remove-selector><remove-selector><class-id>PlanDeCompraArticulo</class-id> <selector>idArticulo</selector></remove-selector><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><class><name>PlanDeCompraArticulo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPlanArticulo idPrecio idPlan </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlanArticulo">idPlanArticulo	^idPlanArticulo</body></methods><methods><class-id>PlanDeCompraArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlanArticulo:">idPlanArticulo: anObject	idPlanArticulo := anObject</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 731 316 1051 606 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 244 0 ) 					#label: 'Precio' )				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 192 0 316 0 213 0 ) 					#name: #botonEditarParametros 					#flags: 24 					#model: #editarParametrosGenerales 					#label: 'Editar parámetros generales' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 261 0 105 0 282 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) ) ) )</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 3 26 323 312 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 244 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 261 0 105 0 282 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 260 0 316 0 281 0 ) 					#name: #botonPlanesDeCompra 					#flags: 24 					#model: #editarPlanesDeCompra 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '9:02:44 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 21:02:44 on 19 de enero de 2017."</do-it><remove-selector><class-id>Venta</class-id> <selector>idPrecio</selector></remove-selector><remove-selector><class-id>Venta</class-id> <selector>idPrecio:</selector></remove-selector><methods><class-id>Venta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idVenta := nil.	idCliente := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idPlan calificacionVendedor calificacionCliente comentario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idPlanArticulo calificacionVendedor calificacionCliente comentario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlanArticulo">idPlanArticulo	^idPlanArticulo</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlanArticulo:">idPlanArticulo: anObject	idPlanArticulo := anObject</body></methods><methods><class-id>ModificarArticulo</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarArticuloPorId: id).	(self widgetAt: #categoria) setSelectionIndex: ((self widgetAt: #categoria) sequence findIndexOf: ((self widgetAt: #categoria) sequence detect: [:x| (x key) = (item idCategoria)])); updateModel.	(self widgetAt: #nombre) model value: (item nombre).	(self widgetAt: #tipo) model: (ValueHolder with: (item tipo)); resetCurrent.	(self widgetAt: #botonEditarParametros) isVisible: true.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #precio) model value: (item precio).	(self widgetAt: #botonEditarPlanesDeCompra) isVisible: true.</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 241 843 527 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 244 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 261 0 105 0 282 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 260 0 316 0 281 0 ) 					#name: #botonEditarPlanesDeCompra 					#flags: 24 					#model: #editarPlanesDeCompra 					#label: 'Editar parámetros generales' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 19, 2017' '11:49:42 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:49:42 on 19 de enero de 2017."</do-it><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 241 843 527 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 244 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 261 0 105 0 282 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 260 0 316 0 281 0 ) 					#name: #botonEditarPlanesDeCompra 					#flags: 24 					#model: #editarPlanesDeCompra 					#label: 'Editar planes de compra' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ModificarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Precio' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #cliente 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Plan de compra' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #planDeCompra 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><class><name>ModificarVenta</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPrecio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><do-it>PlanDeCompraArticulo renameTo: #PlanDeCompraPrecio</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idPlanArticulo</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idPlanArticulo</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>PlanDeCompraPrecio</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPlanPrecio idPrecio idPlan </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>PlanDeCompraPrecio</class-id> <selector>idPlanArticulo</selector></remove-selector><remove-selector><class-id>PlanDeCompraPrecio</class-id> <selector>idPlanArticulo:</selector></remove-selector><methods><class-id>PlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlanPrecio">idPlanPrecio	^idPlanPrecio</body></methods><methods><class-id>PlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlanPrecio:">idPlanPrecio: anObject	idPlanPrecio := anObject</body></methods><class><name>SeleccionarPlanesDeCompraPrecio</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>SeleccionarPlanesDeCompraPrecio</name><environment>Smalltalk</environment><super>SeleccionarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPrecio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><remove-selector><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarPlanesDeCompraPrecio organization removeCategory: #'initialize-release'</do-it><remove-selector><class-id>SeleccionarPlanesDeCompra</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarPlanesDeCompra organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (((x interes) * 100) displayString) , '%' ] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (((x interes) * 100) displayString) , '%' ] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (((x interes) * 100) displayString) , '%' ] valor: [:x| x idPlan].</body></methods><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra listaPlanesDeCompraPrecio guiMenuPrincipal archivoGuardado </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>ModificarCategoria</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarCategoria</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaCategorias|	listaCategorias := List new.	admin listaCategorias do: [:c|		listaCategorias add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #categoriaPadre)		model: (ValueHolder with: listaCategorias);		setSelectionIndex: 1;		updateModel."	mi := ArtificialTreeItemHolder		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	self treeHolder list: (TreeModel on: mi displayRoot: false).	self treeHolder selectionIndexHolder		onChangeSend: #folderSelected to: self"</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="agregarPlanDeCompraPrecio:">agregarPlanDeCompraPrecio: unObj	listaPlanesDeCompraPrecio add: unObj.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPlanDeCompra:delPrecio:">buscarPlanDeCompra: unIdPlan delPrecio: unIdPrecio	^(listaPlanesDeCompraPrecio detect: [:x| ((x idPlan) = unIdPlan) &amp; ((x idPrecio) = unIdPrecio) ] ifNone: []).</body></methods><remove-selector><class-id>PlanDeCompraPrecio</class-id> <selector>idPlanPrecio</selector></remove-selector><remove-selector><class-id>PlanDeCompraPrecio</class-id> <selector>idPlanPrecio:</selector></remove-selector><remove-selector><class-id>PlanDeCompraPrecio</class-id> <selector>initialize</selector></remove-selector><do-it>PlanDeCompraPrecio organization removeCategory: #'initialize-release'</do-it><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idPlan idPrecio calificacionVendedor calificacionCliente comentario </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>comentario</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>comentario</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Venta</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idVenta idCliente idPlan idPrecio calificacionVendedor calificacionCliente comentarioVendedor comentarioCliente </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comentarioCliente">comentarioCliente	^comentarioCliente</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comentarioCliente:">comentarioCliente: anObject	comentarioCliente := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comentarioVendedor">comentarioVendedor	^comentarioVendedor</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comentarioVendedor:">comentarioVendedor: anObject	comentarioVendedor := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlan">idPlan	^idPlan</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPlan:">idPlan: anObject	idPlan := anObject</body></methods><remove-selector><class-id>Venta</class-id> <selector>idPlanArticulo</selector></remove-selector><remove-selector><class-id>Venta</class-id> <selector>idPlanArticulo:</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPlanDeCompra:delPrecio:">buscarPlanDeCompra: unIdPlan delPrecio: unIdPrecio	^listaPlanesDeCompraPrecio removeAllSuchThat: [:x| ((x idPlan) = unIdPlan) &amp; ((x idPrecio) = unIdPrecio) ].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="buscarPlanDeCompra:delPrecio:">buscarPlanDeCompra: unIdPlan delPrecio: unIdPrecio	^(listaPlanesDeCompraPrecio detect: [:x| ((x idPlan) = unIdPlan) &amp; ((x idPrecio) = unIdPrecio) ] ifNone: []).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="eliminarPlanDeCompra:delPrecio:">eliminarPlanDeCompra: unIdPlan delPrecio: unIdPrecio	listaPlanesDeCompraPrecio removeAllSuchThat: [:x| ((x idPlan) = unIdPlan) &amp; ((x idPrecio) = unIdPrecio) ]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="listaPlanesDeCompraPrecio">listaPlanesDeCompraPrecio	^listaPlanesDeCompraPrecio</body></methods><methods><class-id>ModificarVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 674 305 994 545 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Cliente' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #cliente 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Plan de compra' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #planDeCompra 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaArticulos do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaVendedores um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaVendedores um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="editarPlanesDeCompra">editarPlanesDeCompra	|ui|	ui := SeleccionarPlanesDeCompraPrecio new.	ui admin: admin.	ui idPrecio: id.	ui open.	^ui</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: ((admin listaPlanesDeCompraPrecio) select: [:x| (x idPrecio) = idPrecio]) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (((x interes) * 100) displayString) , '%' ] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x| 'Cuotas: ' , (x cuotas displayString) , '| Interés: ' , (((x interes) * 100) displayString) , '%' ] valor: [:x| x idPlan].</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="atributosASerializar">atributosASerializar	^#('listaPersonas' 'listaUsuarios' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra listaPlanesDeCompraPrecio')</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="atributosASerializar">atributosASerializar	^#('listaPersonas' 'listaUsuarios' 'listaArticulos' 'listaCategorias' 'listaVentas' 'listaParametrosGenerales' 'listaParametrosGeneralesArticulos' 'listaPrecios' 'listaPlanesDeCompra' 'listaPlanesDeCompraPrecio')</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := List new.	listaUsuarios := List new.	listaArticulos := List new.	listaCategorias := List new.	listaParametrosGenerales := List new.	listaParametrosGeneralesArticulos := List new.	listaPrecios := List new.	listaPlanesDeCompra := List new.	listaPlanesDeCompraPrecio := List new.	listaVentas := List new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="test">test	listaPlanesDeCompraPrecio := List new.</body></methods><do-it>admin test.</do-it><do-it>admin test.</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>test</selector></remove-selector><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar planes de compra del precio'</body></methods><class><name>ModificarPlanDeCompraPrecio</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>ModificarPlanDeCompraPrecio</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPrecio </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio">idPrecio	^idPrecio</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idPrecio:">idPrecio: anObject	idPrecio := anObject</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="asignarAClaseSeleccionar:">asignarAClaseSeleccionar: unUi	unUi		admin: admin;		idPrecio: idPrecio.	^unUi</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPlanDeCompra: ((self widgetAt: #idItem) selection key asNumber) delPrecio: idPrecio.	super eliminar.</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="abrirVentanaModificacion">abrirVentanaModificacion	|ui|	ui := (self claseModificar) new.	ui idArticulo: idPrecio.	ui admin: admin.	ui open.	^ui</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="abrirVentanaModificacion">abrirVentanaModificacion	|ui|	ui := (self claseModificar) new.	ui idPrecio: idPrecio.	ui admin: admin.	ui open.	^ui</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseModificar">claseModificar	^ModificarPlanDeCompraPrecio</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarPlanesDeCompraPrecio</body></methods><remove-selector><class-id>ModificarPlanDeCompraPrecio</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarPlanDeCompraPrecio organization removeCategory: #'initialize-release'</do-it><do-it>ModificarPlanDeCompraPrecio class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarPlanDeCompraPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 297 843 471 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Parámetro' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #parametro 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Valor' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 144 0 148 0 165 0 ) 					#name: #valor 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompraPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 739 340 1059 514 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Plan de compra' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #planDeCompra 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		listaPlanes add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #categoriaPadre)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		listaPlanes add: (			(UserMessage new)				key: (c idCategoria);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		listaPlanes add: (			(UserMessage new)				key: (c idPlan);				&gt;&gt; (c nombre)		).	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		listaPlanes add: (			(UserMessage new)				key: (c idPlan);				&gt;&gt; 'hola'		).	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		listaPlanes add: (			(UserMessage new)				key: (c idPlan);				&gt;&gt; ('Cuotas: ' , (c cuotas displayString) , '| Interés: ' , (((c interes) * 100) displayString) , '%')		).	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 3 26 323 148 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Plan de compra' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 316 0 118 0 ) 					#name: #planDeCompra 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompraPrecio new.	item		idPlan: ((self widgetAt: #planDeCompra) selection key asNumber);		idPrecio: idPrecio;		valor: (((self widgetAt: #valor) model value) asString).	admin agregarPlanDeCompraPrecio: item.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := PlanDeCompraPrecio new.	item		idPlan: ((self widgetAt: #planDeCompra) selection key asNumber);		idPrecio: idPrecio.	admin agregarPlanDeCompraPrecio: item.</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>updating</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonEliminar) isEnabled: true.</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|item|	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x|		item := (admin buscarPlanDeCompra: (x idPlan) delPrecio: idPrecio).		'Cuotas: ' , (item cuotas displayString) , '| Interés: ' , (((item interes) * 100) displayString) , '%'	] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|item|	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x|		item := (admin buscarPlanDeCompraPorId: (x idPlan)).		'Cuotas: ' , (item cuotas displayString) , '| Interés: ' , (((item interes) * 100) displayString) , '%'	] valor: [:x| x idPlan].</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		(admin listaPlanesDeCompra select: [(c idPrecio) = idPrecio]) detect: [:x| (x idPlan) = (c idPlan)] ifNone: [			listaPlanes add: (				(UserMessage new)					key: (c idPlan);					&gt;&gt; ('Cuotas: ' , (c cuotas displayString) , '| Interés: ' , (((c interes) * 100) displayString) , '%')			)		]	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		(admin listaPlanesDeCompraPrecio select: [(c idPrecio) = idPrecio]) detect: [:x| (x idPlan) = (c idPlan)] ifNone: [			listaPlanes add: (				(UserMessage new)					key: (c idPlan);					&gt;&gt; ('Cuotas: ' , (c cuotas displayString) , '| Interés: ' , (((c interes) * 100) displayString) , '%')			)		]	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaPlanes|	listaPlanes := List new.	admin listaPlanesDeCompra do: [:c|		(admin listaPlanesDeCompraPrecio select: [:l| (l idPrecio) = idPrecio]) detect: [:x| (x idPlan) = (c idPlan)] ifNone: [			listaPlanes add: (				(UserMessage new)					key: (c idPlan);					&gt;&gt; ('Cuotas: ' , (c cuotas displayString) , '| Interés: ' , (((c interes) * 100) displayString) , '%')			)		]	].	super open.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	admin listaPlanesDeCompra do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes plan um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes plan um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		plan := admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio).		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>PlanDeCompra</class-id> <category>printing</category><body package="ProyectoFinal" selector="displayString">displayString	^('Cuotas: ' , (self cuotas displayString) , '| Interés: ' , (((self interes) * 100) displayString) , '%')</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|item|	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x| (admin buscarPlanDeCompraPorId: (x idPlan))] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x| (admin buscarPlanDeCompraPorId: (x idPlan))] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x| (admin buscarPlanDeCompraPorId: (x idPlan)) displayString] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompraPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) texto: [:x| (admin buscarPlanDeCompraPorId: (x idPlan))] valor: [:x| x idPlan].</body></methods><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	super open.	self cargarLista: (admin listaPlanesDeCompra) texto: [:x| x] valor: [:x| x idPlan].</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes plan um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; (x nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:x| (x idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|index precio|	index := sightingsTable selectionIndexHolder value y.	precio := (admin listaPrecios at: index).</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (admin listaPrecios at: (sightingsTable selectionIndexHolder value y)).	ui open.	^ui</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarArticuloVenta</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (admin listaPrecios at: (sightingsTable selectionIndexHolder value y)).	ui open.	self closeRequest.</body></methods><methods><class-id>ModificarPlanDeCompraPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nuevo plan de compra del precio'</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Nueva venta'</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	d.	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	ddfrghrh.	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	self rrr.	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompra: (x idPlan) delPrecio: (x idPrecio)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPrecios at: (sightingsTable selectionIndexHolder value y)) asNumber).	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPrecios at: (sightingsTable selectionIndexHolder value y)) idPrecio).	ui open.	self closeRequest.</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	listaPlanes := List new.	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompraPorId: (x idPlan)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item		idVenta: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]);		idPrecio: ((self widgetAt: #categoriaPadre) selection key asNumber);		nombre: ((self widgetAt: #categoriaPadre) selection key asNumber);		nombre: ((self widgetAt: #categoriaPadre) selection key asNumber).	admin agregarVenta: item.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 21, 2017' '2:59:52 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 14:59:52 on 21 de enero de 2017."</do-it><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Categoria new.	item		idVenta: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]);		idPrecio: idPrecio;		idPlan: ((self widgetAt: #planDeCompra) selection key asNumber);		idCliente: ((self widgetAt: #cliente) selection key asNumber).	admin agregarVenta: item.</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Venta new.	item		idVenta: (admin autoIncrementoLista: (admin listaCategorias) delParametro: [:x| x idCategoria]);		idPrecio: idPrecio;		idPlan: ((self widgetAt: #planDeCompra) selection key asNumber);		idCliente: ((self widgetAt: #cliente) selection key asNumber).	admin agregarVenta: item.</body></methods><methods><class-id>ModificarPrecio class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nuevo parámetro general' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 3 26 323 360 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Artículo' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 25 0 311 92 ) 					#name: #articulo 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 124 0 ) 					#label: 'Vendedor' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 5 0 142 0 311 92 ) 					#name: #vendedor 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 243 0 ) 					#label: 'Precio' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 260 0 105 0 281 0 ) 					#name: #precio 					#type: #number 					#formatString: '0.00' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 158 0 307 0 316 0 328 0 ) 					#name: #botonEditarPlanesDeCompra 					#flags: 24 					#model: #editarPlanesDeCompra 					#label: 'Editar planes de compra' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 291 0 ) 					#label: '¿Activo?' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 308 0 104 0 329 0 ) 					#name: #activo 					#menu: #siNo ) ) ) )</body></methods><do-it>ModificarVenta class organization addCategory: #resources</do-it><methods><class-id>ModificarVenta class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarVenta class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Si' 				#value: true ) 			#(#{UI.MenuItem} 				#rawLabel: 'No' 				#value: false ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarVenta class</class-id> <category>resources</category><body package="ProyectoFinal" selector="siNo">siNo	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Si' 				#value: true ) 			#(#{UI.MenuItem} 				#rawLabel: 'No' 				#value: false ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><remove-selector><class-id>ModificarVenta class</class-id> <selector>productoServicio</selector></remove-selector><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #precio) model value: (item precio).	(self widgetAt: #tipo) model: (ValueHolder with: (item activo)); resetCurrent.	(self widgetAt: #botonEditarPlanesDeCompra) isVisible: true.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargar">cargar	|item|	super cargar.	item := (admin buscarPrecioPorId: id).	(self widgetAt: #articulo) setSelectionIndex: ((self widgetAt: #articulo) sequence findIndexOf: ((self widgetAt: #articulo) sequence detect: [:x| (x key) = (item idArticulo)])); updateModel.	(self widgetAt: #vendedor) setSelectionIndex: ((self widgetAt: #vendedor) sequence findIndexOf: ((self widgetAt: #vendedor) sequence detect: [:x| (x key) = (item idVendedor)])); updateModel.	(self widgetAt: #precio) model value: (item precio).	(self widgetAt: #activo) model: (ValueHolder with: (item activo)); resetCurrent.	(self widgetAt: #botonEditarPlanesDeCompra) isVisible: true.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaArticulos listaVendedores um|	super open.	listaArticulos := List new.	admin listaArticulos do: [:x|		um := UserMessage new.		um key: (x idArticulo).		um &gt;&gt; (x nombre).		listaArticulos add: um.	].	listaVendedores := List new.	admin listaVendedores do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarPersonaPorId: (x idPersona)) nombreYApellido).		listaVendedores add: um.	].	(self widgetAt: #articulo)		model: (ValueHolder with: listaArticulos);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #vendedor)		model: (ValueHolder with: listaVendedores);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #activo) model: (ValueHolder with: true); resetCurrent.</body></methods><methods><class-id>ModificarItem class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="generalSpec">generalSpec	"Tools.UIPainter new openOnClass: self andSelector: #generalSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: #labelString 			#min: #(#{Core.Point} 320 34 ) 			#max: #(#{Core.Point} 320 860 ) 			#bounds: #(#{Graphics.Rectangle} 693 288 1013 608 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -34 1 ) 					#name: #subCanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -125 1 -60 1 -65 1 -5 1 ) 					#model: #aceptar 					#label: 'Aceptar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -60 1 -20 1 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 22, 2017' '2:24:11 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 14:24:11 on 22 de enero de 2017."</do-it><remove-selector><class-id>ModificarVenta class</class-id> <selector>siNo</selector></remove-selector><do-it>ModificarVenta class organization removeCategory: #resources</do-it><do-it>ModificarPrecio class organization addCategory: #resources</do-it><methods><class-id>ModificarPrecio class</class-id> <category>resources</category><body package="ProyectoFinal" selector="siNo">siNo	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Si' 				#value: true ) 			#(#{UI.MenuItem} 				#rawLabel: 'No' 				#value: false ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Precio new.	item		idPrecio: (admin autoIncrementoLista: (admin listaPrecios) delParametro: [:x| x idPrecio]);		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idVendedor: ((self widgetAt: #vendedor) selection key asNumber);		precio: ((self widgetAt: #precio) model value);		activo: ((self widgetAt: #activo) currentChoice).	admin agregarPrecio: item.</body></methods><methods><class-id>ModificarPrecio</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarPrecioPorId: id).	item		idArticulo: ((self widgetAt: #articulo) selection key asNumber);		idVendedor: ((self widgetAt: #vendedor) selection key asNumber);		precio: ((self widgetAt: #precio) model value);		activo: ((self widgetAt: #activo) currentChoice).	admin modificarPrecio: id por: item.</body></methods><do-it>SeleccionarVenta organization addCategory: #'interface opening'</do-it><methods><class-id>SeleccionarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|precio articulo comprador vendedor|	super open.	self cargarLista: (admin listaVentas) texto: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		articulo := admin buscarArticuloPorId: (precio idArticulo).		comprador := admin buscarUsuarioPorId: (precio idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).	] valor: [:x| x idParametro].</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|precio articulo comprador vendedor|	super open.	self cargarLista: (admin listaVentas) texto: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		articulo := admin buscarArticuloPorId: (precio idArticulo).		comprador := admin buscarUsuarioPorId: (precio idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).	] valor: [:x| x idVenta].</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="administrarVentas">administrarVentas	self abrirInterfaz: SeleccionarVenta.</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar precios' 							#value: #administrarPrecios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar planes de compra' 							#value: #administrarPlanesDeCompra ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar ventas' 							#value: #administrarVentas ) ) #(2 4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Buscar...' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Buscar artículos por nombre...' 							#value: #buscarArticulosPorNombre 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Buscar artículos por categoría...' ) ) #(2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|precio articulo comprador vendedor|	super open.	self cargarLista: (admin listaVentas) texto: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		articulo := admin buscarArticuloPorId: (precio idArticulo).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).	] valor: [:x| x idVenta].</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|precio articulo comprador vendedor|	super open.	self cargarLista: (admin listaVentas) texto: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		articulo := admin buscarArticuloPorId: (precio idArticulo).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		((vendedor nombreYApellido) , ' -&gt; ' , (comprador nombreYApellido) , ' (' , (articulo nombre) , ')')	] valor: [:x| x idVenta].</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|precio articulo comprador vendedor|	super open.	self cargarLista: (admin listaVentas) texto: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		articulo := admin buscarArticuloPorId: (precio idArticulo).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		( '[' , (vendedor nombreYApellido) , ' -&gt; ' , (comprador nombreYApellido) ,  '] (' , (articulo nombre) , ')')	] valor: [:x| x idVenta].</body></methods><do-it>SeleccionarVenta organization addCategory: #accessing</do-it><methods><class-id>SeleccionarVenta</class-id> <category>updating</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonEliminar) isEnabled: true.</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|precio articulo comprador vendedor|	super open.	(self widgetAt: #botonNuevo) isEnabled: false.	self cargarLista: (admin listaVentas) texto: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		articulo := admin buscarArticuloPorId: (precio idArticulo).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		( '[' , (vendedor nombreYApellido) , ' -&gt; ' , (comprador nombreYApellido) ,  '] (' , (articulo nombre) , ')')	] valor: [:x| x idVenta].</body></methods><methods><class-id>ModificarVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	|listaClientes listaPlanes um|	super open.	listaClientes := List new.	listaPlanes := List new.	admin listaClientes do: [:x|		um := UserMessage new.		um key: (x idUsuario).		um &gt;&gt; ((admin buscarUsuarioPorId: (x idUsuario)) nombreYApellido).		listaClientes add: um.	].	(admin listaPlanesDeCompraPrecio select: [:d| (d idPrecio) = idPrecio]) do: [:x|		um := UserMessage new.		um key: (x idPlan).		um &gt;&gt; (admin buscarPlanDeCompraPorId: (x idPlan)).		listaPlanes add: um.	].	(self widgetAt: #cliente)		model: (ValueHolder with: listaClientes);		setSelectionIndex: 1;		updateModel.	(self widgetAt: #planDeCompra)		model: (ValueHolder with: listaPlanes);		setSelectionIndex: 1;		updateModel.</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarUsuario: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarVenta: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="eliminarVenta:">eliminarVenta: unId	listaVentas removeAllSuchThat: [:x| unId = (x idVenta)].</body></methods><do-it>admin buscarPrecioPorId: 2.</do-it><do-it>admin buscarPrecioPorId: 2.</do-it><do-it>admin buscarPrecioPorId: 3.</do-it><do-it>admin buscarPrecioPorId: 1.</do-it><do-it>(admin buscarPrecioPorId: 2) activo: false.</do-it><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="agregarVenta:">agregarVenta: unaVenta	(self buscarPrecioPorId: (unaVenta idPrecio)) activo: false.	Transcript show: (unaVenta idPrecio displayString).	listaVentas add: unaVenta.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPreciosActivos at: (sightingsTable selectionIndexHolder value y)) idPrecio).	ui open.	self closeRequest.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="agregarVenta:">agregarVenta: unaVenta	(self buscarPrecioPorId: (unaVenta idPrecio)) activo: false.	listaVentas add: unaVenta.</body></methods><class><name>Lista</name><environment>Smalltalk</environment><super>Core.List</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>Lista</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><remove-selector><class-id>Lista</class-id> <selector>initialize</selector></remove-selector><do-it>Lista organization removeCategory: #'initialize-release'</do-it><do-it>Lista organization addCategory: #accessing</do-it><methods><class-id>Lista</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sumatoria:">sumatoria: unBloque	|valor|	self do: [:x| valor := valor + (unBloque value: x)].	^valor</body></methods><methods><class-id>Lista</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sumatoria:">sumatoria: unBloque	|valor|	valor:=0.	self do: [:x| valor := valor + (unBloque value: x)].	^valor</body></methods><methods><class-id>Lista</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sumatoria:">sumatoria: unBloque	|valor|	valor := 0.	self do: [:x| valor := valor + (unBloque value: x)].	^valor</body></methods><methods><class-id>Lista</class-id> <category>accessing</category><body package="ProyectoFinal" selector="promedio:">promedio: unBloque	^ (self sumatoria: unBloque) / (self size)</body></methods><do-it>ArtificialTreeItemHolder exampleDirect.</do-it><do-it>nil</do-it><do-it>nil class</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>[] class</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '8:51:05 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 8:51:05 on 23 de enero de 2017."</do-it><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlVendedorEnLaVenta:con:yComentario:">calificarAlVendedorEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v					calificacionVendedor: unaCalificacion;					comentarioVendedor: unComentario.				v.			] 			ifFalse: [v].	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlClienteEnLaVenta:con:yComentario:">calificarAlClienteEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v					calificacionCliente: unaCalificacion;					comentarioCliente: unComentario.				v.			] 			ifFalse: [v].	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlClienteEnLaVenta:con:yComentario:">calificarAlClienteEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v					calificacionCliente: unaCalificacion;					comentarioCliente: unComentario.				v			] 			ifFalse: [v].	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlVendedorEnLaVenta:con:yComentario:">calificarAlVendedorEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas := listaVentas collect: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v					calificacionVendedor: unaCalificacion;					comentarioVendedor: unComentario.				v			] 			ifFalse: [v].	].</body></methods><class><name>SeleccionarVentaCalificacion</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="registrarCalificacion">registrarCalificacion	self abrirInterfaz: SeleccionarVentaCalificacion.</body></methods><do-it>SeleccionarVentaCalificacion class organization addCategory: #'interface specs'</do-it><methods><class-id>SeleccionarVentaCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><methods><class-id>SeleccionarVentaCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #calificar 					#label: 'Calificar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><class><name>ModificarCalificación</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarCalificación</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><remove-selector><class-id>ModificarCalificación</class-id> <selector>initialize</selector></remove-selector><do-it>ModificarCalificación organization removeCategory: #'initialize-release'</do-it><methods><class-id>ModificarCalificación</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarVentaPorId: id).	item		idCategoriaPadre: ((self widgetAt: #categoriaPadre) selection key asNumber);		nombre: (((self widgetAt: #nombre) model value) asString).	admin modificarCategoria: id por: item.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="buscarVentaPorId:">buscarVentaPorId: unId	^(listaVentas detect: [:e| (e idVenta) = unId ] ifNone: []).</body></methods><do-it>SeleccionarVentaCalificacion organization addCategory: #accessing</do-it><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cellContents">cellContents	"^cellContents"</body></methods><class><name>SeleccionarVentaCalificacion</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface cellContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cellContents">cellContents	^cellContents</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sightingsTable">sightingsTable	^sightingsTable</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface</body></methods><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarVentaCalificacion organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificar">calificar	|ui|	ui := ModificarCalificación new.	ui admin: admin.	ui id: ((admin listaVentas at: (sightingsTable selectionIndexHolder value y)) idVenta).	ui open.	self closeRequest.</body></methods><do-it>ModificarCalificación renameTo: #ModificarCalificacion</do-it><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificar">calificar	|ui|	ui := ModificarCalificacion new.	ui admin: admin.	ui id: ((admin listaVentas at: (sightingsTable selectionIndexHolder value y)) idVenta).	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Comprar';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((x precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	|item|	item := (admin buscarVentaPorId: id).	item		calificacionVendedor: 1;		comentarioVendedor: 'hola'.	admin modificarVenta: id por: item.</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	admin calificarAlVendedorEnLaVenta: id con: 1 yComentario: 'hola'.</body></methods><do-it>ModificarCalificacion class organization addCategory: #'interface specs'</do-it><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 297 843 471 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Categoria padre' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 29 0 316 0 122 0 ) 					#name: #categoriaPadre 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 127 0 ) 					#label: 'Nombre Categoria' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 147 0 148 0 168 0 ) 					#name: #nombre 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true 					#defaultString: '' ) ) ) )</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 677 285 997 525 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Calificar al:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 28 0 128 0 48 0 ) 					#name: #compradorVendedor 					#menu: #compradorVendedor ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 66 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 86 0 86 0 100 0 ) 					#name: #calificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 111 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 130 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Calificar venta'</body></methods><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Registrar venta'</body></methods><do-it>ModificarCategoria class organization addCategory: #resources</do-it><do-it>ModificarCategoria class organization removeCategory: #resources</do-it><do-it>ModificarCalificacion class organization addCategory: #resources</do-it><methods><class-id>ModificarCalificacion class</class-id> <category>resources</category><body package="ProyectoFinal" selector="productoServicio">productoServicio	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>resources</category><body package="ProyectoFinal" selector="compradorVendedor">compradorVendedor	"Tools.MenuEditor new openOnClass: self andSelector: #productoServicio"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Producto' 				#value: #producto ) 			#(#{UI.MenuItem} 				#rawLabel: 'Servicio' 				#value: #servicio ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><remove-selector><class-id>ModificarCalificacion class</class-id> <selector>productoServicio</selector></remove-selector><methods><class-id>ModificarCalificacion class</class-id> <category>resources</category><body package="ProyectoFinal" selector="compradorVendedor">compradorVendedor	"Tools.MenuEditor new openOnClass: self andSelector: #compradorVendedor"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Comprador' 				#value: #comprador ) 			#(#{UI.MenuItem} 				#rawLabel: 'Vendedor' 				#value: #vendedor ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	^SeleccionarVentaCalificacion</body></methods><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>comprar</selector></remove-selector><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificar">calificar	|ui|	ui := ModificarCalificacion new.	ui admin: admin.	ui open.	ui id: ((admin listaVentas at: (sightingsTable selectionIndexHolder value y)) idVenta).	self closeRequest.</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 705 314 1025 554 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 7 0 ) 					#label: 'Calificar al:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 28 0 128 0 48 0 ) 					#name: #compradorVendedor 					#menu: #compradorVendedor ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 66 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 86 0 86 0 100 0 ) 					#name: #calificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #actualizarCalificacion ) 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 83 0 131 0 104 0 ) 					#name: #mostrarCalificacion 					#isReadOnly: true 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 111 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 130 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarCalificacion">actualizarCalificacion	admin calificarAlVendedorEnLaVenta: id con: 1 yComentario: 'hola'.</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	(self widgetAt: #mostrarCalificacion) model value: ((self widgetAt: #calificacion) model value).</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarCalificacion">actualizarCalificacion	(self widgetAt: #mostrarCalificacion) model value: ((self widgetAt: #calificacion) model value).</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	((self widgetAt: #compradorVendedor) currentChoice) = #comprador	ifTrue: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #compradorVendedor) model value)		yComentario: ((self widgetAt: #compradorVendedor) model valuee)]	ifFalse: []</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	((self widgetAt: #compradorVendedor) currentChoice) = #comprador	ifTrue: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #compradorVendedor) model value)		yComentario: ((self widgetAt: #compradorVendedor) model value)]	ifFalse: []</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	((self widgetAt: #compradorVendedor) currentChoice) = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #compradorVendedor) model value)		yComentario: ((self widgetAt: #compradorVendedor) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #compradorVendedor) model value)		yComentario: ((self widgetAt: #compradorVendedor) model value)]</body></methods><class><name>ModificarCalificacion</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>compradorVendedor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>ModificarCalificacion class</class-id> <selector>compradorVendedor</selector></remove-selector><do-it>ModificarCalificacion class organization removeCategory: #resources</do-it><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 22 0 131 0 43 0 ) 					#name: #mostrarCalificacion 					#isReadOnly: true 					#type: #number 					#formatString: '0' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -66 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarCalificacion">actualizarCalificacion	(self widgetAt: #mostrarCalificacion) model value: 3.</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 22 0 131 0 43 0 ) 					#name: #mostrarCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -66 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarCalificacion">actualizarCalificacion	(self widgetAt: #mostrarCalificacion) model value: 3.	Transcript cr.</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 22 0 131 0 43 0 ) 					#name: #mostrarCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -66 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valorCalificacion">valorCalificacion	^'asdad'</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="vendedorCalificado">vendedorCalificado	^calificacionVendedor isNil not</body></methods><methods><class-id>Venta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="clienteCalificado">clienteCalificado	^calificacionCliente isNil not</body></methods><remove-selector><class-id>ModificarCalificacion</class-id> <selector>valorCalificacion</selector></remove-selector><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	compradorVendedor = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #compradorVendedor) model value)		yComentario: ((self widgetAt: #compradorVendedor) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #compradorVendedor) model value)		yComentario: ((self widgetAt: #compradorVendedor) model value)]</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 729 365 1049 605 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 22 0 131 0 43 0 ) 					#name: #mostrarCalificacion 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -66 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valorCalificacion">valorCalificacion	^4</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valorCalificacion">valorCalificacion	^(self widgetAt: #calificacion) model value</body></methods><class><name>ModificarCalificacion</name><environment>Smalltalk</environment><super>ModificarItem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>compradorVendedor calificacion </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valorCalificacion">valorCalificacion	^calificacion</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	calificacion := 1.	^self</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 504 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#model: #valorCalificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 22 0 131 0 43 0 ) 					#name: #mostrarCalificacion 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -66 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '10:18:03 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 10:18:03 on 23 de enero de 2017."</do-it><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valorCalificacion">valorCalificacion	a.	^calificacion</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="valorCalificacion">valorCalificacion	^calificacion</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	calificacion := ValueHolder with: 1.	^self</body></methods><remove-selector><class-id>ModificarCalificacion</class-id> <selector>actualizarCalificacion</selector></remove-selector><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Calificación comprador';		add: 'Calificación vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Calificación comprador';		add: 'Calificación vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (articulo nombre);			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	compradorVendedor = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)]</body></methods><methods><class-id>SeleccionarVentaCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 622 94 1262 574 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -2 0.333333 -5 1 ) 					#name: #calificarComprador 					#model: #calificarComprador 					#label: 'Calificar comprador' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 5 0 -2 0.666666 -5 1 ) 					#name: #calificarVendedor 					#model: #calificarVendedor 					#label: 'Calificar vendedor' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificarComprador">calificarComprador	self calificar compradorVendedor: #comprador.	self closeRequest.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificarVendedor">calificarVendedor	self calificar compradorVendedor: #comprador.	self closeRequest.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificar">calificar	|ui|	ui := ModificarCalificacion new.	ui admin: admin.	ui open.	^ui</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrirVentanaCalificacion">abrirVentanaCalificacion	|ui|	ui := ModificarCalificacion new.	ui admin: admin.	ui open.	^ui</body></methods><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>calificar</selector></remove-selector><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificarComprador">calificarComprador	self abrirVentanaCalificacion compradorVendedor: #comprador.	self closeRequest.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificarVendedor">calificarVendedor	self abrirVentanaCalificacion compradorVendedor: #comprador.	self closeRequest.</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="compradorVendedor">compradorVendedor	^compradorVendedor</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="compradorVendedor:">compradorVendedor: anObject	compradorVendedor := anObject</body></methods><do-it>admin calificarAlClienteEnLaVenta: 1 con: 4.</do-it><do-it>admin calificarAlClienteEnLaVenta: 19 con: 4.</do-it><do-it>admin calificarAlClienteEnLaVenta: 19 con: 4 yComentario: 'aa'.</do-it><do-it>admin calificarAlClienteEnLaVenta: 19 con: nil yComentario: nil.</do-it><do-it>20</do-it><do-it>1</do-it><do-it>2</do-it><do-it>4</do-it><do-it>4</do-it><do-it>3</do-it><do-it>5</do-it><do-it>6</do-it><do-it>8</do-it><do-it>8</do-it><methods><class-id>ModificarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	|item|	item := Venta new.	item		idVenta: (admin autoIncrementoLista: (admin listaVentas) delParametro: [:x| x idVenta]);		idPrecio: idPrecio;		idPlan: ((self widgetAt: #planDeCompra) selection key asNumber);		idCliente: ((self widgetAt: #cliente) selection key asNumber).	admin agregarVenta: item.</body></methods><do-it>admin calificarAlClienteEnLaVenta: 3 con: 3 yComentario: nil.</do-it><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	compradorVendedor = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)].	Transcript cr.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '10:43:33 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 10:43:33 on 23 de enero de 2017."</do-it><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	admin dkasdja.	compradorVendedor = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)].	Transcript cr.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrirVentanaCalificacion">abrirVentanaCalificacion	|ui|	ui := ModificarCalificacion new.	ui admin: admin.	ui open.	ui id: ((admin listaVentas at: (sightingsTable selectionIndexHolder value y)) idVenta).	^ui</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	compradorVendedor = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)].	Transcript cr.</body></methods><methods><class-id>ModificarCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	compradorVendedor = #comprador	ifTrue: [ admin calificarAlClienteEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)]	ifFalse: [ admin calificarAlVendedorEnLaVenta: id		con: ((self widgetAt: #calificacion) model value)		yComentario: ((self widgetAt: #comentario) model value)].</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="calificarVendedor">calificarVendedor	self abrirVentanaCalificacion compradorVendedor: #vendedor.	self closeRequest.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="restaurarCalificaciones">restaurarCalificaciones	listaVentas do: [:x|		x			calificacionVendedor: nil;			calificacionCliente: nil;			comentarioVendedor: nil;			comentarioCliente: nil	].</body></methods><do-it>admin restaurarCalificaciones.</do-it><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlVendedorEnLaVenta:con:yComentario:">calificarAlVendedorEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas do: [:v|		v			calificacionVendedor: unaCalificacion;			comentarioVendedor: unComentario.	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlVendedorEnLaVenta:con:yComentario:">calificarAlVendedorEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas do: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v					calificacionVendedor: unaCalificacion;					comentarioVendedor: unComentario.			]	].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="calificarAlClienteEnLaVenta:con:yComentario:">calificarAlClienteEnLaVenta: unIdVenta con: unaCalificacion yComentario: unComentario	listaVentas do: [:v|		((v idVenta) = unIdVenta)			ifTrue: [				v					calificacionCliente: unaCalificacion;					comentarioCliente: unComentario.			]	].</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonComprador) enabled: ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))) clienteCalificado.	(self widgetAt: #botonVendedor) enabled: ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))) vendedorCalificado.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	|venta|	venta := ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))).	(self widgetAt: #botonComprador) enabled: venta clienteCalificado.	(self widgetAt: #botonVendedor) enabled: venta vendedorCalificado.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	|venta|	venta := ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))).	(self widgetAt: #botonComprador) enabled: venta clienteCalificado not.	(self widgetAt: #botonVendedor) enabled: venta vendedorCalificado not.</body></methods><methods><class-id>SeleccionarVentaCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -2 0.333333 -5 1 ) 					#name: #calificarComprador 					#flags: 40 					#model: #calificarComprador 					#label: 'Calificar comprador' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 5 0 -2 0.666666 -5 1 ) 					#name: #calificarVendedor 					#flags: 40 					#model: #calificarVendedor 					#label: 'Calificar vendedor' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	|venta|	venta := ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))).	(self widgetAt: #botonComprador) enabled: (venta clienteCalificado not).	(self widgetAt: #botonVendedor) enabled: (venta vendedorCalificado not).</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	|venta|	venta := ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))).	(self widgetAt: #calificarComprador) enabled: (venta clienteCalificado not).	(self widgetAt: #calificarVendedor) enabled: (venta vendedorCalificado not).</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	|venta|	venta := ((admin listaVentas at: (sightingsTable selectionIndexHolder value y))).	(self widgetAt: #calificarComprador) isEnabled: (venta clienteCalificado not).	(self widgetAt: #calificarVendedor) isEnabled: (venta vendedorCalificado not).</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 264 843 464 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#model: #valorCalificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 22 0 131 0 43 0 ) 					#name: #mostrarCalificacion 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 284 843 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#model: #valorCalificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 25 0 131 0 40 0 ) 					#name: #mostrarCalificacion 					#flags: 0 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 284 843 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#model: #valorCalificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 101 0 23 0 131 0 38 0 ) 					#name: #mostrarCalificacion 					#flags: 0 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 284 843 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#model: #valorCalificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 6 0 126 0 21 0 ) 					#name: #mostrarCalificacion 					#flags: 0 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>ModificarCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Nueva categoría' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 523 284 843 484 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 5 0 ) 					#label: 'Calificación:' ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 86 0 39 0 ) 					#name: #calificacion 					#model: #valorCalificacion 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarCalificacion ) 					#helpText: #valorCalificacion 					#orientation: #horizontal 					#start: 1 					#stop: 5 					#step: 1 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 5 0 126 0 20 0 ) 					#name: #mostrarCalificacion 					#flags: 0 					#model: #valorCalificacion 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 50 0 ) 					#label: 'Comentario:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 69 0 -5 1 -5 1 ) 					#name: #comentario 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="buscarArticulosPorNombre">buscarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: (admin listaArticulos collect: [:x| (x nombre)])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Filtra los artículos por nombre:';		secondLabel: 'Sugerencias:';		request</body></methods><remove-selector><class-id>MenuPrincipal</class-id> <selector>buscarArticulosPorNombre</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: (admin listaArticulos collect: [:x| (x nombre)])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Filtra los artículos por nombre:';		secondLabel: 'Sugerencias:';		request</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtroNombre">filtroNombre	| dialog |	dialog := IncrementalSearchDialog		forRequestWithSuggestions: (admin listaArticulos collect: [:x| (x nombre)])		filterBlock: [:entry :suggestion | entry, '*' match: suggestion].	^dialog		firstLabel: 'Filtra los artículos por nombre:';		secondLabel: 'Sugerencias:';		request</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|sequencia nombre|	sequencia := (self widgetAt: #tablaArticulos) sequence.	nombre := self filtroNombre.	admin perro.</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 107 0 455 0 159 0 476 0 ) 					#name: #filtrarArticulosPorNombre 					#label: 'Action' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 107 0 455 0 159 0 476 0 ) 					#model: #filtrarArticulosPorNombre 					#label: 'Action' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|sequencia nombre|	sequencia := (self widgetAt: #tablaArticulos).	nombre := self filtroNombre.	admin perro.</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(1 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar precios' 							#value: #administrarPrecios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar planes de compra' 							#value: #administrarPlanesDeCompra ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar ventas' 							#value: #administrarVentas ) ) #(2 4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|sequencia a b c|	a := self tableInterface.	b := self cellContents.	c := self sightingsTable.	admin perro.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			"add: (articulo nombre);"			add: (#ddd &gt;&gt; 4444);			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '11:40:32 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 11:40:32 on 23 de enero de 2017."</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			"add: (articulo nombre);"			add: (#ddd &gt;&gt; '4444');			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPreciosActivos at: (sightingsTable selectionIndexHolder value y)) idPrecio).	"ui open."	test := ((admin listaPreciosActivos at: (sightingsTable selectionIndexHolder value y)) idPrecio).	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPreciosActivos at: (sightingsTable selectionIndexHolder value y)) idPrecio).	"ui open."	test := (admin listaPreciosActivos at: (sightingsTable selectionIndexHolder)).	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPreciosActivos at: (sightingsTable selectionIndexHolder value y)) idPrecio).	"ui open."	test := (sightingsTable selectionIndexHolder).	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: ((admin listaPreciosActivos at: (sightingsTable selectionIndexHolder value y)) idPrecio).	"ui open."	test := (sightingsTable selection).	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	"ui open."	test := (sightingsTable selection).	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	"ui open."	test := (sightingsTable selection key).	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui test|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	ui open.	admin perro.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Calificación comprador';		add: 'Calificación vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrirVentanaCalificacion">abrirVentanaCalificacion	|ui|	ui := ModificarCalificacion new.	ui admin: admin.	ui open.	ui id: (sightingsTable selection key).	^ui</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Calificación comprador';		add: 'Calificación vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self cargarTabla	super open.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self cargarTabla.	super open.</body></methods><do-it>SeleccionarVentaCalificacion organization addCategory: #accessing</do-it><do-it>SeleccionarVentaCalificacion classifySymbol: #cargarTabla under: #accessing</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self cargarTabla.	super open.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self cargarTabla.	super open</body></methods><do-it>SeleccionarArticuloVenta organization addCategory: #accessing</do-it><do-it>SeleccionarArticuloVenta classifySymbol: #cargarTabla under: #accessing</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self cargarTabla.	super open</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>filtroNombre</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self cargarTabla.</body></methods><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface cellContents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor articulo param labels|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface cellContents labels </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarArticuloVenta</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray.		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray		]		ifNotNil: [labels]</body></methods><do-it>SeleccionarArticuloVenta organization addCategory: #accessing</do-it><do-it>SeleccionarArticuloVenta classifySymbol: #cargarTabla under: #accessing</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><do-it>ddd := Array new.</do-it><do-it>Array new size</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla">recargarTabla	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla.	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: condicion	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|				vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));			add: '$' , ((x precio) displayString);			add: (vendedor nombreYApellido);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		(unBloque value: x) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			articulo := admin buscarArticuloPorId: (x idArticulo).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		vendedor := admin buscarUsuarioPorId: (x idVendedor).		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x) ifTrue: [			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>recargarTabla</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '12:35:35 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 12:35:35 on 23 de enero de 2017."</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param test|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param test|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	test := self labels.	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray.			labels		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray.		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | b nombre &gt; 'ee']</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | b nombre &gt; 'a']</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | b nombre &gt; 'x']</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | (b idArticulo) &lt; 3]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | (b idArticulo) &gt; 3]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| b idArticulo &lt; 3].	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	cellContents := String new asValue.	self cellContents onChangeSend: #changedCell to: self.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | (b idArticulo) &gt; 3].	</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | (b idArticulo) &gt; 3].	admin t.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|r|	self recargarTabla: [:a :b | (b idArticulo) &gt; 3].	r:=self.	admin adff.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|r|	self recargarTabla: [:a :b | (b idArticulo) &gt;= 3].	r:=self.	admin adff.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|r|	self recargarTabla: [:a :b | (b idArticulo) &gt;= 3].	(self widgetAt: #tablaArticulos) updateModel.	r:=self.	admin adff.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|r|	self recargarTabla: [:a :b | (b idArticulo) &gt;= 3].	(self widgetAt: #tablaArticulos) updateModel.	r:=self.	"admin adff."</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|r|	self recargarTabla: [:a :b | (b idArticulo) &gt;= 3].	(self widgetAt: #tablaArticulos) updateModel.	r:=self.	admin adff.</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>cellContents</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	cellContents := String new asValue.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cellContents</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>cellContents</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface labels </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param test|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	|r|	self recargarTabla: [:a :b | (b idArticulo) &gt;= 3].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | (b idArticulo) &gt;= 3].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	self recargarTabla: [:a :b | false].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	tableInterface := nil.	self recargarTabla: [:a :b | false].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface		isNil: [tableInterface := TableInterface new]		ifNotNil: []</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface		isNil: [tableInterface := TableInterface new]		ifNotNil: [tableInterface]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface		ifNil: [tableInterface := TableInterface new]		ifNotNil: [tableInterface]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	self tableInterface selectionInTable: sightingsTable.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	self tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sightingsTable">sightingsTable	^sightingsTable		ifNil: [sightingsTable := SelectionInTable new]		ifNotNil: [sightingsTable]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable table: list.	self tableInterface selectionInTable: sightingsTable.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| list tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: list.	self tableInterface selectionInTable: sightingsTable.</body></methods><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>cellContents</selector></remove-selector><class><name>SeleccionarVentaCalificacion</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Calificación comprador';		add: 'Calificación vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		"rowLabelsArray: nil;"		rowLabelsWidth: 24;		"elementFormats: #(#left #right);"		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param labels|	labels := List new.	labels		add: 'Nombre del artículo';		add: 'Precio';		add: 'Comprador';		add: 'Vendedor';		add: 'Calificación comprador';		add: 'Calificación vendedor';		add: 'Categoría'.	admin listaParametrosGenerales do: [:x| labels add: (x nombre)].	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (labels size)		rows: ((tablaArticulos size) / (labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><class><name>SeleccionarTabla</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarTabla</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><class><name>SeleccionarTabla</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><do-it>SeleccionarTabla organization addCategory: #accessing</do-it><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="tableInterface">tableInterface	^tableInterface		ifNil: [tableInterface := TableInterface new]		ifNotNil: [tableInterface]</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="sightingsTable">sightingsTable	^sightingsTable		ifNil: [sightingsTable := SelectionInTable new]		ifNotNil: [sightingsTable]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="recargarTabla:">recargarTabla: unBloque	| lista tablaArticulos vendedor articulo param|	tablaArticulos := List new.	admin listaPreciosActivos do: [:x|		articulo := admin buscarArticuloPorId: (x idArticulo).		(unBloque value: x value: articulo) ifTrue: [			vendedor := admin buscarUsuarioPorId: (x idVendedor).			tablaArticulos				add: (UserMessage defaultString: (articulo nombre) key: (x idPrecio));				add: '$' , ((x precio) displayString);				add: (vendedor nombreYApellido);				add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).			admin listaParametrosGenerales do: [:p|				param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).				tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])			].		]	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	self tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><class><name>SeleccionarVentaCalificacion</name><environment>Smalltalk</environment><super>SeleccionarTabla</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>SeleccionarVentaCalificacion</name><environment>Smalltalk</environment><super>SeleccionarTabla</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>labels</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>labels</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tableInterface</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>tableInterface</staticKey> <definitionChange>added</definitionChange></component_static_change><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sightingsTable</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>sightingsTable</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>SeleccionarTabla</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><remove-selector><class-id>SeleccionarTabla</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarTabla organization removeCategory: #'initialize-release'</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	self tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><remove-selector><class-id>SeleccionarTabla</class-id> <selector>cargarTabla</selector></remove-selector><class><name>SeleccionarTabla</name><environment>Smalltalk</environment><super>ProyectoFinalUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sightingsTable tableInterface labels </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray		]		ifNotNil: [labels]</body></methods><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>sightingsTable</selector></remove-selector><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>tableInterface</selector></remove-selector><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: labels copy asArray;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Comprador';				add: 'Vendedor';				add: 'Calificación comprador';				add: 'Calificación vendedor';				add: 'Categoría'.				admin listaParametrosGenerales do: [:x| labels add: (x nombre)].				labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy asArray;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>interface opening</category><body package="ProyectoFinal" selector="open">open	self cargarTabla.	super open.</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>sightingsTable</selector></remove-selector><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>tableInterface</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	super cargarTabla.</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	sightingsTable := SelectionInTable with: list.	tableInterface := TableInterface new		selectionInTable: sightingsTable.	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| list tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	list := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x calificacionVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	super cargarTabla.</body></methods><do-it>'hola' ahsContainsString: 'ho'.</do-it><do-it>'hola' ahsContainsString: 'hoa'.</do-it><do-it>'hola' ahsContainsString: 'l'.</do-it><do-it>'hola' ahsContainsString: 'la'.</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	tableInterface := nil.	self recargarTabla: [:a :b | b ahsContainsString: 'a' ].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	tableInterface := nil.	self recargarTabla: [:a :b | b nombre ahsContainsString: 'a' ].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="filtrarArticulosPorNombre">filtrarArticulosPorNombre	tableInterface := nil.	self recargarTabla: [:a :b | b nombre asLowercase ahsContainsString: 'a' ].</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 649 152 1289 632 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 8 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 25 0 258 0 46 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #actualizarFiltro ) ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 52 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 9 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 29 0 258 0 50 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #actualizarFiltro ) ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: #actualizarFiltro ) ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '2:44:29 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 14:44:29 on 23 de enero de 2017."</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>filtrarArticulosPorNombre</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	self recargarTabla: [:a :b | b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase) ].</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '2:46:30 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 14:46:30 on 23 de enero de 2017."</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	self recargarTabla: [:a :b | b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase) ].</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: #actualizarFiltro 						#valueChangeSelector: #actualizarFiltro ) ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 387 0 21 0 487 0 42 0 ) 					#name: #InputEditor1 					#isOpaque: true 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	self recargarTabla: [:a :b | b nombre asLowercase ahsContainsString: ((self widgetAt: #InputEditor1) model value asLowercase) ].</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 592 177 1232 657 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 387 0 21 0 487 0 42 0 ) 					#name: #InputEditor1 					#isOpaque: true 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	self recargarTabla: [:a :b | b nombre asLowercase ahsContainsString: ((self widgetAt: #InputEditor1) model value asLowercase) ].	^true</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 387 0 21 0 487 0 42 0 ) 					#name: #InputEditor1 					#isOpaque: true 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro 						#requestValueChangeSelector: #actualizarFiltro ) 					#isWrapped: false 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: true 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 389 257 1029 737 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	self recargarTabla: [:a :b | b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase) ].	^true</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	self recargarTabla: [:a :b |		(self widgetAt: #nombre) model value			ifNil: [true]			ifNotNil: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(filtroNombre isNil) | (filtroNombre = '')			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="e">e	^false</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro 						#requestValueChangeSelector: #e ) 					#tabable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="e">e	^true</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 56 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 64 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 84 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 96 160);		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><do-it>SeleccionarTabla renameTo: #ListarTabla</do-it><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 320 405 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 621 200 1261 680 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 268 0 30 0 400 0 51 0 ) 					#name: #ActionButton1 					#label: 'Filtrar por categoría...' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 420 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 0 0 -5 1 51 0 ) 					#model: #filtarPorCategoria 					#label: 'Filtrar por categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 440 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 0 0 -5 1 51 0 ) 					#model: #filtarPorCategoria 					#label: 'Filtrar por categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 0 0 -5 1 51 0 ) 					#model: #filtarPorCategoria 					#label: 'Filtrar por categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 0 0 -5 1 51 0 ) 					#model: #filtarPorCategoria 					#label: 'Filtrar por categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambioEnSeleccion">cambioEnSeleccion	(self widgetAt: #botonComprar) isEnabled: true</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(filtroNombre isNil) | (filtroNombre = '')			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 0 0 -5 1 51 0 ) 					#model: #filtarPorCategoria 					#label: 'Filtrar por categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 0 0 -5 1 51 0 ) 					#model: #seleccionarCategoria 					#label: 'Filtrar por categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 58 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>e</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (Array with: Magnitude with: Object with: Integer with: Model)		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage displayString: (x nombre) key: (x idCategoria)])		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: (x idCategoria)])		usingDirectRelation: [:a :b | a subclasses includes: b].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: (x idCategoria)])		usingDirectRelation: [:a :b | admin perteneceALaCategoria: a a: b].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: (x idCategoria)])		usingDirectRelation: [:a :b | (admin perteneceALaCategoria: a a: b) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><do-it>admin perteneceALaCategoria: 2 a: 3</do-it><do-it>admin perteneceALaCategoria: 2 a: 3.</do-it><do-it>admin perteneceALaCategoria: 2 a: 2.</do-it><do-it>admin perteneceALaCategoria: 2 a: 3.</do-it><do-it>admin perteneceALaCategoria: 12 a: 7.</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: (x idCategoria)])		usingDirectRelation: [:a :b | a idCategoria = (b idCategoriaPadre) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | a idCategoria = (b idCategoriaPadre) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	TreeSelectionModule new		rootHolder: root;		showRoot: false;		open</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui ddd.</body></methods><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ListarTabla</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idCategoria </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (a idCategoria) a: idCategoria) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idCategoria := 0.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui mainWindow label: 'Seleccionar categoría'.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui label: 'Seleccionar categoría'.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	ui window componentAt: #tree.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	ui perro.	ui window componentAt: #tree.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := ui window componentAt: #treeList.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := ui window componentAt: #treeList.	treeWidget onChangeSend: #cambiarCategoria to: self.		</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	holis</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := ui componentAt: #treeList.	treeWidget onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := (ui componentAt: #treeList) widget.	treeWidget onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := (ui componentAt: #treeList) widget.	treeWidget valueChangeSelector: [:x| x ffd].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := (ui componentAt: #treeList) widget.	treeWidget valueChangeSelector: [:x| x key].</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := (ui componentAt: #treeList) widget.	treeWidget valueChangeSelector: [].</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>open</selector></remove-selector><do-it>SeleccionarArticuloVenta organization removeCategory: #'interface opening'</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	treeWidget := (ui componentAt: #treeList) widget.	treeWidget valueChangeSelector: #ggjh receiver: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui treeWidget|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	root onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	root onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	root onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	ui treeHolder onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui bindings at: #treeHolder) listHolder onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	dsadasdasd</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	dsadasdasd dasd.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui bindings at: #treeHolder) listHolder onChangeSend: #cambiarCategoria to: self.	ui ds.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) model onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	Transcript show: 'hola'.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	admin  dasd.	(ui componentAt: #treeList) widget model onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model onChangeSend: #dcambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: idCategoria) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model value onChangeSend: #dcambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	ui		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model value onChangeSend: #dcambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	ui		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	ui treeHolder onChangeSend: #dcambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	ui .	ui treeHolder onChangeSend: #dcambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	ui treeHolder onChangeSend: #dcambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	ui treeHolder onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	ui treeHolder listHolder onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model doubleClickSelector.</body></methods><do-it>value := (ValueHolder with: 'hola').</do-it><do-it>value := (ValueHolder with: 'hola').</do-it><do-it>value onChangeSend: #ddd to: admin.</do-it><do-it>value onChangeSend: #abrirUi to: admin.</do-it><do-it>value onChangeSend: #abrirUI to: admin.</do-it><do-it>valuee := (ValueHolder with: 'hola').</do-it><do-it>valuee onChangeSend: #abrirUI to: admin.</do-it><do-it>valuee value: 'aa'.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '4:52:12 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 16:52:12 on 23 de enero de 2017."</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	ui		rootHolder: root;		showRoot: false;		open.	ui window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model doubleClickSelector.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	(ui componentAt: #treeList) widget model doubleClickSelector.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	ui treeHolder model doubleClickSelector.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui holder|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	holder := ui treeHolder.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui holder|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	holder := ui treeHolder.	holder ee.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui holder|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	holder := ui treeHolder.	holder selectionIndexHolder onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui holder|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	holder := ui treeHolder.	idCategoria := holder.	holder selectionIndexHolder onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	|holder|	holder :=idCategoria.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	|holder|	idCategoria.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	self dddd.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria	|d|	d := self.	d eee.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cambiarCategoria">cambiarCategoria</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui holder|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := holder selectionIndexHolder.	idCategoria onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui holder|	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder selectionIndexHolder.	idCategoria onChangeSend: #cambiarCategoria to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder selectionIndexHolder.	idCategoria onChangeSend: #cambiarCategoria to: self.</body></methods><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>cambiarCategoria</selector></remove-selector><methods><class-id>SeleccionarArticuloVenta</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	idCategoria := 0 asValue.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria value) a: idCategoria) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: (idCategoria value)) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder selectionIndexHolder.	idCategoria onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder.	idCategoria onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder selectionIndexHolder.	idCategoria onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder.	idCategoria onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder selectionIndexHolder.	ui treeHolder selectionIndexHolder onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder selection.	ui treeHolder selectionIndexHolder onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre dde|	dde := self.	dde eee.	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: (idCategoria value)) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: (idCategoria value)) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	idCategoria := ui treeHolder.	ui treeHolder selectionIndexHolder onChangeSend: #actualizarFiltro to: self.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idCategoria</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>idCategoria</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>SeleccionarArticuloVenta</name><environment>Smalltalk</environment><super>ListarTabla</super><private>false</private><indexed-type>none</indexed-type><inst-vars>categoriaHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>SeleccionarArticuloVenta</class-id><body>RegistrarVenta has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="seleccionarCategoria">seleccionarCategoria	| root ui |	root := ArtificialTreeItemHolder 		hierarchicallyArranged: (admin listaCategorias collect: [:x| UserMessage defaultString: (x nombre) key: x])		usingDirectRelation: [:a :b | (a key idCategoria) = (b key idCategoriaPadre) ].	ui := TreeSelectionModule new.	(ui		rootHolder: root;		showRoot: false;		open) window label: 'Seleccionar categoría'.	categoriaHolder := ui treeHolder.	ui treeHolder selectionIndexHolder onChangeSend: #actualizarFiltro to: self.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: (categoriaHolder value)) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: (self idCategoria value)) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder at: (categoriaHolder selectionIndexHolder value)) key</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) key</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value))</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	|perro|	perro := (categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)).	perro ee.	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value idCategoria</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) idCategoria</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) key idCategoria</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) idCategoria</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	|perro|	perro := (categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)).	perro aa.	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	|perro|	perro := (categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)).	^perro key idCategoria.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	|perro|	perro := (categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)).	^perro value key idCategoria.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="categoria">categoria	^(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value key</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="idCategoria">idCategoria	^self categoria idCategoria</body></methods><do-it>valuee := (SelectionInTree new).</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="categoria">categoria	^categoriaHolder		ifNil: [admin listaCategorias at: 0]		ifNotNil: [(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value key]</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nombreCategoria">nombreCategoria	^self categoria nombre</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 646 238 1286 718 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#name: #Label1 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 6 0 -5 1 27 0 ) 					#flags: 0 					#isOpaque: true 					#model: #nombreCategoria 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="categoria">categoria	^categoriaHolder		ifNil: [admin buscarCategoriaPorId: 0]		ifNotNil: [(categoriaHolder listHolder value at: (categoriaHolder selectionIndexHolder value)) value key]</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 6 0 -5 1 27 0 ) 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 8 0 -5 1 29 0 ) 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 10 0 -5 1 31 0 ) 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 10 0 -5 1 31 0 ) 					#name: #nombreCategoria 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: '&lt;Ninguno&gt;' ) ) ) )</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizarFiltro">actualizarFiltro	|filtroNombre|	filtroNombre := (self widgetAt: #nombre) model value.	self recargarTabla: [:a :b |		(admin perteneceALaCategoria: (b idCategoria) a: (self idCategoria value)) &amp;		((filtroNombre isNil) | (filtroNombre = ''))			ifTrue: [true]			ifFalse: [b nombre asLowercase ahsContainsString: ((self widgetAt: #nombre) model value asLowercase)]	].	(self widgetAt: #botonComprar) isEnabled: false.	(self widgetAt: #nombreCategoria) model value: (self nombreCategoria)</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -185 1 10 0 -10 1 31 0 ) 					#name: #nombreCategoria 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: '&lt;Ninguno&gt;' ) ) ) )</body></methods><remove-selector><class-id>SeleccionarVentaCalificacion</class-id> <selector>open</selector></remove-selector><do-it>SeleccionarVentaCalificacion organization removeCategory: #'interface opening'</do-it><remove-selector><class-id>SeleccionarArticuloVenta</class-id> <selector>initialize</selector></remove-selector><do-it>SeleccionarArticuloVenta organization removeCategory: #'initialize-release'</do-it><do-it>SelectionInTable new selection.</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	sightingsTable selection y: 1.	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	sightingsTable selectionIndexHolder value y: 1.	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="comprar">comprar	|ui|	sightingsTable selectionIndexHolder value x: 1.	ui := ModificarVenta new.	ui admin: admin.	ui idPrecio: (sightingsTable selection key).	ui open.	self closeRequest.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="abrirVentanaCalificacion">abrirVentanaCalificacion	|ui|	sightingsTable selectionIndexHolder value x: 1.	ui := ModificarCalificacion new.	ui admin: admin.	ui open.	ui id: (sightingsTable selection key).	^ui</body></methods><methods><class-id>SeleccionarVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labelString">labelString	^'Administrar ventas'</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="actualizar">actualizar	self subclassResponsibility</body></methods><methods><class-id>ModificarItem</class-id> <category>accessing</category><body package="ProyectoFinal" selector="agregar">agregar	self subclassResponsibility</body></methods><methods><class-id>ListarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels		self subclassResponsibility</body></methods><methods><class-id>ListarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	self subclassResponsibility</body></methods><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="claseSeleccionar">claseSeleccionar	self subclassResponsibility</body></methods><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -185 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -185 1 10 0 -10 1 31 0 ) 					#name: #nombreCategoria 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: '&lt;Ninguno&gt;' ) ) ) )</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: '&lt;Ninguno&gt;').	self  agregarPlanDeCompra: ((PlanDeCompra new) idPlan: 0; interes: 0; cuotas: 1).	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><comment><class-id>SeleccionarPrecios</class-id><body>SeleccionarPrecios has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>SeleccionarPlanesDeCompraPrecio</class-id><body>SeleccionarPlanesDeCompraPrecio has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idPrecio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPrecioasd</body></comment><comment><class-id>SeleccionarPlanesDeCompra</class-id><body>SeleccionarPlanesDeCompra has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ListarTabla</class-id><body>ListarTabla has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Subclasses must implement the following messages:	accessing		labelsInstance Variables:	labels	&lt;Collection&gt;	description of labels	sightingsTable	&lt;SelectionInTable&gt;	description of sightingsTable	tableInterface	&lt;TableInterface&gt;	description of tableInterfaceasd</body></comment><comment><class-id>PlanDeCompraPrecio</class-id><body>PlanDeCompraPrecio has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idPlan	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPlan	idPlanPrecio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPlanPrecio	idPrecio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPrecioasd</body></comment><comment><class-id>Lista</class-id><body>Lista has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>SeleccionarVentaCalificacion</class-id><body>SeleccionarVentaCalificacion has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><comment><class-id>ModificarCalificacion</class-id><body>ModificarCalificacion has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	calificacion	&lt;ValueHolder&gt;	description of calificacion	compradorVendedor	&lt;AbstractProxy | MessageArchiver | Object | OutputParameter | ProtoObject&gt;	description of compradorVendedorasd</body></comment><comment><class-id>ModificarPlanDeCompraPrecio</class-id><body>ModificarPlanDeCompraPrecio has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables:	idPrecio	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of idPrecioasd</body></comment><do-it>0</do-it><do-it>0</do-it><do-it>0</do-it><do-it>0</do-it><do-it>0</do-it><do-it>0</do-it><do-it>0</do-it><class><name>PlanDeCompraPrecio</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPrecio idPlan </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: 'Todo').	self  agregarPlanDeCompra: ((PlanDeCompra new) idPlan: 0; interes: 0; cuotas: 1).	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>articulos</category><body package="ProyectoFinal" selector="agregarPrecio:">agregarPrecio: unPrecio	self agregarPlanDeCompraPrecio: (PlanDeCompraPrecio new		idPlan: 0;		idPrecio: (unPrecio idPrecio)		).	listaPrecios add: unPrecio.</body></methods><do-it>admin listaPlanesDeCompraPrecio do: [:x| x idPrecio: 1].</do-it><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="restaurarCalificaciones">restaurarCalificaciones	listaVentas do: [:x|		x			calificacionVendedor: nil;			calificacionCliente: nil;			comentarioVendedor: nil;			comentarioCliente: nil	].	listaPlanesDeCompraPrecio := List new.</body></methods><do-it>admin restaurarCalificaciones.</do-it><do-it>admin listaPrecios do: [:x|	admin agregarPlanDeCompraPrecio: (PlanDeCompraPrecio new		idPrecio: (x idPrecio);		idPlan: 0	)].</do-it><do-it>0</do-it><do-it>1</do-it><do-it>2</do-it><do-it>3</do-it><do-it>4</do-it><do-it>4</do-it><do-it>5</do-it><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra listaPlanesDeCompraPrecio guiMenuPrincipal archivoGuardado documentoNuevo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	self restaurarDatos.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: 'Todo').	self  agregarPlanDeCompra: ((PlanDeCompra new) idPlan: 0; interes: 0; cuotas: 1).	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="retaurarDatos">retaurarDatos	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="archivoNuevo">archivoNuevo	documentoNuevo := true.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="archivoNuevo">archivoNuevo	self retaurarDatos.	documentoNuevo := true.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="restaurarDatos">restaurarDatos	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>retaurarDatos</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="archivoNuevo">archivoNuevo	self restaurarDatos.	documentoNuevo := true.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	self restaurarDatos.	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="restaurarDatos">restaurarDatos	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: 'Todo').	self  agregarPlanDeCompra: ((PlanDeCompra new) idPlan: 0; interes: 0; cuotas: 1).</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	self restaurarDatos.	archivoGuardado := ('ultimo_guardado' asFilename exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="abrirUI">abrirUI	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	guiMenuPrincipal open.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="abrirUI">abrirUI	guiMenuPrincipal ifNotNil: [guiMenuPrincipal closeRequest].</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="abrirUI">abrirUI	guiMenuPrincipal ifNotNil: [guiMenuPrincipal closeRequest].	guiMenuPrincipal := MenuPrincipal new.	guiMenuPrincipal admin: self.	guiMenuPrincipal open.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="abrirUI">abrirUI	MenuPrincipal new		admin: self;		open</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>guiMenuPrincipal</selector></remove-selector><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra listaPlanesDeCompraPrecio archivoGuardado documentoNuevo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	|ultimoGuardado|	super initialize.	self restaurarDatos.	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: ['ultimo_guardado' asFilename contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	|ultimoGuardado|	super initialize.	self restaurarDatos.	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo].	^self</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Nuevo...' 							#value: #nuevoArchivo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(2 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar precios' 							#value: #administrarPrecios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar planes de compra' 							#value: #administrarPlanesDeCompra ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar ventas' 							#value: #administrarVentas ) ) #(2 4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	|ultimoGuardado|	super initialize.	self restaurarDatos.	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	self restaurarDatos.	^self</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile]		ifFalse: ['por_defecto.ipf']) asFilename.	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="auto">auto	|pf|	pf:=self new.	pf		abrirUI		cargarUltimoGuardado.	^pf</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado		ifNil:[self guardarComo]		ifNotNil:[			archivoGuardado writeStream nextPutAll: (self informacionSerializada); flush.			'ultimo_guardado' asFilename writeStream nextPutAll: (archivoGuardado asString); flush.		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: [nil]).	archivoGuardado exists	ifTrue: [self cargarArchivo]	ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: [nil]).	archivoGuardado exists		ifTrue: [self cargarArchivo]		ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="archivoNuevo">archivoNuevo	self restaurarDatos.	archivoGuardado := nil.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="archivoNuevo">archivoNuevo	self restaurarDatos.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="restaurarDatos">restaurarDatos	listaPersonas := Lista new.	listaUsuarios := Lista new.	listaArticulos := Lista new.	listaCategorias := Lista new.	listaParametrosGenerales := Lista new.	listaParametrosGeneralesArticulos := Lista new.	listaPrecios := Lista new.	listaPlanesDeCompra := Lista new.	listaPlanesDeCompraPrecio := Lista new.	listaVentas := Lista new.	archivoGuardado := nil.	self  agregarCategoria: ((Categoria new) idCategoria: 0; nombre: 'Todo').	self  agregarPlanDeCompra: ((PlanDeCompra new) idPlan: 0; interes: 0; cuotas: 1).</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>archivoGuardado</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	archivoGuardado ifNotNil: [		diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).		diccionario associationsDo: [:x| self instVarNamed: (x key) put: (x value)].	]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection))				setWritable: true;				ifNotNil: [self cargarArchivo].			archivoGuardado		]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarArchivo">cargarArchivo	|diccionario|	diccionario := Compiler evaluate: (archivoGuardado contentsOfEntireFile).	diccionario associationsDo: [:x| self instVarNamed: (x key) put: (x value)].</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Nuevo...' 							#value: #nuevo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileNew ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(2 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar precios' 							#value: #administrarPrecios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar planes de compra' 							#value: #administrarPlanesDeCompra ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar ventas' 							#value: #administrarVentas ) ) #(2 4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="nuevo">nuevo	admin archivoNuevo.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cambiarDestinoDeGuardado">cambiarDestinoDeGuardado	| dialog |	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		fileCondition: #new.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^archivoGuardado := dialog select</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection))				setWritable: true;				ifNotNil: [self cargarArchivo].			archivoGuardado		]		ifFalse: [nil]</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarPlanesDeCompra</class-id> <category>updating</category><body package="ProyectoFinal" selector="eliminar">eliminar	admin eliminarPlanDeCompra: ((self widgetAt: #idItem) selection key asNumber).	super eliminar.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	'listaVentanas' removeAllSuchThat: [:x| x respondsTo: #closeRequest.]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	'listaVentanas' removeAllSuchThat: [:x|		(x respondsTo: #closeRequest) ifTrue: [x closeRequest]. true	]</body></methods><class><name>ProyectoFinal</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listaPersonas listaUsuarios listaArticulos listaCategorias listaVentas listaParametrosGenerales listaParametrosGeneralesArticulos listaPrecios listaPlanesDeCompra listaPlanesDeCompraPrecio listaVentanas archivoGuardado documentoNuevo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><comment><class-id>ProyectoFinal</class-id><body>Es la clase general que funciona como administrador de la aplicación.</body></comment><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="listaVentanas">listaVentanas	^listaVentanas</body></methods><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #listaVentanas under: #general</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #restaurarCalificaciones under: #ventas</do-it><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	listaVentanas removeAllSuchThat: [:x|		(x respondsTo: #closeRequest) ifTrue: [x closeRequest]. true	]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	listaVentanas removeAllSuchThat: [:x|		(x respondsTo: #closeRequest) ifTrue: [x closeRequest]. true	]	listaVentanas isEmpty ifTrue: [self cerrarTodasLasVentanas]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>parametros</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	listaVentanas removeAllSuchThat: [:x|		(x respondsTo: #closeRequest) ifTrue: [x closeRequest]. true	].	listaVentanas isEmpty ifTrue: [self cerrarTodasLasVentanas]</body></methods><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	self guardar.	admin cerrarTodasLasVentanas.	super executeAutoSave.</body></methods><methods><class-id>ProyectoFinalUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject	admin agregarVentana: self.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="agregarVentana:">agregarVentana: unaVentana	listaVentanas add: unaVentana.</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '8:41:32 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:41:32 on 23 de enero de 2017."</do-it><methods><class-id>ProyectoFinalUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject.	admin agregarVentana: self.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaVentanas := List new.	self restaurarDatos.	^self</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	super initialize.	listaVentanas := List new.	self restaurarDatos.	^self</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '8:44:20 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:44:20 on 23 de enero de 2017."</do-it><remove-selector><class-id>ProyectoFinal</class-id> <selector>listaVentanas</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="listaVentanas">listaVentanas	^listaVentanas</body></methods><do-it>ProyectoFinal organization addCategory: #general</do-it><do-it>ProyectoFinal classifySymbol: #cerrarTodasLasVentanas under: #general</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	listaVentanas removeAllSuchThat: [:x|		(x respondsTo: #closeRequest) ifTrue: [x closeRequest]. true	].	"listaVentanas isEmpty ifTrue: [self cerrarTodasLasVentanas]"</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '8:47:10 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:47:10 on 23 de enero de 2017."</do-it><methods><class-id>ProyectoFinalUI</class-id> <category>accessing</category><body package="ProyectoFinal" selector="admin:">admin: anObject	admin := anObject.	admin agregarVentana: self.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 240 80 ) 			#max: #(#{Core.Point} 640 80 ) 			#bounds: #(#{Graphics.Rectangle} 640 383 880 463 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 28 0 ) 					#name: #botonRegistrarVenta 					#model: #registrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -5 1 25 0.5 ) 					#name: #botonRegistrarCalificacion 					#model: #registrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '8:48:34 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 20:48:34 on 23 de enero de 2017."</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="ventanaPrincipal">ventanaPrincipal	^listaVentanas at: 0</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="ventanaPrincipal">ventanaPrincipal	^listaVentanas at: 1</body></methods><do-it>admin ventanaPrincipal.</do-it><do-it>admin ventanaPrincipal.</do-it><do-it>admin ventanaPrincipal.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="ventanaPrincipal">ventanaPrincipal	|ventana|	^listaVentanas at: 1</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="ventanaPrincipal">ventanaPrincipal	^listaVentanas at: 1</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cerrandoAplicacion">cerrandoAplicacion	^ (listaVentanas isEmpty) | (listaVentanas at: 1 class ~~ MenuPrincipal)</body></methods><methods><class-id>ModificarItem</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	|ui|	super executeAutoSave.	admin cerrandoAplicacion ifFalse: [		ui := (self claseSeleccionar) new.		ui := (self asignarAClaseSeleccionar: ui).		ui open.	]</body></methods><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	VentanaConfirmar		esperarPeticion: '¿Guardar información antes de cerrar?'		yRealizar: [			self guardar.			admin cerrarTodasLasVentanas.		]		oSino: [			admin cerrarTodasLasVentanas.		]	super executeAutoSave.</body></methods><methods><class-id>MenuPrincipal</class-id> <category>private</category><body package="ProyectoFinal" selector="executeAutoSave">executeAutoSave	VentanaConfirmar		esperarPeticion: '¿Guardar información antes de cerrar?'		yRealizar: [			self guardar.			admin cerrarTodasLasVentanas.		]		oSino: [			admin cerrarTodasLasVentanas.		].	super executeAutoSave.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cerrarTodasLasVentanas">cerrarTodasLasVentanas	listaVentanas removeAllSuchThat: [:x|		(x respondsTo: #closeRequest) ifTrue: [x closeRequest]. true	].</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="guardarAlArchivo">guardarAlArchivo	archivoGuardado		ifNil:[self guardarComo]		ifNotNil:[			archivoGuardado writeStream nextPutAll: (self informacionSerializada); flush.			self sobreescribirUltimoGuardado.		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="sobreescribirUltimoGuardado">sobreescribirUltimoGuardado	'ultimo_guardado' asFilename writeStream nextPutAll: (archivoGuardado asString); flush.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection))				setWritable: true.			self sobreescribirUltimoGuardado.			archivoGuardado		]		ifFalse: [nil]</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre del artículo';				add: 'Precio';				add: 'Comprador';				add: 'Vendedor';				add: 'Calificación al comprador';				add: 'Comentario al comprador';				add: 'Calificación al vendedor';				add: 'Comentario al vendedor';				add: 'Categoría'.				admin listaParametrosGenerales do: [:x| labels add: (x nombre)].				labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x comentarioCliente);			add: (x calificacionVendedor);			add: (x comentarioVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	super cargarTabla.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnWidths: #(256 96 160).	self recargarTabla: [:a :b| true].	super cargarTabla.</body></methods><methods><class-id>SeleccionarArticuloVenta</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self recargarTabla: [:a :b| true].	self tableInterface		columnWidths: #(256 96 160).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x comentarioCliente);			add: (x calificacionVendedor);			add: (x comentarioVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 4).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x comentarioCliente);			add: (x calificacionVendedor);			add: (x comentarioVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 48).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x comentarioCliente);			add: (x calificacionVendedor);			add: (x comentarioVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 2000).	super cargarTabla.</body></methods><methods><class-id>ListarTabla</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	self tableInterface		columnLabelsArray: self labels copy;		rowLabelsWidth: 24;		columnLabelsFormats: #left;		rowLabelsFormat: #right.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente);			add: (x comentarioCliente);			add: (x calificacionVendedor);			add: (x comentarioVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar comentario' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -2 0.333333 -5 1 ) 					#name: #calificarComprador 					#flags: 40 					#model: #calificarComprador 					#label: 'Calificar comprador' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 5 0 -2 0.666666 -5 1 ) 					#name: #calificarVendedor 					#flags: 40 					#model: #calificarVendedor 					#label: 'Calificar vendedor' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><class><name>ListarUsuarios</name><environment>Smalltalk</environment><super>ListarTabla</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProyectoFinal</package></attributes></class><methods><class-id>ListarUsuarios</class-id> <category>initialize-release</category><body package="ProyectoFinal" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente ifNil: ['-']);			add: (x comentarioCliente);			add: (x calificacionVendedor);			add: (x comentarioVendedor);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><do-it>nil ifNil: ['-']</do-it><do-it>nil ifNil: ['-']</do-it><do-it>'hola' ifNil: ['-']</do-it><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente ifNil: ['-']);			add: (x comentarioCliente ifNil: ['-']);			add: (x calificacionVendedor ifNil: ['-']);			add: (x comentarioVendedor ifNil: ['-']);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente ifNil: ['-']);			add: (x comentarioCliente ifNil: ['-']);			add: (x calificacionVendedor ifNil: ['-']);			add: (x comentarioVendedor ifNil: ['-']);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			tablaArticulos add: ((admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)) ifNil: ['-'])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo |	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente ifNil: ['-']);			add: (x comentarioCliente ifNil: ['-']);			add: (x calificacionVendedor ifNil: ['-']);			add: (x comentarioVendedor ifNil: ['-']);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			tablaArticulos add: ((admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)) ifNil: ['-'])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>SeleccionarVentaCalificacion</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaVentas do: [:x|		precio := admin buscarPrecioPorId: (x idPrecio).		comprador := admin buscarUsuarioPorId: (x idCliente).		vendedor := admin buscarUsuarioPorId: (precio idVendedor).		articulo := admin buscarArticuloPorId: (precio idArticulo).		tablaArticulos			add: (UserMessage defaultString: (articulo nombre) key: (x idVenta));			add: '$' , ((precio precio) displayString);			add: (comprador nombreYApellido);			add: (vendedor nombreYApellido);			add: (x calificacionCliente ifNil: ['-']);			add: (x comentarioCliente ifNil: ['-']);			add: (x calificacionVendedor ifNil: ['-']);			add: (x comentarioVendedor ifNil: ['-']);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><remove-selector><class-id>ListarUsuarios</class-id> <selector>initialize</selector></remove-selector><do-it>ListarUsuarios organization removeCategory: #'initialize-release'</do-it><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos vendedor precio comprador articulo param|	tablaArticulos := List new.	admin listaUsuarios do: [:x|		tablaArticulos			add: (vendedor nombreYApellido);			add: (x class asString);			add: ((admin promedioDeCalificacionDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin buscarCategoriaPorId: (articulo idCategoria)) nombre).		admin listaParametrosGenerales do: [:p|			param := (admin buscarParametroGeneral: (p idParametro) delArticulo: (articulo idArticulo)).			tablaArticulos add: (param ifNil: ['-'] ifNotNil: [param valor])		].	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos|	tablaArticulos := List new.	admin listaUsuarios do: [:x|		tablaArticulos			add: (x nombreYApellido);			add: (x class asString);			add: ((admin promedioDeCalificacionDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaArticulos|	tablaArticulos := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaArticulos			add: (x nombreYApellido);			add: (x class asString);			add: ((admin promedioDeCalificacionDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaArticulos copy asArray		columns: (self labels size)		rows: ((tablaArticulos size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (x nombreYApellido);			add: (x class asString);			add: ((admin promedioDeCalificacionDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(256 96 160 160 160 256 160 256).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (x nombreYApellido);			add: (x class asString);			add: ((admin promedioDeCalificacionDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160 160).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (x nombreYApellido);			add: (x class asString);			add: ((admin promedioDeCalificacionDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><do-it>ListarUsuarios class organization addCategory: #'interface specs'</do-it><methods><class-id>ListarUsuarios class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar comentario' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 -2 0.333333 -5 1 ) 					#name: #calificarComprador 					#flags: 40 					#model: #calificarComprador 					#label: 'Calificar comprador' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.333333 5 0 -2 0.666666 -5 1 ) 					#name: #calificarVendedor 					#flags: 40 					#model: #calificarVendedor 					#label: 'Calificar vendedor' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ListarUsuarios class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Listar usuarios' 			#min: #(#{Core.Point} 320 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 476 189 1116 669 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 -5 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#selectionStyle: #row ) ) ) )</body></methods><comment><class-id>ListarUsuarios</class-id><body>ListarUsuarios has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.asd</body></comment><methods><class-id>MenuPrincipal</class-id> <category>accessing</category><body package="ProyectoFinal" selector="listarUsuarios">listarUsuarios	self abrirInterfaz: ListarUsuarios.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="listaDeVentasDelComprador:">listaDeVentasDelComprador: unId	^listaVentas select: [:x| (x idCliente) = unId]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="listaDeVentasDelVendedor:">listaDeVentasDelVendedor: unId	^listaVentas select: [:x| ((self buscarPrecioPorId: (x idPrecio)) idVendedor) = unId]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [		]		siEsVendedor: [		]</body></methods><do-it>admin listaPersonas select: [:x| true].</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			listaPersonas		]		siEsVendedor: [		]</body></methods><do-it>admin listaPersonas select: [:x| true].</do-it><methods><class-id>Lista</class-id> <category>enumerating</category><body package="ProyectoFinal" selector="select:">select: aBlock 	"Evaluate aBlock with each of my elements as the argument.  Collect into a new 	collection like the receiver, only those elements for which aBlock evaluates to true."	| newCollection |	newCollection := self species new.	1 to: limit do:		 [:i | 		| element |		element := self at: i.		(aBlock value: element)			ifTrue: [newCollection addLast: element]].	^newCollection</body></methods><methods><class-id>Lista</class-id> <category>enumerating</category><body package="ProyectoFinal" selector="select:">select: aBlock 	"Evaluate aBlock with each of my elements as the argument.  Collect into a new 	collection like the receiver, only those elements for which aBlock evaluates to true."	| newCollection |	newCollection := self class new.	1 to: limit do:		 [:i | 		| element |		element := self at: i.		(aBlock value: element)			ifTrue: [newCollection addLast: element]].	^newCollection</body></methods><do-it>admin listaPersonas select: [:x| true]</do-it><do-it>admin listaPersonas select: [:x| true]</do-it><do-it>admin listaPersonas </do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin listaPersonas select: [:x| true]</do-it><remove-selector><class-id>Lista</class-id> <selector>select:</selector></remove-selector><do-it>Lista organization removeCategory: #enumerating</do-it><do-it>admin listaPersonas select: [:x| true]</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			self listaDeVentasDelComprador: [:X] select: []		]		siEsVendedor: [		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="listaDeVentasDelCliente:">listaDeVentasDelCliente: unId	^listaVentas select: [:x| (x idCliente) = unId]</body></methods><remove-selector><class-id>ProyectoFinal</class-id> <selector>listaDeVentasDelComprador:</selector></remove-selector><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			(self listaDeVentasDelCliente: unId) select: [:x| x isNil not]		]		siEsVendedor: [			(self listaDeVentasDelCliente: unId) select: []		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			((self listaDeVentasDelCliente: unId) select: [:x| x comentarioVendedor isNil not]) 		]		siEsVendedor: [			(self listaDeVentasDelCliente: unId) select: []		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			((self listaDeVentasDelCliente: unId) select: [:x| x comentarioCliente isNil not]) promedio: [:x| x comentarioCliente]		]		siEsVendedor: [			((self listaDeVentasDelVendedor: unId) select: [:x| x comentarioVendedor isNil not]) promedio: [:x| x comentarioVendedor]		]</body></methods><methods><class-id>Lista</class-id> <category>accessing</category><body package="ProyectoFinal" selector="promedio:">promedio: unBloque	^self isEmpty		ifTrue: [nil]		ifFalse: [(self sumatoria: unBloque) / (self size)]</body></methods><do-it>admin promedioDelUsuario: 2.</do-it><do-it>admin promedioDelUsuario: 2.</do-it><do-it>admin promedioDelUsuario: 2.</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]		]		siEsVendedor: [			((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]		]</body></methods><do-it>admin promedioDelUsuario: 3.</do-it><do-it>admin promedioDelUsuario: 4.</do-it><do-it>admin promedioDelUsuario: 5.</do-it><do-it>admin promedioDelUsuario: 6.</do-it><do-it>admin promedioDelUsuario: 7.</do-it><do-it>admin promedioDelUsuario: 8.</do-it><do-it>admin promedioDelUsuario: 8.</do-it><do-it>admin promedioDelUsuario: 9.</do-it><do-it>admin promedioDelUsuario: 9.</do-it><do-it>admin promedioDelUsuario: 8.</do-it><do-it>(admin promedioDelUsuario: 8) displayString</do-it><do-it>(admin promedioDelUsuario: 8) floor</do-it><do-it>(admin promedioDelUsuario: 8) class</do-it><do-it>(admin promedioDelUsuario: 8) asDouble</do-it><do-it>(admin promedioDelUsuario: 8) asFloat</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			(((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) asFloat		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) asFloat		]</body></methods><do-it>admin promedioDelUsuario: 4.</do-it><do-it>admin promedioDelUsuario: 8</do-it><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (x nombreYApellido);			add: (x class asString);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 240 106 ) 			#max: #(#{Core.Point} 640 106 ) 			#bounds: #(#{Graphics.Rectangle} 3 26 243 132 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 28 0 ) 					#model: #registrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 34 0 -5 1 55 0 ) 					#model: #registrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 59 0 -5 1 80 0 ) 					#model: #listarUsuarios 					#label: 'Listar usuarios' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class asString);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin class</do-it><do-it>admin class displayString</do-it><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin cantidadDeVentasRealizadasPorElUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre y apellido';				add: 'Tipo de usuario';				add: 'Vendedor';				add: 'Categoría'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre y apellido';				add: 'Tipo de usuario';				add: 'Cantidad de ventas';				add: 'Promedio de calificaciones'.			admin listaParametrosGenerales do: [:x| labels add: (x nombre)].			labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := List new.			labels				add: 'Nombre y apellido';				add: 'Tipo de usuario';				add: 'Cantidad de ventas';				add: 'Promedio de calificaciones'.			labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := #('Nombre y apellido' 'Tipo de usuario' 'Cantidad de ventas' 'Promedio de calificaciones').			labels := labels asArray		]		ifNotNil: [labels]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := #('Nombre y apellido' 'Tipo de usuario' 'Cantidad de ventas' 'Promedio de calificaciones').		]		ifNotNil: [labels]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="labels">labels	^labels		ifNil: [			labels := #('Nombre y apellido' 'Tipo de usuario' 'Cantidad de ventas/compras' 'Promedio de calificaciones').		]		ifNotNil: [labels]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin lista: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #listaDeVentasDelCliente: under: #ventas</do-it><do-it>ProyectoFinal organization addCategory: #ventas</do-it><do-it>ProyectoFinal classifySymbol: #listaDeVentasDelVendedor: under: #ventas</do-it><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="listaDeVentasDelUsuario:">listaDeVentasDelUsuario: unId	^'r'</body></methods><methods><class-id>ProyectoFinal</class-id> <category>ventas</category><body package="ProyectoFinal" selector="listaDeVentasDelUsuario:">listaDeVentasDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			(self listaDeVentasDelCliente: unId) size		]		siEsVendedor: [			(self listaDeVentasDelVendedor: unId) size		]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin listaDeVentasDelUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class);			add: ((admin promedioDelUsuario: (usuario idUsuario)) ifNil: ['-']);			add: ((admin listaDeVentasDelUsuario: (usuario idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin listaDeVentasDelUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			(((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) ifNil: [^nil] asFloat 		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [^nil] asFloat		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			(((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) ifNil: [0] asFloat 		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [0] asFloat		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			((((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) ifNil: [0]) asFloat 		]		siEsVendedor: [			((((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [0]) asFloat		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			((((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) ifNil: [0]) asFloat		]		siEsVendedor: [			((((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [0]) asFloat		]</body></methods><methods><class-id>ListarUsuarios</class-id> <category>accessing</category><body package="ProyectoFinal" selector="cargarTabla">cargarTabla	| lista tablaUsuarios usuario|	tablaUsuarios := List new.	admin listaUsuarios do: [:x|		usuario := admin buscarUsuarioPorId: (x idUsuario).		tablaUsuarios			add: (usuario nombreYApellido);			add: (x class);			add: ((admin listaDeVentasDelUsuario: (x idUsuario)) ifNil: ['-']);			add: ((admin promedioDelUsuario: (x idUsuario)) ifNil: ['-'])	].	lista := TwoDList		on: tablaUsuarios copy asArray		columns: (self labels size)		rows: ((tablaUsuarios size) / (self labels size)).	self sightingsTable table: lista.	self tableInterface selectionInTable: sightingsTable.	self tableInterface		columnWidths: #(160).	super cargarTabla.</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			(((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cerrandoAplicacion">cerrandoAplicacion	^ (listaVentanas isEmpty) | (((listaVentanas at: 1) class) ~~ MenuPrincipal)</body></methods><do-it>'Todo'</do-it><methods><class-id>MenuPrincipal class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Proyecto Final' 			#min: #(#{Core.Point} 240 106 ) 			#max: #(#{Core.Point} 640 106 ) 			#bounds: #(#{Graphics.Rectangle} 563 331 803 437 ) 			#flags: 4 			#menu: #menuPrincipal ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 -5 1 28 0 ) 					#model: #registrarVenta 					#label: 'Registrar Venta' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 33 0 -5 1 54 0 ) 					#model: #registrarCalificacion 					#label: 'Registar calificación y comentario' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 59 0 -5 1 80 0 ) 					#model: #listarUsuarios 					#label: 'Listar usuarios' 					#defaultable: true ) ) ) )</body></methods><do-it>admin := ProyectoFinal auto.</do-it><methods><class-id>SeleccionarArticuloVenta class</class-id> <category>interface specs</category><body package="ProyectoFinal" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false #sizeType #specifiedSize #openType #advanced #positionType #positionSystemDefault ) 			#label: 'Registrar venta' 			#min: #(#{Core.Point} 450 240 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 363 144 1003 624 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 7 0 10 0 ) 					#label: 'Filtrar por nombre:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 30 0 258 0 51 0 ) 					#name: #nombre 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #actualizarFiltro ) 					#tabable: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -185 1 36 0 -5 1 57 0 ) 					#model: #seleccionarCategoria 					#label: 'Seleccionar otra categoría...' 					#defaultable: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 64 0 -5 1 -34 1 ) 					#name: #tablaArticulos 					#model: #tableInterface 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #cambioEnSeleccion ) 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.333333 5 0 -5 0.666666 -5 1 ) 					#name: #botonComprar 					#flags: 40 					#model: #comprar 					#label: 'Comprar' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.666666 0 0 -5 1 -5 1 ) 					#model: #closeRequest 					#label: 'Cancelar' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -320 1 10 0 ) 					#label: 'Filtrando por categoría:' ) 				#(#{UI.InputEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} -185 1 10 0 -10 1 31 0 ) 					#name: #nombreCategoria 					#flags: 0 					#isOpaque: true 					#isWrapped: false 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#autoAccept: false 					#showInputCursor: true 					#showSelection: true 					#defaultString: 'Todo' ) ) ) )</body></methods><methods><class-id>MenuPrincipal class</class-id> <category>resources</category><body package="ProyectoFinal" selector="menuPrincipal">menuPrincipal	"Tools.MenuEditor new openOnClass: self andSelector: #menuPrincipal"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Archivo' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Nuevo' 							#value: #nuevo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileNew ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Abrir archivo...' 							#value: #abrir 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar' 							#value: #guardar 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Guardar como...' 							#value: #guardarComo 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Salir' 							#value: #closeRequest 							#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #abort ) ) ) #(2 2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Editar' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Administrar personas' 							#value: #administrarPersonas ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar usuarios' 							#value: #administrarUsuarios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar artículos' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Administrar productos/servicios' 										#value: #administrarArticulos ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar categorías' 										#value: #administrarCategorias ) 									#(#{UI.MenuItem} 										#rawLabel: 'Administrar parámetros generales' 										#value: #administrarParametrosGenerales ) ) #(3 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar precios' 							#value: #administrarPrecios ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar planes de compra' 							#value: #administrarPlanesDeCompra ) 						#(#{UI.MenuItem} 							#rawLabel: 'Administrar ventas' 							#value: #administrarVentas ) ) #(2 4 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '11:12:52 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:12:52 on 23 de enero de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'January 23, 2017' '11:15:23 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 23:15:23 on 23 de enero de 2017."</do-it><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="auto">auto	|pf|	pf:=self new.	pf		abrirUI.		"cargarUltimoGuardado."	^pf</body></methods><do-it>ProyectoFinal auto</do-it><do-it>admin := ProyectoFinal auto.</do-it><do-it>admin cargarArchivo.</do-it><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="auto">auto	|pf|	pf:=self new.	pf		abrirUI.		cargarUltimoGuardado.	^pf</body></methods><methods><class-id>ProyectoFinal class</class-id> <category>instance creation</category><body package="ProyectoFinal" selector="auto">auto	|pf|	pf:=self new.	pf		abrirUI		cargarUltimoGuardado.	^pf</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection))				setWritable: true.			self sobreescribirUltimoGuardado.			self cargarArchivo.			archivoGuardado		]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection))				setWritable: true.			self cargarArchivo.			self sobreescribirUltimoGuardado.			archivoGuardado		]		ifFalse: [nil]</body></methods><do-it>ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: ['' asFilename]).	archivoGuardado exists		ifTrue: [self cargarArchivo]		ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: [nil]).	archivoGuardado		ifTrue: [			archivoGuardado exists ifTrue:[self cargarArchivo]		]		ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: [false]).	archivoGuardado		ifTrue: [			archivoGuardado exists ifTrue:[self cargarArchivo]		]		ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: [false]).	archivoGuardado		ifTrue: [archivoGuardado exists ifTrue:[self cargarArchivo]]		ifFalse: [self guardarAlArchivo]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: [false]).	archivoGuardado		ifTrue: [archivoGuardado exists ifTrue:[self cargarArchivo]]		ifFalse: [self sobreescribirUltimoGuardado]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: ['info.ipf' asFilename]).	archivoGuardado		ifTrue: [archivoGuardado exists ifTrue:[self cargarArchivo]]		ifFalse: [self sobreescribirUltimoGuardado]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="cargarUltimoGuardado">cargarUltimoGuardado	|ultimoGuardado|	ultimoGuardado := 'ultimo_guardado' asFilename.	archivoGuardado := (ultimoGuardado exists		ifTrue: [ultimoGuardado contentsOfEntireFile asFilename]		ifFalse: ['info.ipf' asFilename]).	archivoGuardado exists		ifTrue: [self cargarArchivo]		ifFalse: [self sobreescribirUltimoGuardado]</body></methods><do-it>ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto.</do-it><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection)) setWritable: true.			self sobreescribirUltimoGuardado.			archivoGuardado		]		ifFalse: [nil]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>general</category><body package="ProyectoFinal" selector="abrirDesdeArchivo">abrirDesdeArchivo	| dialog |	dialog := OpenFileDialog new.	dialog 		addFileFilter: 'Informacion del proyecto final (*.ipf)' pattern: '*.ipf';		addFilterForAllFiles;		fileCondition: #any.	archivoGuardado ifNotNil: [dialog defaultFilename: archivoGuardado].	^dialog open		ifTrue: [ 			(archivoGuardado := (dialog selection)) setWritable: true.			self sobreescribirUltimoGuardado.			self cargarArchivo.		]		ifFalse: [nil]</body></methods><do-it>ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto.</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'June 1, 2017' '11:35:59 AM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 11:35:59 on 1 de junio de 2017."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im' 'June 1, 2017' '2:25:03 PM')""An image file /home/diego/VisualWorks Projects/Proyecto_Final/Proyecto_Final.im was created at 14:25:03 on 1 de junio de 2017."</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|test|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [						test := (self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not].						(((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|test list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [						test := (self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not].			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente].			((list length) &gt; 0) ifNil: [nil] ifNotNil: [:x| x asFloat]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|test list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [						test := (self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not].			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]) promedio: [:x| x calificacionCliente].			((list length) &gt; 0) ifTrue: [nil] ifFalse: [:x| x asFloat]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|test list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [						test := (self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not].			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list length) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente]) asFloat] ifFalse: [:x| nil]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|test list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [						test := (self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not].			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list length) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente]) asFloat] ifFalse: [nil]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|test list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list length) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente]) asFloat] ifFalse: [nil]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list length) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente]) asFloat] ifFalse: [nil]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list size) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente]) asFloat] ifFalse: [nil]		]		siEsVendedor: [			(((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]) promedio: [:x| x calificacionVendedor]) ifNil: [nil] ifNotNil: [:x| x asFloat]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list size) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente]) asFloat] ifFalse: [nil]		]		siEsVendedor: [			list := ((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]).			((list size) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionVendedor]) asFloat] ifFalse: [nil]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			((list size) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionCliente asFloat]) ] ifFalse: [nil]		]		siEsVendedor: [			list := ((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]).			((list size) &gt; 0) ifTrue: [(list promedio: [:x| x calificacionVendedor asFloat])] ifFalse: [nil]		]</body></methods><methods><class-id>ProyectoFinal</class-id> <category>personas</category><body package="ProyectoFinal" selector="promedioDelUsuario:">promedioDelUsuario: unId	|list|	^(self buscarUsuarioPorId: unId)		siEsAdministrador: [nil]		siEsCliente: [			list := ((self listaDeVentasDelCliente: unId) select: [:x| x calificacionCliente isNil not]).			(list size &gt; 0) ifTrue: [list promedio: [:x| x calificacionCliente asFloat] ] ifFalse: [nil]		]		siEsVendedor: [			list := ((self listaDeVentasDelVendedor: unId) select: [:x| x calificacionVendedor isNil not]).			(list size &gt; 0) ifTrue: [list promedio: [:x| x calificacionVendedor asFloat] ] ifFalse: [nil]		]</body></methods><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto.</do-it><do-it>programa := ProyectoFinal auto.</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it><do-it>ProyectoFinal auto</do-it>